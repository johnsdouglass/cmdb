// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/seizadi/cmdb/pkg/pb/contacts.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/seizadi/cmdb/pkg/pb/contacts.proto

It has these top-level messages:
	Profile
	CreateProfileRequest
	CreateProfileResponse
	ReadProfileRequest
	ReadProfileResponse
	UpdateProfileRequest
	UpdateProfileResponse
	DeleteProfileRequest
	DeleteProfileResponse
	ListProfileRequest
	ListProfilesResponse
	Group
	CreateGroupRequest
	CreateGroupResponse
	ReadGroupRequest
	ReadGroupResponse
	UpdateGroupRequest
	UpdateGroupResponse
	DeleteGroupRequest
	DeleteGroupResponse
	ListGroupRequest
	ListGroupsByProfileRequest
	ListGroupsResponse
	Contact
	Email
	Address
	CreateContactRequest
	CreateContactResponse
	ReadContactRequest
	ReadContactResponse
	UpdateContactRequest
	UpdateContactResponse
	DeleteContactRequest
	DeleteContactResponse
	ListContactsResponse
	ListContactsByProfileRequest
	ListContactsByGroupRequest
	SMSRequest
	SMSResponse
	ListContactRequest
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "google.golang.org/genproto/protobuf/field_mask"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"
import gorm_types "github.com/infobloxopen/protoc-gen-gorm/types"
import infoblox_api "github.com/infobloxopen/atlas-app-toolkit/query"
import atlas_rpc "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"
import _ "github.com/infobloxopen/protoc-gen-atlas-query-validate/options"
import _ "github.com/infobloxopen/protoc-gen-atlas-validate/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Profile represents a summary of details regarding user contacts and groups.
type Profile struct {
	// The profile identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Contacts profile name.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Contacts profile notes.
	Notes string `protobuf:"bytes,3,opt,name=notes" json:"notes,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Profile) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Profile) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Profile) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

type CreateProfileRequest struct {
	Payload *Profile `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateProfileRequest) Reset()                    { *m = CreateProfileRequest{} }
func (m *CreateProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateProfileRequest) ProtoMessage()               {}
func (*CreateProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateProfileRequest) GetPayload() *Profile {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateProfileResponse struct {
	Result *Profile `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateProfileResponse) Reset()                    { *m = CreateProfileResponse{} }
func (m *CreateProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateProfileResponse) ProtoMessage()               {}
func (*CreateProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateProfileResponse) GetResult() *Profile {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadProfileRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadProfileRequest) Reset()                    { *m = ReadProfileRequest{} }
func (m *ReadProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadProfileRequest) ProtoMessage()               {}
func (*ReadProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ReadProfileRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadProfileRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadProfileResponse struct {
	Result *Profile `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadProfileResponse) Reset()                    { *m = ReadProfileResponse{} }
func (m *ReadProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadProfileResponse) ProtoMessage()               {}
func (*ReadProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadProfileResponse) GetResult() *Profile {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateProfileRequest struct {
	Payload *Profile                   `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateProfileRequest) Reset()                    { *m = UpdateProfileRequest{} }
func (m *UpdateProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProfileRequest) ProtoMessage()               {}
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UpdateProfileRequest) GetPayload() *Profile {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateProfileRequest) GetFields() *google_protobuf.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateProfileResponse struct {
	Result *Profile `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateProfileResponse) Reset()                    { *m = UpdateProfileResponse{} }
func (m *UpdateProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateProfileResponse) ProtoMessage()               {}
func (*UpdateProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateProfileResponse) GetResult() *Profile {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteProfileRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteProfileRequest) Reset()                    { *m = DeleteProfileRequest{} }
func (m *DeleteProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteProfileRequest) ProtoMessage()               {}
func (*DeleteProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DeleteProfileRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteProfileResponse struct {
}

func (m *DeleteProfileResponse) Reset()                    { *m = DeleteProfileResponse{} }
func (m *DeleteProfileResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteProfileResponse) ProtoMessage()               {}
func (*DeleteProfileResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ListProfileRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListProfileRequest) Reset()                    { *m = ListProfileRequest{} }
func (m *ListProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ListProfileRequest) ProtoMessage()               {}
func (*ListProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListProfileRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListProfileRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListProfileRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListProfileRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListProfilesResponse struct {
	Results []*Profile             `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListProfilesResponse) Reset()                    { *m = ListProfilesResponse{} }
func (m *ListProfilesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListProfilesResponse) ProtoMessage()               {}
func (*ListProfilesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListProfilesResponse) GetResults() []*Profile {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListProfilesResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// Group is used to group the contacts, e. g. 'Friends', 'Family'.
type Group struct {
	// The contacts group identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The contacts group name.
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Brief description of group.
	Notes string `protobuf:"bytes,3,opt,name=notes" json:"notes,omitempty"`
	// The profile the group is associated with.
	ProfileId *atlas_rpc.Identifier `protobuf:"bytes,4,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Group) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Group) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Group) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Group) GetProfileId() *atlas_rpc.Identifier {
	if m != nil {
		return m.ProfileId
	}
	return nil
}

type CreateGroupRequest struct {
	Payload *Group `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateGroupRequest) Reset()                    { *m = CreateGroupRequest{} }
func (m *CreateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupRequest) ProtoMessage()               {}
func (*CreateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateGroupRequest) GetPayload() *Group {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateGroupResponse struct {
	Result *Group `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateGroupResponse) Reset()                    { *m = CreateGroupResponse{} }
func (m *CreateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateGroupResponse) ProtoMessage()               {}
func (*CreateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateGroupResponse) GetResult() *Group {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadGroupRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadGroupRequest) Reset()                    { *m = ReadGroupRequest{} }
func (m *ReadGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadGroupRequest) ProtoMessage()               {}
func (*ReadGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *ReadGroupRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadGroupRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadGroupResponse struct {
	Result *Group `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadGroupResponse) Reset()                    { *m = ReadGroupResponse{} }
func (m *ReadGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadGroupResponse) ProtoMessage()               {}
func (*ReadGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReadGroupResponse) GetResult() *Group {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateGroupRequest struct {
	Payload *Group                     `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateGroupRequest) Reset()                    { *m = UpdateGroupRequest{} }
func (m *UpdateGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupRequest) ProtoMessage()               {}
func (*UpdateGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateGroupRequest) GetPayload() *Group {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateGroupRequest) GetFields() *google_protobuf.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateGroupResponse struct {
	Result *Group `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateGroupResponse) Reset()                    { *m = UpdateGroupResponse{} }
func (m *UpdateGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateGroupResponse) ProtoMessage()               {}
func (*UpdateGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateGroupResponse) GetResult() *Group {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteGroupRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteGroupRequest) Reset()                    { *m = DeleteGroupRequest{} }
func (m *DeleteGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupRequest) ProtoMessage()               {}
func (*DeleteGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteGroupRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteGroupResponse struct {
}

func (m *DeleteGroupResponse) Reset()                    { *m = DeleteGroupResponse{} }
func (m *DeleteGroupResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteGroupResponse) ProtoMessage()               {}
func (*DeleteGroupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type ListGroupRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListGroupRequest) Reset()                    { *m = ListGroupRequest{} }
func (m *ListGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupRequest) ProtoMessage()               {}
func (*ListGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *ListGroupRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListGroupRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListGroupRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListGroupRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListGroupsByProfileRequest struct {
	Filter    *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy   *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields    *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging    *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
	ProfileId *atlas_rpc.Identifier        `protobuf:"bytes,5,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
}

func (m *ListGroupsByProfileRequest) Reset()                    { *m = ListGroupsByProfileRequest{} }
func (m *ListGroupsByProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ListGroupsByProfileRequest) ProtoMessage()               {}
func (*ListGroupsByProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ListGroupsByProfileRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListGroupsByProfileRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListGroupsByProfileRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListGroupsByProfileRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

func (m *ListGroupsByProfileRequest) GetProfileId() *atlas_rpc.Identifier {
	if m != nil {
		return m.ProfileId
	}
	return nil
}

type ListGroupsResponse struct {
	Results []*Group               `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListGroupsResponse) Reset()                    { *m = ListGroupsResponse{} }
func (m *ListGroupsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListGroupsResponse) ProtoMessage()               {}
func (*ListGroupsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ListGroupsResponse) GetResults() []*Group {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListGroupsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// Contact represents a particular person in an contacts list.
type Contact struct {
	// The contact identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The first name of the person.
	FirstName string `protobuf:"bytes,2,opt,name=first_name,json=firstName" json:"first_name,omitempty"`
	// The middle name of the person.
	MiddleName string `protobuf:"bytes,3,opt,name=middle_name,json=middleName" json:"middle_name,omitempty"`
	// The last name of the person.
	LastName string `protobuf:"bytes,4,opt,name=last_name,json=lastName" json:"last_name,omitempty"`
	// The person's primary email.
	PrimaryEmail string `protobuf:"bytes,5,opt,name=primary_email,json=primaryEmail" json:"primary_email,omitempty"`
	// Brief description associated with contact.
	Notes string `protobuf:"bytes,6,opt,name=notes" json:"notes,omitempty"`
	// The list of emails associated with person.
	Emails []*Email `protobuf:"bytes,7,rep,name=emails" json:"emails,omitempty"`
	// The home address of the person.
	HomeAddress *Address `protobuf:"bytes,8,opt,name=home_address,json=homeAddress" json:"home_address,omitempty"`
	// The work address of the person
	WorkAddress *Address `protobuf:"bytes,9,opt,name=work_address,json=workAddress" json:"work_address,omitempty"`
	// The profile the contact belongs to.
	ProfileId *atlas_rpc.Identifier `protobuf:"bytes,10,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
	// nicknames is arbitrary json, but should be used for a list of strings.
	Nicknames *gorm_types.JSONValue `protobuf:"bytes,11,opt,name=nicknames" json:"nicknames,omitempty"`
	// groups associated with the contact
	Groups []*atlas_rpc.Identifier `protobuf:"bytes,12,rep,name=groups" json:"groups,omitempty"`
}

func (m *Contact) Reset()                    { *m = Contact{} }
func (m *Contact) String() string            { return proto.CompactTextString(m) }
func (*Contact) ProtoMessage()               {}
func (*Contact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *Contact) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Contact) GetFirstName() string {
	if m != nil {
		return m.FirstName
	}
	return ""
}

func (m *Contact) GetMiddleName() string {
	if m != nil {
		return m.MiddleName
	}
	return ""
}

func (m *Contact) GetLastName() string {
	if m != nil {
		return m.LastName
	}
	return ""
}

func (m *Contact) GetPrimaryEmail() string {
	if m != nil {
		return m.PrimaryEmail
	}
	return ""
}

func (m *Contact) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Contact) GetEmails() []*Email {
	if m != nil {
		return m.Emails
	}
	return nil
}

func (m *Contact) GetHomeAddress() *Address {
	if m != nil {
		return m.HomeAddress
	}
	return nil
}

func (m *Contact) GetWorkAddress() *Address {
	if m != nil {
		return m.WorkAddress
	}
	return nil
}

func (m *Contact) GetProfileId() *atlas_rpc.Identifier {
	if m != nil {
		return m.ProfileId
	}
	return nil
}

func (m *Contact) GetNicknames() *gorm_types.JSONValue {
	if m != nil {
		return m.Nicknames
	}
	return nil
}

func (m *Contact) GetGroups() []*atlas_rpc.Identifier {
	if m != nil {
		return m.Groups
	}
	return nil
}

// Email respresents the e-mail address.
type Email struct {
	// The value of the e-mail address.
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *Email) Reset()                    { *m = Email{} }
func (m *Email) String() string            { return proto.CompactTextString(m) }
func (*Email) ProtoMessage()               {}
func (*Email) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *Email) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// Address represents information about contact location.
type Address struct {
	// The address value.
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
	// The city name.
	City string `protobuf:"bytes,2,opt,name=city" json:"city,omitempty"`
	// State name abbrivated to two letters.
	State string `protobuf:"bytes,3,opt,name=state" json:"state,omitempty"`
	// ZIP code.
	Zip string `protobuf:"bytes,4,opt,name=zip" json:"zip,omitempty"`
	// Country name.
	Country string `protobuf:"bytes,5,opt,name=country" json:"country,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *Address) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Address) GetCity() string {
	if m != nil {
		return m.City
	}
	return ""
}

func (m *Address) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Address) GetZip() string {
	if m != nil {
		return m.Zip
	}
	return ""
}

func (m *Address) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

type CreateContactRequest struct {
	Payload *Contact `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateContactRequest) Reset()                    { *m = CreateContactRequest{} }
func (m *CreateContactRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContactRequest) ProtoMessage()               {}
func (*CreateContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *CreateContactRequest) GetPayload() *Contact {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateContactResponse struct {
	Result *Contact `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateContactResponse) Reset()                    { *m = CreateContactResponse{} }
func (m *CreateContactResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateContactResponse) ProtoMessage()               {}
func (*CreateContactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *CreateContactResponse) GetResult() *Contact {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadContactRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadContactRequest) Reset()                    { *m = ReadContactRequest{} }
func (m *ReadContactRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadContactRequest) ProtoMessage()               {}
func (*ReadContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *ReadContactRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadContactRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadContactResponse struct {
	Result *Contact `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadContactResponse) Reset()                    { *m = ReadContactResponse{} }
func (m *ReadContactResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadContactResponse) ProtoMessage()               {}
func (*ReadContactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *ReadContactResponse) GetResult() *Contact {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateContactRequest struct {
	Payload *Contact                   `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateContactRequest) Reset()                    { *m = UpdateContactRequest{} }
func (m *UpdateContactRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateContactRequest) ProtoMessage()               {}
func (*UpdateContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *UpdateContactRequest) GetPayload() *Contact {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateContactRequest) GetFields() *google_protobuf.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateContactResponse struct {
	Result *Contact `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateContactResponse) Reset()                    { *m = UpdateContactResponse{} }
func (m *UpdateContactResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateContactResponse) ProtoMessage()               {}
func (*UpdateContactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *UpdateContactResponse) GetResult() *Contact {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteContactRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteContactRequest) Reset()                    { *m = DeleteContactRequest{} }
func (m *DeleteContactRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteContactRequest) ProtoMessage()               {}
func (*DeleteContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *DeleteContactRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteContactResponse struct {
}

func (m *DeleteContactResponse) Reset()                    { *m = DeleteContactResponse{} }
func (m *DeleteContactResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteContactResponse) ProtoMessage()               {}
func (*DeleteContactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

type ListContactsResponse struct {
	Results []*Contact             `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListContactsResponse) Reset()                    { *m = ListContactsResponse{} }
func (m *ListContactsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListContactsResponse) ProtoMessage()               {}
func (*ListContactsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *ListContactsResponse) GetResults() []*Contact {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListContactsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

type ListContactsByProfileRequest struct {
	Filter    *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy   *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields    *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging    *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
	ProfileId *atlas_rpc.Identifier        `protobuf:"bytes,5,opt,name=profile_id,json=profileId" json:"profile_id,omitempty"`
}

func (m *ListContactsByProfileRequest) Reset()                    { *m = ListContactsByProfileRequest{} }
func (m *ListContactsByProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContactsByProfileRequest) ProtoMessage()               {}
func (*ListContactsByProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *ListContactsByProfileRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListContactsByProfileRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListContactsByProfileRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListContactsByProfileRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

func (m *ListContactsByProfileRequest) GetProfileId() *atlas_rpc.Identifier {
	if m != nil {
		return m.ProfileId
	}
	return nil
}

type ListContactsByGroupRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
	GroupId *atlas_rpc.Identifier        `protobuf:"bytes,5,opt,name=group_id,json=groupId" json:"group_id,omitempty"`
}

func (m *ListContactsByGroupRequest) Reset()                    { *m = ListContactsByGroupRequest{} }
func (m *ListContactsByGroupRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContactsByGroupRequest) ProtoMessage()               {}
func (*ListContactsByGroupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *ListContactsByGroupRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListContactsByGroupRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListContactsByGroupRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListContactsByGroupRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

func (m *ListContactsByGroupRequest) GetGroupId() *atlas_rpc.Identifier {
	if m != nil {
		return m.GroupId
	}
	return nil
}

type SMSRequest struct {
	Id      uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *SMSRequest) Reset()                    { *m = SMSRequest{} }
func (m *SMSRequest) String() string            { return proto.CompactTextString(m) }
func (*SMSRequest) ProtoMessage()               {}
func (*SMSRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *SMSRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SMSRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SMSResponse struct {
}

func (m *SMSResponse) Reset()                    { *m = SMSResponse{} }
func (m *SMSResponse) String() string            { return proto.CompactTextString(m) }
func (*SMSResponse) ProtoMessage()               {}
func (*SMSResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

type ListContactRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListContactRequest) Reset()                    { *m = ListContactRequest{} }
func (m *ListContactRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContactRequest) ProtoMessage()               {}
func (*ListContactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ListContactRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListContactRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListContactRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListContactRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

func init() {
	proto.RegisterType((*Profile)(nil), "api.contacts.Profile")
	proto.RegisterType((*CreateProfileRequest)(nil), "api.contacts.CreateProfileRequest")
	proto.RegisterType((*CreateProfileResponse)(nil), "api.contacts.CreateProfileResponse")
	proto.RegisterType((*ReadProfileRequest)(nil), "api.contacts.ReadProfileRequest")
	proto.RegisterType((*ReadProfileResponse)(nil), "api.contacts.ReadProfileResponse")
	proto.RegisterType((*UpdateProfileRequest)(nil), "api.contacts.UpdateProfileRequest")
	proto.RegisterType((*UpdateProfileResponse)(nil), "api.contacts.UpdateProfileResponse")
	proto.RegisterType((*DeleteProfileRequest)(nil), "api.contacts.DeleteProfileRequest")
	proto.RegisterType((*DeleteProfileResponse)(nil), "api.contacts.DeleteProfileResponse")
	proto.RegisterType((*ListProfileRequest)(nil), "api.contacts.ListProfileRequest")
	proto.RegisterType((*ListProfilesResponse)(nil), "api.contacts.ListProfilesResponse")
	proto.RegisterType((*Group)(nil), "api.contacts.Group")
	proto.RegisterType((*CreateGroupRequest)(nil), "api.contacts.CreateGroupRequest")
	proto.RegisterType((*CreateGroupResponse)(nil), "api.contacts.CreateGroupResponse")
	proto.RegisterType((*ReadGroupRequest)(nil), "api.contacts.ReadGroupRequest")
	proto.RegisterType((*ReadGroupResponse)(nil), "api.contacts.ReadGroupResponse")
	proto.RegisterType((*UpdateGroupRequest)(nil), "api.contacts.UpdateGroupRequest")
	proto.RegisterType((*UpdateGroupResponse)(nil), "api.contacts.UpdateGroupResponse")
	proto.RegisterType((*DeleteGroupRequest)(nil), "api.contacts.DeleteGroupRequest")
	proto.RegisterType((*DeleteGroupResponse)(nil), "api.contacts.DeleteGroupResponse")
	proto.RegisterType((*ListGroupRequest)(nil), "api.contacts.ListGroupRequest")
	proto.RegisterType((*ListGroupsByProfileRequest)(nil), "api.contacts.ListGroupsByProfileRequest")
	proto.RegisterType((*ListGroupsResponse)(nil), "api.contacts.ListGroupsResponse")
	proto.RegisterType((*Contact)(nil), "api.contacts.Contact")
	proto.RegisterType((*Email)(nil), "api.contacts.Email")
	proto.RegisterType((*Address)(nil), "api.contacts.Address")
	proto.RegisterType((*CreateContactRequest)(nil), "api.contacts.CreateContactRequest")
	proto.RegisterType((*CreateContactResponse)(nil), "api.contacts.CreateContactResponse")
	proto.RegisterType((*ReadContactRequest)(nil), "api.contacts.ReadContactRequest")
	proto.RegisterType((*ReadContactResponse)(nil), "api.contacts.ReadContactResponse")
	proto.RegisterType((*UpdateContactRequest)(nil), "api.contacts.UpdateContactRequest")
	proto.RegisterType((*UpdateContactResponse)(nil), "api.contacts.UpdateContactResponse")
	proto.RegisterType((*DeleteContactRequest)(nil), "api.contacts.DeleteContactRequest")
	proto.RegisterType((*DeleteContactResponse)(nil), "api.contacts.DeleteContactResponse")
	proto.RegisterType((*ListContactsResponse)(nil), "api.contacts.ListContactsResponse")
	proto.RegisterType((*ListContactsByProfileRequest)(nil), "api.contacts.ListContactsByProfileRequest")
	proto.RegisterType((*ListContactsByGroupRequest)(nil), "api.contacts.ListContactsByGroupRequest")
	proto.RegisterType((*SMSRequest)(nil), "api.contacts.SMSRequest")
	proto.RegisterType((*SMSResponse)(nil), "api.contacts.SMSResponse")
	proto.RegisterType((*ListContactRequest)(nil), "api.contacts.ListContactRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Profiles service

type ProfilesClient interface {
	// Use this method to create a user profile.
	Create(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error)
	// Use this method to retrieve the particular user profile.
	Read(ctx context.Context, in *ReadProfileRequest, opts ...grpc.CallOption) (*ReadProfileResponse, error)
	// Use this method to update user profile.
	Update(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error)
	// Use this method to delete a profile.
	Delete(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*DeleteProfileResponse, error)
	// Use this method to retrieve the list of user profiles.
	List(ctx context.Context, in *ListProfileRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error)
}

type profilesClient struct {
	cc *grpc.ClientConn
}

func NewProfilesClient(cc *grpc.ClientConn) ProfilesClient {
	return &profilesClient{cc}
}

func (c *profilesClient) Create(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*CreateProfileResponse, error) {
	out := new(CreateProfileResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Profiles/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Read(ctx context.Context, in *ReadProfileRequest, opts ...grpc.CallOption) (*ReadProfileResponse, error) {
	out := new(ReadProfileResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Profiles/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Update(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*UpdateProfileResponse, error) {
	out := new(UpdateProfileResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Profiles/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) Delete(ctx context.Context, in *DeleteProfileRequest, opts ...grpc.CallOption) (*DeleteProfileResponse, error) {
	out := new(DeleteProfileResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Profiles/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profilesClient) List(ctx context.Context, in *ListProfileRequest, opts ...grpc.CallOption) (*ListProfilesResponse, error) {
	out := new(ListProfilesResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Profiles/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Profiles service

type ProfilesServer interface {
	// Use this method to create a user profile.
	Create(context.Context, *CreateProfileRequest) (*CreateProfileResponse, error)
	// Use this method to retrieve the particular user profile.
	Read(context.Context, *ReadProfileRequest) (*ReadProfileResponse, error)
	// Use this method to update user profile.
	Update(context.Context, *UpdateProfileRequest) (*UpdateProfileResponse, error)
	// Use this method to delete a profile.
	Delete(context.Context, *DeleteProfileRequest) (*DeleteProfileResponse, error)
	// Use this method to retrieve the list of user profiles.
	List(context.Context, *ListProfileRequest) (*ListProfilesResponse, error)
}

func RegisterProfilesServer(s *grpc.Server, srv ProfilesServer) {
	s.RegisterService(&_Profiles_serviceDesc, srv)
}

func _Profiles_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Profiles/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Create(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Profiles/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Read(ctx, req.(*ReadProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Profiles/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Update(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Profiles/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).Delete(ctx, req.(*DeleteProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Profiles_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfilesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Profiles/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfilesServer).List(ctx, req.(*ListProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Profiles_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.contacts.Profiles",
	HandlerType: (*ProfilesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Profiles_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Profiles_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Profiles_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Profiles_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Profiles_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/contacts.proto",
}

// Client API for Groups service

type GroupsClient interface {
	// Use this method to create a specific contacts group.
	Create(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error)
	// Use this method to retrieve a particular contacts group.
	Read(ctx context.Context, in *ReadGroupRequest, opts ...grpc.CallOption) (*ReadGroupResponse, error)
	// Use this method to update a particular contacts group.
	Update(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error)
	// Use this method to remove a selected contacts group.
	Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error)
	// Use this method to retrieve all the contact groups.
	List(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
	// Use this method to retrieve all groups which belong to a profile.
	ListByProfile(ctx context.Context, in *ListGroupsByProfileRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error)
}

type groupsClient struct {
	cc *grpc.ClientConn
}

func NewGroupsClient(cc *grpc.ClientConn) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) Create(ctx context.Context, in *CreateGroupRequest, opts ...grpc.CallOption) (*CreateGroupResponse, error) {
	out := new(CreateGroupResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) Read(ctx context.Context, in *ReadGroupRequest, opts ...grpc.CallOption) (*ReadGroupResponse, error) {
	out := new(ReadGroupResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) Update(ctx context.Context, in *UpdateGroupRequest, opts ...grpc.CallOption) (*UpdateGroupResponse, error) {
	out := new(UpdateGroupResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) Delete(ctx context.Context, in *DeleteGroupRequest, opts ...grpc.CallOption) (*DeleteGroupResponse, error) {
	out := new(DeleteGroupResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) List(ctx context.Context, in *ListGroupRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) ListByProfile(ctx context.Context, in *ListGroupsByProfileRequest, opts ...grpc.CallOption) (*ListGroupsResponse, error) {
	out := new(ListGroupsResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Groups/ListByProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Groups service

type GroupsServer interface {
	// Use this method to create a specific contacts group.
	Create(context.Context, *CreateGroupRequest) (*CreateGroupResponse, error)
	// Use this method to retrieve a particular contacts group.
	Read(context.Context, *ReadGroupRequest) (*ReadGroupResponse, error)
	// Use this method to update a particular contacts group.
	Update(context.Context, *UpdateGroupRequest) (*UpdateGroupResponse, error)
	// Use this method to remove a selected contacts group.
	Delete(context.Context, *DeleteGroupRequest) (*DeleteGroupResponse, error)
	// Use this method to retrieve all the contact groups.
	List(context.Context, *ListGroupRequest) (*ListGroupsResponse, error)
	// Use this method to retrieve all groups which belong to a profile.
	ListByProfile(context.Context, *ListGroupsByProfileRequest) (*ListGroupsResponse, error)
}

func RegisterGroupsServer(s *grpc.Server, srv GroupsServer) {
	s.RegisterService(&_Groups_serviceDesc, srv)
}

func _Groups_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).Create(ctx, req.(*CreateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).Read(ctx, req.(*ReadGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).Update(ctx, req.(*UpdateGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).Delete(ctx, req.(*DeleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).List(ctx, req.(*ListGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_ListByProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGroupsByProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).ListByProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Groups/ListByProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).ListByProfile(ctx, req.(*ListGroupsByProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Groups_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.contacts.Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Groups_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Groups_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Groups_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Groups_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Groups_List_Handler,
		},
		{
			MethodName: "ListByProfile",
			Handler:    _Groups_ListByProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/contacts.proto",
}

// Client API for Contacts service

type ContactsClient interface {
	// Use this method to create a contact information.
	Create(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error)
	// Use this method to read a contact information by identifier.
	Read(ctx context.Context, in *ReadContactRequest, opts ...grpc.CallOption) (*ReadContactResponse, error)
	// Use this method to update a contact information.
	Update(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error)
	// Use this method to delete a particular contact.
	Delete(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error)
	// Use this method to retrieve all the contacts.
	List(ctx context.Context, in *ListContactRequest, opts ...grpc.CallOption) (*ListContactsResponse, error)
	// Use this method to retrieve all contacts which belong to a profile.
	ListByProfile(ctx context.Context, in *ListContactsByProfileRequest, opts ...grpc.CallOption) (*ListContactsResponse, error)
	// Use this method to retrieve all contacts which belong to a group.
	ListByGroup(ctx context.Context, in *ListContactsByGroupRequest, opts ...grpc.CallOption) (*ListContactsResponse, error)
	// Use this method to Send an SMS to a given contact.
	SendSMS(ctx context.Context, in *SMSRequest, opts ...grpc.CallOption) (*SMSResponse, error)
}

type contactsClient struct {
	cc *grpc.ClientConn
}

func NewContactsClient(cc *grpc.ClientConn) ContactsClient {
	return &contactsClient{cc}
}

func (c *contactsClient) Create(ctx context.Context, in *CreateContactRequest, opts ...grpc.CallOption) (*CreateContactResponse, error) {
	out := new(CreateContactResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) Read(ctx context.Context, in *ReadContactRequest, opts ...grpc.CallOption) (*ReadContactResponse, error) {
	out := new(ReadContactResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) Update(ctx context.Context, in *UpdateContactRequest, opts ...grpc.CallOption) (*UpdateContactResponse, error) {
	out := new(UpdateContactResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) Delete(ctx context.Context, in *DeleteContactRequest, opts ...grpc.CallOption) (*DeleteContactResponse, error) {
	out := new(DeleteContactResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) List(ctx context.Context, in *ListContactRequest, opts ...grpc.CallOption) (*ListContactsResponse, error) {
	out := new(ListContactsResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) ListByProfile(ctx context.Context, in *ListContactsByProfileRequest, opts ...grpc.CallOption) (*ListContactsResponse, error) {
	out := new(ListContactsResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/ListByProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) ListByGroup(ctx context.Context, in *ListContactsByGroupRequest, opts ...grpc.CallOption) (*ListContactsResponse, error) {
	out := new(ListContactsResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/ListByGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactsClient) SendSMS(ctx context.Context, in *SMSRequest, opts ...grpc.CallOption) (*SMSResponse, error) {
	out := new(SMSResponse)
	err := grpc.Invoke(ctx, "/api.contacts.Contacts/SendSMS", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Contacts service

type ContactsServer interface {
	// Use this method to create a contact information.
	Create(context.Context, *CreateContactRequest) (*CreateContactResponse, error)
	// Use this method to read a contact information by identifier.
	Read(context.Context, *ReadContactRequest) (*ReadContactResponse, error)
	// Use this method to update a contact information.
	Update(context.Context, *UpdateContactRequest) (*UpdateContactResponse, error)
	// Use this method to delete a particular contact.
	Delete(context.Context, *DeleteContactRequest) (*DeleteContactResponse, error)
	// Use this method to retrieve all the contacts.
	List(context.Context, *ListContactRequest) (*ListContactsResponse, error)
	// Use this method to retrieve all contacts which belong to a profile.
	ListByProfile(context.Context, *ListContactsByProfileRequest) (*ListContactsResponse, error)
	// Use this method to retrieve all contacts which belong to a group.
	ListByGroup(context.Context, *ListContactsByGroupRequest) (*ListContactsResponse, error)
	// Use this method to Send an SMS to a given contact.
	SendSMS(context.Context, *SMSRequest) (*SMSResponse, error)
}

func RegisterContactsServer(s *grpc.Server, srv ContactsServer) {
	s.RegisterService(&_Contacts_serviceDesc, srv)
}

func _Contacts_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Create(ctx, req.(*CreateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Read(ctx, req.(*ReadContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Update(ctx, req.(*UpdateContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).Delete(ctx, req.(*DeleteContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).List(ctx, req.(*ListContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_ListByProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactsByProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).ListByProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/ListByProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).ListByProfile(ctx, req.(*ListContactsByProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_ListByGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContactsByGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).ListByGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/ListByGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).ListByGroup(ctx, req.(*ListContactsByGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Contacts_SendSMS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactsServer).SendSMS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.contacts.Contacts/SendSMS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactsServer).SendSMS(ctx, req.(*SMSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Contacts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.contacts.Contacts",
	HandlerType: (*ContactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Contacts_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Contacts_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Contacts_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Contacts_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Contacts_List_Handler,
		},
		{
			MethodName: "ListByProfile",
			Handler:    _Contacts_ListByProfile_Handler,
		},
		{
			MethodName: "ListByGroup",
			Handler:    _Contacts_ListByGroup_Handler,
		},
		{
			MethodName: "SendSMS",
			Handler:    _Contacts_SendSMS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/contacts.proto",
}

func init() { proto.RegisterFile("github.com/seizadi/cmdb/pkg/pb/contacts.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2107 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x5a, 0xcd, 0x8f, 0x1b, 0x49,
	0x15, 0x4f, 0xf5, 0xf8, 0xf3, 0x79, 0x12, 0x26, 0x35, 0x33, 0xc4, 0x36, 0xd9, 0x8d, 0xd3, 0x2b,
	0x96, 0xc4, 0xc3, 0xb8, 0x13, 0x27, 0x2c, 0xc2, 0x11, 0x52, 0xe2, 0x64, 0xb3, 0x4a, 0xd8, 0xcc,
	0x46, 0x9e, 0x05, 0x41, 0x42, 0xf0, 0xb6, 0xdd, 0x35, 0x9e, 0xda, 0x69, 0x77, 0x75, 0xba, 0xdb,
	0x1b, 0x3c, 0xab, 0xbd, 0x2c, 0x37, 0x84, 0x38, 0x2c, 0x1c, 0x60, 0x11, 0x02, 0x71, 0xe2, 0x82,
	0x38, 0xdb, 0x1c, 0x40, 0x1c, 0xf7, 0x84, 0xc4, 0x0d, 0x09, 0x71, 0xe1, 0xc2, 0x89, 0x7f, 0x80,
	0x03, 0xea, 0xea, 0xaa, 0xb6, 0xbb, 0xdd, 0x76, 0xbc, 0x1e, 0xb1, 0x87, 0x88, 0x4b, 0xd4, 0xae,
	0xfa, 0xd5, 0xfb, 0xaa, 0xf7, 0x7e, 0xf5, 0xaa, 0x32, 0xb0, 0xdb, 0xa3, 0xde, 0xe1, 0xa0, 0x53,
	0xeb, 0xb2, 0xbe, 0xe6, 0x12, 0x7a, 0xac, 0x1b, 0x54, 0xeb, 0xf6, 0x8d, 0x8e, 0x66, 0x1f, 0xf5,
	0x34, 0xbb, 0xa3, 0x75, 0x99, 0xe5, 0xe9, 0x5d, 0xcf, 0xad, 0xd9, 0x0e, 0xf3, 0x18, 0x5e, 0xd7,
	0x6d, 0x5a, 0x93, 0x63, 0xe5, 0x4a, 0x8f, 0xb1, 0x9e, 0x49, 0x34, 0x3e, 0xd7, 0x19, 0x1c, 0x68,
	0x07, 0x94, 0x98, 0x46, 0xbb, 0xaf, 0xbb, 0x47, 0x01, 0xbe, 0x7c, 0x5e, 0x20, 0x74, 0x9b, 0x6a,
	0xba, 0x65, 0x31, 0x4f, 0xf7, 0x28, 0xb3, 0x84, 0xb4, 0xf2, 0x8d, 0x29, 0xe5, 0xe6, 0xf0, 0xc0,
	0x0b, 0x04, 0x75, 0x77, 0x7b, 0xc4, 0xda, 0x7d, 0x4f, 0x37, 0xa9, 0xa1, 0x7b, 0x44, 0x9b, 0xf9,
	0x10, 0x8b, 0xbf, 0x3c, 0x05, 0x76, 0x9f, 0xe9, 0xbd, 0x1e, 0x71, 0x34, 0x66, 0x73, 0xf1, 0x09,
	0xaa, 0x1a, 0x53, 0xaa, 0xa8, 0x75, 0xc0, 0x3a, 0x26, 0xfb, 0x3e, 0xb3, 0x89, 0x35, 0xad, 0xb2,
	0xc7, 0x9c, 0x7e, 0x28, 0xc2, 0xff, 0x21, 0xd6, 0x7e, 0x6d, 0xd9, 0xb5, 0xde, 0xd0, 0x26, 0x6e,
	0xf0, 0xaf, 0x58, 0x7a, 0x7f, 0xde, 0x52, 0xdd, 0x33, 0x75, 0x77, 0x57, 0xb7, 0xed, 0x5d, 0x8f,
	0x31, 0xf3, 0x88, 0x7a, 0xda, 0xd3, 0x01, 0x71, 0x86, 0x5a, 0x97, 0x99, 0x26, 0xe9, 0xfa, 0x26,
	0xb4, 0x99, 0x4d, 0x1c, 0xdd, 0x63, 0x8e, 0x94, 0xf5, 0xfa, 0xf2, 0xb2, 0x1c, 0xbb, 0xab, 0x39,
	0xc4, 0x65, 0x03, 0xa7, 0x4b, 0xc2, 0x0f, 0x21, 0xe6, 0xed, 0x25, 0xbc, 0x09, 0x24, 0x72, 0x8b,
	0x26, 0x1b, 0x21, 0x23, 0xc3, 0x87, 0xdb, 0xb1, 0xdd, 0xd8, 0x5b, 0x5a, 0xea, 0x8c, 0x3c, 0x3e,
	0x1c, 0x93, 0xa7, 0xfe, 0x05, 0x41, 0xf6, 0xa1, 0xc3, 0x0e, 0xa8, 0x49, 0xf0, 0x57, 0x41, 0xa1,
	0x46, 0x11, 0x55, 0xd0, 0xa5, 0x42, 0x7d, 0xbb, 0xc6, 0xe1, 0x35, 0xc7, 0xee, 0xd6, 0xee, 0x19,
	0xc4, 0xf2, 0xe8, 0x01, 0x25, 0x4e, 0x73, 0x63, 0x3c, 0x2a, 0xad, 0x03, 0xe0, 0x8c, 0x4b, 0x1c,
	0xaa, 0x9b, 0x97, 0x50, 0x4b, 0xa1, 0x06, 0xc6, 0x90, 0xb2, 0xf4, 0x3e, 0x29, 0x2a, 0x15, 0x74,
	0x29, 0xdf, 0xe2, 0xdf, 0x58, 0x85, 0xb4, 0xc5, 0x3c, 0xe2, 0x16, 0xd7, 0xfc, 0xc1, 0xe6, 0xfa,
	0x27, 0xa3, 0x52, 0x0e, 0x94, 0x0d, 0x84, 0x95, 0x1c, 0x6a, 0x05, 0x53, 0x8d, 0xb7, 0xc7, 0xa3,
	0xd2, 0xc3, 0x1c, 0xc2, 0xaf, 0xc2, 0xe9, 0xc7, 0x4f, 0xaa, 0xb7, 0x83, 0x74, 0x7f, 0xab, 0xf5,
	0x00, 0xe7, 0x6e, 0xcb, 0xd4, 0x2f, 0x1c, 0xe7, 0x85, 0x79, 0xf7, 0x0c, 0xac, 0x42, 0xe1, 0xf1,
	0x93, 0xea, 0x1b, 0x0e, 0x1b, 0xd8, 0x3e, 0x2a, 0xc3, 0xbf, 0xa2, 0x98, 0x0a, 0x52, 0xdf, 0x80,
	0xad, 0xdb, 0x0e, 0xd1, 0x3d, 0x22, 0x06, 0x5b, 0xe4, 0xe9, 0x80, 0xb8, 0x1e, 0xd6, 0x20, 0x6b,
	0xeb, 0x43, 0x93, 0xe9, 0x53, 0x3e, 0x4e, 0x55, 0x59, 0x4d, 0xc2, 0x25, 0x4a, 0xbd, 0x0b, 0xdb,
	0x31, 0x41, 0xae, 0xcd, 0x2c, 0x97, 0xe0, 0x5d, 0xc8, 0x38, 0xc4, 0x1d, 0x98, 0xde, 0x62, 0x41,
	0x02, 0xa4, 0x3e, 0x05, 0xdc, 0x22, 0xba, 0x11, 0x33, 0xe7, 0x8b, 0xcf, 0x8d, 0x36, 0x8f, 0xed,
	0x75, 0xc8, 0xf0, 0x6a, 0x77, 0x79, 0x74, 0x0b, 0xf5, 0xf3, 0x35, 0xb9, 0xed, 0x5c, 0xe9, 0x5d,
	0x7f, 0x6e, 0x9f, 0x88, 0x5c, 0x6e, 0x09, 0xac, 0x7a, 0x07, 0x36, 0x23, 0x2a, 0x57, 0x33, 0xfc,
	0x7d, 0xd8, 0xfa, 0xa6, 0x6d, 0x9c, 0x3c, 0x92, 0xb8, 0x1e, 0x73, 0xa2, 0x5c, 0x0b, 0xf8, 0xaa,
	0x26, 0x19, 0x2d, 0xf0, 0xe3, 0x81, 0xee, 0x1e, 0x85, 0x2e, 0xdc, 0x85, 0xed, 0x98, 0xf2, 0xd5,
	0x9c, 0xf8, 0x3a, 0x6c, 0xdd, 0x21, 0x26, 0x99, 0x71, 0x62, 0xb9, 0xf8, 0xab, 0xe7, 0x60, 0x3b,
	0xb6, 0x3c, 0x30, 0x43, 0xfd, 0x07, 0x02, 0xfc, 0x26, 0x75, 0xbd, 0x99, 0xd8, 0x64, 0x0e, 0xa8,
	0xe9, 0x11, 0x47, 0x88, 0x3e, 0x17, 0xdf, 0x2f, 0x7f, 0x8e, 0x5a, 0xbd, 0x96, 0x80, 0xe1, 0x2b,
	0x90, 0x63, 0x8e, 0x41, 0x9c, 0x76, 0x67, 0x28, 0xa2, 0xb3, 0x1d, 0x5d, 0xb2, 0xcf, 0x1c, 0xcf,
	0x5f, 0x90, 0xe5, 0xb0, 0xe6, 0x70, 0x2a, 0x25, 0xd6, 0x96, 0x4f, 0x09, 0x7c, 0x05, 0x32, 0xb6,
	0xde, 0xa3, 0x56, 0xaf, 0x98, 0xe2, 0xab, 0x8a, 0xd1, 0x55, 0x0f, 0xfd, 0x39, 0x3d, 0x58, 0x11,
	0xe0, 0x54, 0x17, 0xb6, 0xa6, 0x1c, 0x74, 0xc3, 0x0d, 0xd0, 0x20, 0x1b, 0xc4, 0xd6, 0x2d, 0xa2,
	0xca, 0xda, 0x82, 0xed, 0x17, 0x28, 0x5c, 0x85, 0x94, 0xad, 0xf7, 0x88, 0x70, 0xef, 0xf3, 0x33,
	0x8a, 0xc9, 0x3d, 0xeb, 0x80, 0xb5, 0x38, 0x46, 0xfd, 0x99, 0x02, 0x69, 0x5e, 0xd7, 0x9f, 0x39,
	0x1d, 0xe1, 0x3d, 0x00, 0x3b, 0x30, 0xbd, 0x4d, 0x0d, 0x11, 0xa5, 0x39, 0x8a, 0x8b, 0xe3, 0x51,
	0x69, 0x0b, 0xf2, 0x38, 0x4b, 0x2d, 0x8f, 0xf4, 0x88, 0xd3, 0x90, 0x24, 0xda, 0xca, 0xdb, 0x92,
	0x8a, 0x1a, 0x7b, 0xe3, 0x51, 0xe9, 0x7e, 0x0e, 0xe1, 0x3b, 0xf3, 0xe9, 0xed, 0xf2, 0x0f, 0xd1,
	0x99, 0x9e, 0xef, 0x6d, 0x5b, 0x46, 0xef, 0x23, 0x94, 0x0b, 0x06, 0xa8, 0xf1, 0x31, 0x02, 0x31,
	0xda, 0xa6, 0x3e, 0xb1, 0xdd, 0x06, 0x1c, 0xf0, 0x11, 0x8f, 0x8f, 0x4c, 0xb8, 0xdd, 0x78, 0x31,
	0x6e, 0x46, 0x77, 0x23, 0x00, 0x87, 0xa4, 0xd6, 0x84, 0xcd, 0x88, 0x10, 0xb1, 0xa7, 0x3b, 0xb1,
	0xa2, 0x4a, 0x14, 0x22, 0x4b, 0x8a, 0xc1, 0x86, 0xcf, 0x2e, 0x11, 0x33, 0xfe, 0xa7, 0x74, 0x76,
	0x13, 0xce, 0x4e, 0x29, 0x5c, 0xc5, 0xe4, 0x67, 0x80, 0x03, 0x36, 0x39, 0x41, 0xec, 0x56, 0xa2,
	0xb1, 0x26, 0x6c, 0x46, 0x14, 0xaf, 0x62, 0xfc, 0x0d, 0xc0, 0x01, 0x07, 0xad, 0x10, 0x71, 0x75,
	0x1b, 0x36, 0x23, 0x8b, 0x05, 0x7d, 0xfd, 0x1d, 0xc1, 0x86, 0x5f, 0xdd, 0x11, 0x91, 0x2f, 0x10,
	0x79, 0xfd, 0x52, 0x81, 0x72, 0xe8, 0x9f, 0xdb, 0x1c, 0xbe, 0xb0, 0x34, 0x8d, 0xaf, 0x47, 0x68,
	0x2b, 0xbd, 0x28, 0x1f, 0x26, 0xe4, 0xa4, 0xb2, 0xe0, 0xf4, 0x0a, 0xc2, 0x33, 0x75, 0xb6, 0xc6,
	0xa8, 0x3d, 0xb9, 0x20, 0x56, 0x21, 0xf6, 0xdf, 0xa7, 0x21, 0x2b, 0x78, 0x6f, 0x75, 0x6a, 0x7f,
	0x09, 0xe0, 0x80, 0x3a, 0xae, 0xd7, 0x9e, 0x22, 0xf8, 0x3c, 0x1f, 0xd9, 0xf3, 0x59, 0xfe, 0x02,
	0x14, 0xfa, 0xd4, 0x30, 0x4c, 0x12, 0xcc, 0x73, 0xae, 0x6f, 0x41, 0x30, 0xc4, 0x01, 0x5f, 0x80,
	0xbc, 0xa9, 0xcb, 0xe5, 0x29, 0x3e, 0x9d, 0xf3, 0x07, 0xf8, 0xe4, 0x0e, 0x9c, 0xb6, 0x1d, 0xda,
	0xd7, 0x9d, 0x61, 0x9b, 0xf4, 0x75, 0x6a, 0xf2, 0x58, 0xe6, 0x9b, 0x99, 0xf1, 0xa8, 0xa4, 0x6c,
	0xa0, 0xd6, 0xba, 0x98, 0x7c, 0xdd, 0x9f, 0x9b, 0x1c, 0x28, 0x99, 0xf9, 0x07, 0xca, 0x0e, 0x64,
	0xb8, 0x20, 0xb7, 0x98, 0x4d, 0x0a, 0x26, 0x17, 0xd4, 0x12, 0x10, 0x7c, 0x13, 0xd6, 0x0f, 0x59,
	0x9f, 0xb4, 0x75, 0xc3, 0x70, 0x88, 0xeb, 0x16, 0x73, 0x49, 0xcd, 0xcd, 0xad, 0x60, 0xb2, 0x99,
	0xf9, 0x64, 0x54, 0x52, 0x2a, 0xa8, 0x55, 0xf0, 0x97, 0x88, 0x41, 0x5f, 0xc2, 0x33, 0xe6, 0x1c,
	0x85, 0x12, 0xf2, 0x4b, 0x49, 0xf0, 0x97, 0x48, 0x09, 0xd1, 0x13, 0x10, 0x4e, 0x7a, 0x02, 0xe2,
	0x6b, 0x90, 0xb7, 0x68, 0xf7, 0xc8, 0x8f, 0xb6, 0x5b, 0x2c, 0x08, 0x71, 0xfc, 0xc6, 0x17, 0x5c,
	0xde, 0xee, 0xef, 0xbf, 0xb5, 0xf7, 0x2d, 0xdd, 0x1c, 0x90, 0xd6, 0x04, 0x87, 0xbf, 0x02, 0x19,
	0x7e, 0x02, 0xba, 0xc5, 0x75, 0xd9, 0x5d, 0x24, 0x19, 0x20, 0xb7, 0x45, 0x80, 0x1b, 0x0f, 0xc7,
	0xa3, 0xd2, 0x9b, 0x39, 0x84, 0xef, 0x26, 0x5f, 0x12, 0xb4, 0x84, 0x93, 0x76, 0xea, 0x78, 0xfd,
	0x78, 0x72, 0xec, 0xfe, 0x1a, 0x9d, 0xfa, 0x2d, 0x3a, 0x55, 0x41, 0xea, 0x3b, 0x90, 0x0e, 0xf6,
	0x7a, 0x07, 0xb2, 0x32, 0xa6, 0x88, 0xef, 0xf6, 0xd9, 0xf1, 0xa8, 0x94, 0x02, 0xe5, 0x0a, 0x1a,
	0xff, 0xeb, 0x4f, 0x6b, 0x29, 0x47, 0x79, 0x07, 0xb5, 0x24, 0xa2, 0x51, 0x1d, 0x8f, 0x4a, 0xaf,
	0xe6, 0x10, 0xde, 0x84, 0x74, 0xb5, 0xc3, 0x98, 0x89, 0x81, 0xba, 0x6d, 0x91, 0x3a, 0xb8, 0x00,
	0x69, 0x6a, 0x79, 0xaf, 0x5d, 0xc7, 0x0a, 0x3f, 0xd1, 0x7f, 0x80, 0x20, 0x2b, 0x63, 0x5f, 0x8c,
	0x29, 0x09, 0x25, 0xfa, 0xfd, 0x4c, 0x97, 0x7a, 0x43, 0xd9, 0xcf, 0xf8, 0xdf, 0x78, 0x0b, 0xd2,
	0xae, 0xa7, 0x7b, 0x32, 0xc7, 0x83, 0x1f, 0x78, 0x03, 0xd6, 0x8e, 0xa9, 0x2d, 0x12, 0xdb, 0xff,
	0xf4, 0xa5, 0x76, 0xd9, 0xc0, 0xf2, 0x9c, 0x61, 0x90, 0xcd, 0x2d, 0xf9, 0xb3, 0x91, 0xf3, 0x7d,
	0xc8, 0xa1, 0xe9, 0x0b, 0x93, 0x28, 0xcf, 0x65, 0xdb, 0x7c, 0x09, 0x9f, 0xbd, 0x30, 0x85, 0x82,
	0x96, 0x6b, 0xd9, 0x25, 0x3c, 0x76, 0x61, 0x8a, 0x99, 0xf3, 0x59, 0x5c, 0x98, 0x4e, 0x68, 0x78,
	0x78, 0x61, 0x3a, 0x61, 0x24, 0x4f, 0x76, 0x61, 0x3a, 0xa1, 0x13, 0xe1, 0x85, 0x69, 0xa5, 0xf8,
	0x4f, 0x2e, 0x4c, 0x31, 0x33, 0xe4, 0x75, 0x42, 0xf6, 0xbe, 0x4b, 0x5f, 0x27, 0xc2, 0xe0, 0xac,
	0x72, 0xea, 0xfc, 0x4a, 0x81, 0xf3, 0xd3, 0x5a, 0xff, 0xdf, 0x08, 0xc4, 0x1b, 0x81, 0x9f, 0x8b,
	0x46, 0x69, 0x12, 0xa1, 0x17, 0xb4, 0x25, 0xf4, 0x2d, 0x93, 0x1c, 0xbf, 0x38, 0x3a, 0x59, 0x0e,
	0xbb, 0x67, 0xa8, 0xaf, 0x01, 0xec, 0x3f, 0xd8, 0x97, 0xa1, 0x38, 0x13, 0x16, 0x40, 0x8a, 0x33,
	0x4d, 0x11, 0xb2, 0x7d, 0xe2, 0xba, 0x32, 0x15, 0xf3, 0x2d, 0xf9, 0x53, 0x3d, 0x0d, 0x05, 0xbe,
	0x2e, 0xf6, 0x54, 0x30, 0xc3, 0x0a, 0x2f, 0x4a, 0x68, 0xeb, 0xbf, 0x49, 0x43, 0x4e, 0xbe, 0x13,
	0x60, 0x17, 0x32, 0xc1, 0x31, 0x80, 0xd5, 0x58, 0x25, 0x27, 0x3c, 0xcb, 0x95, 0x5f, 0x59, 0x88,
	0x11, 0x11, 0xac, 0xfc, 0xed, 0x8f, 0x25, 0x25, 0x77, 0xea, 0xc3, 0xbf, 0xfe, 0xf3, 0x27, 0xca,
	0x96, 0x9a, 0xd7, 0x44, 0xfa, 0xba, 0x8d, 0x90, 0x31, 0x19, 0xa4, 0x7c, 0x02, 0xc7, 0x95, 0xa8,
	0xb8, 0xd9, 0x87, 0xb7, 0xf2, 0xc5, 0x05, 0x08, 0xa1, 0x4e, 0xe5, 0x8a, 0xce, 0xe3, 0x72, 0xa8,
	0x48, 0x7b, 0x9f, 0x1a, 0x35, 0xf9, 0xc2, 0xdb, 0xa6, 0xc6, 0x07, 0xf8, 0x0f, 0x08, 0x32, 0x01,
	0xdf, 0xc6, 0xdd, 0x4c, 0x7a, 0x33, 0x8b, 0xbb, 0x99, 0xf8, 0xb4, 0xa5, 0x1e, 0x4e, 0xb9, 0xf9,
	0xdd, 0xb2, 0x3a, 0xa5, 0x5d, 0xb8, 0x59, 0x8b, 0x59, 0x11, 0xfa, 0xff, 0x68, 0xb7, 0xfe, 0x69,
	0xe0, 0xf8, 0x43, 0x04, 0x99, 0x80, 0xa6, 0xe3, 0xd6, 0x27, 0x3d, 0x96, 0xc5, 0xad, 0x4f, 0x7e,
	0x11, 0xd3, 0xc6, 0xa3, 0x52, 0x3e, 0x7c, 0x4e, 0x0e, 0x42, 0x58, 0x5d, 0x14, 0xc2, 0x36, 0xa4,
	0xfc, 0xb2, 0x88, 0xef, 0xd9, 0xec, 0xab, 0x5a, 0x59, 0x9d, 0x8b, 0x08, 0xcf, 0x11, 0xf5, 0x2c,
	0xd7, 0x58, 0xc0, 0x93, 0xec, 0x28, 0xaf, 0xfb, 0x3d, 0x62, 0x0e, 0xf1, 0xa8, 0xa2, 0xfa, 0x7f,
	0xd2, 0x20, 0xba, 0x41, 0xdc, 0x0b, 0x53, 0xb4, 0x92, 0x94, 0x7e, 0xd3, 0x0c, 0x18, 0xcf, 0x97,
	0x84, 0xd7, 0x13, 0xb5, 0xc8, 0x55, 0x63, 0x35, 0xab, 0x89, 0x66, 0x34, 0x8c, 0x33, 0x15, 0x69,
	0xf9, 0xf2, 0x6c, 0xd2, 0x45, 0x94, 0x5c, 0x98, 0x3b, 0x2f, 0x2b, 0x80, 0xab, 0x28, 0xe3, 0xa2,
	0x50, 0x31, 0x1b, 0xcd, 0xdf, 0x4d, 0x12, 0xb2, 0x92, 0x94, 0x6c, 0x8b, 0x9c, 0x4a, 0x78, 0xa2,
	0x50, 0xbf, 0xc7, 0x35, 0x7e, 0xbb, 0x5c, 0x09, 0x35, 0x3e, 0x37, 0x09, 0x77, 0xea, 0xcb, 0x83,
	0xf1, 0x71, 0x98, 0x81, 0x95, 0xa4, 0xec, 0x5a, 0x64, 0x6e, 0xd2, 0x83, 0xc6, 0xce, 0x78, 0x54,
	0xca, 0x8a, 0xb7, 0xc3, 0x20, 0x56, 0xd5, 0xf9, 0xb1, 0xfa, 0x8e, 0xc8, 0xbc, 0x97, 0x67, 0xf3,
	0x2a, 0xa2, 0xb7, 0x32, 0x67, 0x7e, 0x92, 0x75, 0x9f, 0xe3, 0xba, 0xf2, 0x58, 0x6e, 0x3d, 0xfe,
	0x31, 0x82, 0xd3, 0x3e, 0x2e, 0xec, 0x34, 0xf0, 0xa5, 0x79, 0x42, 0xe2, 0xcd, 0xc8, 0x12, 0xea,
	0xae, 0x72, 0x75, 0x3b, 0xf8, 0xf2, 0x74, 0xb1, 0x87, 0x87, 0x7e, 0xc4, 0x49, 0x61, 0x50, 0x39,
	0x13, 0x14, 0x41, 0xfd, 0x17, 0x39, 0x08, 0x1f, 0x1e, 0x71, 0x7f, 0x31, 0x47, 0x47, 0x4f, 0xaa,
	0x64, 0x8e, 0x8e, 0xf7, 0x77, 0xe5, 0x90, 0x9d, 0x25, 0x70, 0x29, 0x76, 0x8e, 0xa9, 0xba, 0xb8,
	0x00, 0x31, 0xc3, 0xce, 0x12, 0xf6, 0xe9, 0xd9, 0x79, 0xb1, 0x83, 0x89, 0x7d, 0xf4, 0x0c, 0x3b,
	0x4f, 0xb4, 0x2f, 0xc5, 0xce, 0xcb, 0xc3, 0x9f, 0xcb, 0xce, 0x8b, 0xad, 0x4f, 0x6e, 0xbf, 0x05,
	0x3b, 0x8b, 0xe1, 0x90, 0x9d, 0xe7, 0x87, 0x70, 0x01, 0x3b, 0xc7, 0xf4, 0xab, 0x73, 0x11, 0x49,
	0xec, 0x2c, 0x71, 0xf8, 0xa7, 0x33, 0x95, 0x52, 0x9d, 0x2f, 0x68, 0xa6, 0x56, 0x96, 0x51, 0x7a,
	0x8d, 0x2b, 0xdd, 0xc5, 0x3b, 0x4b, 0x54, 0x4b, 0x68, 0xd6, 0x8f, 0x10, 0x14, 0x02, 0xb3, 0x82,
	0xff, 0x87, 0xb8, 0xb4, 0xc8, 0xa8, 0x08, 0x5b, 0x2c, 0x63, 0x92, 0xc6, 0x4d, 0xba, 0x8c, 0xbf,
	0x14, 0x72, 0x93, 0xec, 0x49, 0xe7, 0x98, 0xf3, 0x04, 0xb2, 0xfb, 0xc4, 0x32, 0xf6, 0x1f, 0xec,
	0xe3, 0x62, 0x54, 0xfe, 0xa4, 0x35, 0x2d, 0x97, 0x12, 0x66, 0x84, 0xc2, 0x97, 0xb8, 0xc2, 0x73,
	0x2a, 0x8e, 0x6c, 0xf5, 0x07, 0x9a, 0xdb, 0x77, 0x1b, 0xa8, 0x2a, 0xd9, 0xa1, 0xf9, 0x6f, 0xf4,
	0xd1, 0xad, 0x3f, 0x23, 0xfc, 0x78, 0xc2, 0x11, 0xea, 0x7d, 0x38, 0x73, 0x9f, 0x1d, 0x5a, 0x95,
	0x26, 0x31, 0xf5, 0xbe, 0xee, 0xd0, 0x2e, 0xbe, 0x70, 0xe8, 0x79, 0xb6, 0xdb, 0xd0, 0xb4, 0x39,
	0x7f, 0xcd, 0x50, 0x3e, 0xf7, 0x6e, 0x47, 0x82, 0x6f, 0x86, 0x3d, 0x63, 0x97, 0xf5, 0xeb, 0x6b,
	0x57, 0x6b, 0x57, 0xd4, 0x94, 0xf6, 0xde, 0x55, 0xad, 0xaa, 0x20, 0xa5, 0xbe, 0xa1, 0xdb, 0xb6,
	0x49, 0xbb, 0xbc, 0x89, 0xd4, 0xde, 0x75, 0x99, 0xd5, 0x98, 0x19, 0x79, 0xf4, 0x0a, 0x5c, 0x04,
	0xb8, 0x65, 0xd3, 0x6f, 0x90, 0xe1, 0xad, 0x81, 0x77, 0x88, 0x37, 0x73, 0x4a, 0xf9, 0xb4, 0xff,
	0xc5, 0x1c, 0x7a, 0xcc, 0x71, 0x15, 0xa5, 0xb3, 0x01, 0x67, 0x22, 0xa0, 0x53, 0x41, 0x8d, 0x3e,
	0xba, 0xb8, 0xf8, 0xef, 0x2d, 0x6e, 0xd8, 0x9d, 0x4e, 0x86, 0xdf, 0xa5, 0xaf, 0xfd, 0x37, 0x00,
	0x00, 0xff, 0xff, 0xca, 0xfc, 0xc9, 0x41, 0x9b, 0x21, 0x00, 0x00,
}
