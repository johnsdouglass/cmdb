syntax = "proto3";

package api.contacts;

import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/lyft/protoc-gen-validate/validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";
import "github.com/infobloxopen/protoc-gen-gorm/types/types.proto";
import "github.com/infobloxopen/atlas-app-toolkit/query/collection_operators.proto";
import "github.com/infobloxopen/atlas-app-toolkit/rpc/resource/resource.proto";
import "github.com/infobloxopen/protoc-gen-atlas-query-validate/options/query_validate.proto";
import "github.com/infobloxopen/protoc-gen-atlas-validate/options/atlas_validate.proto";


option go_package = "github.com/seizadi/cmdb/pkg/pb;pb";

// Profile represents a summary of details regarding user contacts and groups.
message Profile {
    option (gorm.opts) = {
      ormable: true,
      multi_account: true
      include: [
      {type: "[]*ContactORM", name: "Contacts", tag: {foreignkey: "ProfileId"}},
      {type: "[]*GroupORM", name: "Groups", tag: {foreignkey: "ProfileId"}}
      ]
    };

    // The profile identifier.
    atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];

    // Contacts profile name.
    string name = 2;

    // Contacts profile notes.
    string notes = 3 [(atlas.query.validate) = {filtering: {deny: MATCH}, sorting: {disable: true}}];
}

message CreateProfileRequest {
    Profile payload = 1;
}

message CreateProfileResponse {
    Profile result = 1;
}

message ReadProfileRequest {
    atlas.rpc.Identifier id = 1;
    infoblox.api.FieldSelection fields = 2;
}

message ReadProfileResponse {
    Profile result = 1;
}

message UpdateProfileRequest {
    Profile payload = 1;
    google.protobuf.FieldMask fields = 2;
}

message UpdateProfileResponse {
    Profile result = 1;
}

message DeleteProfileRequest {
    atlas.rpc.Identifier id = 1;
}

message DeleteProfileResponse{}

message ListProfileRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}

message ListProfilesResponse {
    repeated Profile results = 1;
    infoblox.api.PageInfo page = 2;
}

service Profiles {
    option (gorm.server).autogen = true;

    option (atlas_validate.service).allow_unknown_fields = true;

    // Use this method to create a user profile.
    rpc Create (CreateProfileRequest) returns (CreateProfileResponse) {
        option (google.api.http) = {
            post: "/profiles"
            body: "payload"
        };

        option (atlas_validate.method).allow_unknown_fields = false;
    }

    // Use this method to retrieve the particular user profile.
    rpc Read (ReadProfileRequest) returns (ReadProfileResponse) {
        option (google.api.http) = {
            get: "/profiles/{id.resource_id}"
        };
    }

    // Use this method to update user profile.
    rpc Update (UpdateProfileRequest) returns (UpdateProfileResponse) {
        option (google.api.http) = {
            put: "/profiles/{payload.id.resource_id}"
            body: "payload"
            additional_bindings: {
                patch: "/profiles/{payload.id.resource_id}"
                body: "payload"
            }
        };

        option (atlas_validate.method).allow_unknown_fields = false;
    }

    // Use this method to delete a profile.
    rpc Delete (DeleteProfileRequest) returns (DeleteProfileResponse) {
        option (google.api.http) = {
            delete: "/profiles/{id.resource_id}"
        };
        option (gorm.method).object_type = "Profile";
    }

    // Use this method to retrieve the list of user profiles.
    rpc List (ListProfileRequest) returns (ListProfilesResponse) {
        option (google.api.http) = {
            get: "/profiles"
        };
    }

}

// Group is used to group the contacts, e. g. 'Friends', 'Family'.
message Group {
    option (gorm.opts) = {
      ormable: true,
      multi_account: true,
      include:[
      {type: "[]*ContactORM", name: "Contacts", tag: {
        many_to_many: "group_contacts",
        jointable_foreignkey: "group_id",
        association_jointable_foreignkey: "contact_id"}}]
    };

    // The contacts group identifier.
    atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial" primary_key: true}];

    // The contacts group name.
    string name = 2;

    // Brief description of group.
    string notes = 3 [(atlas.query.validate) = {filtering: {deny: MATCH}, sorting: {disable: true}}];

    // The profile the group is associated with.
    atlas.rpc.Identifier profile_id = 4 [(gorm.field) = {reference_of: "Profile", tag: {type: "integer"}}];
}

message CreateGroupRequest {
    Group payload = 1;
}

message CreateGroupResponse {
    Group result = 1;
}

message ReadGroupRequest {
    atlas.rpc.Identifier id = 1;
    infoblox.api.FieldSelection fields = 2;
}

message ReadGroupResponse {
    Group result = 1;
}

message UpdateGroupRequest {
    Group payload = 1;
    google.protobuf.FieldMask fields = 2;
}

message UpdateGroupResponse {
    Group result = 1;
}

message DeleteGroupRequest {
    atlas.rpc.Identifier id = 1;
}

message DeleteGroupResponse {}

message ListGroupRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}

message ListGroupsByProfileRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
    atlas.rpc.Identifier profile_id = 5;
}

message ListGroupsResponse {
    repeated Group results = 1;
    infoblox.api.PageInfo page = 2;
}

service Groups {
    option (gorm.server).autogen = true;

    // Use this method to create a specific contacts group.
    rpc Create (CreateGroupRequest) returns (CreateGroupResponse) {
        option (google.api.http) = {
            post: "/groups"
            body: "payload"
        };
    }

    // Use this method to retrieve a particular contacts group.
    rpc Read (ReadGroupRequest) returns (ReadGroupResponse) {
        option (google.api.http) = {
            get: "/groups/{id.resource_id}"
        };
    }

    // Use this method to update a particular contacts group.
    rpc Update (UpdateGroupRequest) returns (UpdateGroupResponse) {
        option (google.api.http) = {
            put: "/groups/{payload.id.resource_id}"
            body: "payload"
            additional_bindings: {
                patch: "/groups/{payload.id.resource_id}"
                body: "payload"
            }
        };
    }

    // Use this method to remove a selected contacts group.
    rpc Delete (DeleteGroupRequest) returns (DeleteGroupResponse) {
        option (google.api.http) = {
            delete: "/groups/{id.resource_id}"
        };
        option (gorm.method).object_type = "Group";
    }

    // Use this method to retrieve all the contact groups.
    rpc List (ListGroupRequest) returns (ListGroupsResponse) {
        option (google.api.http) = {
            get: "/groups"
        };
    }

    // Use this method to retrieve all groups which belong to a profile.
    rpc ListByProfile (ListGroupsByProfileRequest) returns (ListGroupsResponse) {
        option (google.api.http) = {
            get: "/profiles/{profile_id.resource_id}/groups"
        };
    }
}

// Contact represents a particular person in an contacts list.
message Contact {
    option (gorm.opts) = {
      ormable: true,
      multi_account: true
      include: [
      {type: "[]*GroupORM", name: "Groups", tag: {
        many_to_many: "group_contacts",
        jointable_foreignkey: "contact_id",
        association_jointable_foreignkey: "group_id",
        association_autoupdate: false,
        association_autocreate: false}}]
    };

    // The contact identifier.
    atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial"  primary_key: true}];

    // The first name of the person.
    string first_name = 2;

    // The middle name of the person.
    string middle_name = 3;

    // The last name of the person.
    string last_name = 4;

    // The person's primary email.
    string primary_email = 5 [(gorm.field).drop = true];

    // Brief description associated with contact.
    string notes = 6 [(atlas.query.validate) = {filtering: {deny: MATCH}, sorting: {disable: true}}];

    // The list of emails associated with person.
    repeated Email emails = 7;

    // The home address of the person.
    Address home_address = 8 [(atlas.query.validate) = {enable_nested_fields: true}];

    // The work address of the person
    Address work_address = 9 [(atlas.query.validate) = {enable_nested_fields: true}];

    // The profile the contact belongs to.
    atlas.rpc.Identifier profile_id = 10 [(gorm.field) = {reference_of: "Profile", tag: {type: "integer"}}];

    // nicknames is arbitrary json, but should be used for a list of strings.
    gorm.types.JSONValue nicknames = 11;

    // groups associated with the contact
    repeated atlas.rpc.Identifier groups = 12 [(gorm.field).drop = true];
}

// Email respresents the e-mail address.
message Email {
    option (gorm.opts) = {
      ormable: true,
      multi_account: true,
      include: [
        {type: "*bool", name: "is_primary"},
        {type: "int64", name: "id"}]
    };

    // The value of the e-mail address.
    string address = 1 [(gorm.field).tag.unique = true, (validate.rules).string.email = true];
}

// Address represents information about contact location.
message Address {
    option (gorm.opts) = {
      ormable: true,
      multi_account: true
    };

    // The address value.
    string address = 1;

    // The city name.
    string city = 2;

    // State name abbrivated to two letters.
    string state = 3;

    // ZIP code.
    string zip = 4;

    // Country name.
    string country = 5;
}

message CreateContactRequest {
    Contact payload = 1;
}

message CreateContactResponse {
    Contact result = 1;
}

message ReadContactRequest {
    atlas.rpc.Identifier id = 1;
    infoblox.api.FieldSelection fields = 2;
}

message ReadContactResponse {
    Contact result = 1;
}

message UpdateContactRequest {
    Contact payload = 1;
    google.protobuf.FieldMask fields = 2;
}

message UpdateContactResponse {
    Contact result = 1;
}

message DeleteContactRequest {
    atlas.rpc.Identifier id = 1;
}

message DeleteContactResponse {}

message ListContactsResponse {
    repeated Contact results = 1;
    infoblox.api.PageInfo page = 2;
}

message ListContactsByProfileRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
    atlas.rpc.Identifier profile_id = 5;
}

message ListContactsByGroupRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
    atlas.rpc.Identifier group_id = 5;
}

message SMSRequest {
    uint64 id = 1;
    string message = 2;
}

message SMSResponse {}

message ListContactRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}


service Contacts {
    option (gorm.server).autogen = true;

    // Use this method to create a contact information.
    rpc Create (CreateContactRequest) returns (CreateContactResponse) {
        option (google.api.http) = {
            post: "/contacts"
            body: "payload"
        };
    }

    // Use this method to read a contact information by identifier.
    rpc Read (ReadContactRequest) returns (ReadContactResponse) {
        option (google.api.http) = {
            get: "/contacts/{id.resource_id}"
        };
    }

    // Use this method to update a contact information.
    rpc Update (UpdateContactRequest) returns (UpdateContactResponse) {
        option (atlas_validate.method).allow_unknown_fields = false;
        option (google.api.http) = {
            put: "/contacts/{payload.id.resource_id}"
            body: "payload"
            additional_bindings: {
                patch: "/contacts/{payload.id.resource_id}"
                body: "payload"
            }
        };
    }

    // Use this method to delete a particular contact.
    rpc Delete (DeleteContactRequest) returns (DeleteContactResponse) {
        option (google.api.http) = {
            delete: "/contacts/{id.resource_id}"
        };
        option (gorm.method).object_type = "Contact";
    }

    // Use this method to retrieve all the contacts.
    rpc List (ListContactRequest) returns (ListContactsResponse) {
        option (google.api.http) = {
            get: "/contacts"
        };
    }

    // Use this method to retrieve all contacts which belong to a profile.
    rpc ListByProfile (ListContactsByProfileRequest) returns (ListContactsResponse) {
        option (google.api.http) = {
            get: "/profiles/{profile_id.resource_id}/contacts"
        };
    }

    // Use this method to retrieve all contacts which belong to a group.
    rpc ListByGroup (ListContactsByGroupRequest) returns (ListContactsResponse) {
        option (google.api.http) = {
            get: "/groups/{group_id.resource_id}/contacts"
        };
    }

    // Use this method to Send an SMS to a given contact.
    rpc SendSMS (SMSRequest) returns (SMSResponse) {
        option (google.api.http) = {
            post: "/contacts/{id}/sms"
            body: "*"
        };
    }
}

option (atlas_validate.file).allow_unknown_fields = false;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "Contacts";
    version: "1.0";
    contact: {
      name: "John Belamaric";
      url: "https://github.com/seizadi/cmdb";
      email: "jbelamaric@infoblox.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  base_path: "/v1/";
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      };
    };
  };
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  };

};
