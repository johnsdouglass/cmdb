syntax = "proto3";

package api.cmdb;

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/api/annotations.proto";
import "github.com/lyft/protoc-gen-validate/validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/infobloxopen/protoc-gen-gorm/options/gorm.proto";
//import "github.com/infobloxopen/protoc-gen-gorm/types/types.proto";
import "github.com/infobloxopen/atlas-app-toolkit/query/collection_operators.proto";
import "github.com/infobloxopen/atlas-app-toolkit/rpc/resource/resource.proto";
import "github.com/infobloxopen/protoc-gen-atlas-query-validate/options/query_validate.proto";
import "github.com/infobloxopen/protoc-gen-atlas-validate/options/atlas_validate.proto";

option go_package = "github.com/seizadi/cmdb/pkg/pb;pb";

// The Cmdb service, GetVersion RPC, and Version message
// make up a simple "starter" example. It allows the Atlas CLI to generate an
// end-to-end example for the sake of demonstration. Feel free to change
// GetVersion to better-suit how your versioning system, or get rid of it entirely.

// Here are some helpful resources to aid you in your protobuf quest:
// https://github.com/infobloxopen/atlas-contacts-app/blob/master/proto/contacts.proto
// https://developers.google.com/protocol-buffers/docs/proto
// https://github.com/grpc-ecosystem/grpc-gateway
// https://developers.google.com/protocol-buffers/docs/style

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "CMDB";
    version: "1.0";
    contact: {
        name: "Soheil Eizadi";
        url: "https://github.com/seizadi/cmdb";
        email: "seizadi@gmail.com";
    };
  };
  schemes: HTTP;
  schemes: HTTPS;
  consumes: "application/json";
  produces: "application/json";
  base_path: "/v1/";
  security_definitions: {
    security: {
      key: "ApiKeyAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      };
    };
  };
  security: {
    security_requirement: {
      key: "ApiKeyAuth";
      value: {};
    }
  };
};

// ---------------------------------
// CMDB Application Version
// ---------------------------------
message VersionResponse {
  string version = 1;
}

service Cmdb {
  rpc GetVersion (google.protobuf.Empty) returns (VersionResponse) {
  // TODO: Provide mappings between REST endpoints and service methods.
    option (google.api.http) = {
      get: "/version"
    };
  }
}

// ------------------------------------------
// Region represents a particular AWS Region
// ------------------------------------------
message Region {
  option (gorm.opts) = {
      ormable: true,
      multi_account: true
  };

  // The contact identifier.
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial"  primary_key: true}];

  // The name of the region
  string name = 2;

  // The description of the region
  string description = 3;
}

message CreateRegionRequest {
  Region payload = 1;
}

message CreateRegionResponse {
  Region result = 1;
}

message ReadRegionRequest {
  atlas.rpc.Identifier id = 1;
  infoblox.api.FieldSelection fields = 2;
}

message ReadRegionResponse {
  Region result = 1;
}

message UpdateRegionRequest {
  Region payload = 1;
  google.protobuf.FieldMask fields = 2;
}

message UpdateRegionResponse {
  Region result = 1;
}

message DeleteRegionRequest {
  atlas.rpc.Identifier id = 1;
}

message DeleteRegionResponse {}

message ListRegionRequest {
  infoblox.api.Filtering filter = 1;
  infoblox.api.Sorting order_by = 2;
  infoblox.api.FieldSelection fields = 3;
  infoblox.api.Pagination paging = 4;
}

message ListRegionsResponse {
  repeated Region results = 1;
  infoblox.api.PageInfo page = 2;
}

service Regions {
  option (gorm.server) = {
      autogen: true,
      txn_middleware: true,
    };

  // Use this method to create a contact information.
  rpc Create (CreateRegionRequest) returns (CreateRegionResponse) {
    option (google.api.http) = {
            post: "/regions"
            body: "payload"
        };
  }

  // Use this method to read a contact information by identifier.
  rpc Read (ReadRegionRequest) returns (ReadRegionResponse) {
    option (google.api.http) = {
            get: "/regions/{id.resource_id}"
        };
  }

  // Use this method to update a contact information.
  rpc Update (UpdateRegionRequest) returns (UpdateRegionResponse) {
    option (atlas_validate.method).allow_unknown_fields = false;
    option (google.api.http) = {
            put: "/regions/{payload.id.resource_id}"
            body: "payload"
            additional_bindings: {
                patch: "/regions/{payload.id.resource_id}"
                body: "payload"
            }
    };
  }

  // Use this method to delete a particular contact.
  rpc Delete (DeleteRegionRequest) returns (DeleteRegionResponse) {
    option (google.api.http) = {
            delete: "/regions/{id.resource_id}"
        };
    option (gorm.method).object_type = "Region";
  }

  // Use this method to retrieve all the contacts.
  rpc List (ListRegionRequest) returns (ListRegionsResponse) {
    option (google.api.http) = {
            get: "/regions"
        };
  }
}


// -----------------------------------------------------------------------------------
// Container represents a Docker Image that has been loaded to a Registry
// -----------------------------------------------------------------------------------
message Container {
  option (gorm.opts) = {
      ormable: true,
      multi_account: true
  };

  // The contact identifier.
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial"  primary_key: true}];

  // The name of the container
  string name = 2;

  // The description of the container
  string description = 3;

  // The unique container name referenced helm charts
  string container_name = 4;

  // The docker image repository (e.g. soheileizadi/cmdb-server)
  string image_repo = 5;

  // The docker image tag (e.g. latest)
  string image_tag = 6;

  // The image pull
  string image_pull_policy = 7;

  // The digest of the image to check integrity (e.g. digest: sha256:9bf4971079f0ddf3f4ed8681dc96c2610804007359643809165f94a95bc5c3b6)
  string digest = 8;

}

message CreateContainerRequest {
    Container payload = 1;
}

message CreateContainerResponse {
    Container result = 1;
}

message ReadContainerRequest {
    atlas.rpc.Identifier id = 1;
    infoblox.api.FieldSelection fields = 2;
}

message ReadContainerResponse {
    Container result = 1;
}

message UpdateContainerRequest {
    Container payload = 1;
    google.protobuf.FieldMask fields = 2;
}

message UpdateContainerResponse {
    Container result = 1;
}

message DeleteContainerRequest {
    atlas.rpc.Identifier id = 1;
}

message DeleteContainerResponse{}

message ListContainerRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}

message ListContainersResponse {
    repeated Container results = 1;
    infoblox.api.PageInfo page = 2;
}

service Containers {
    option (gorm.server) = {
      autogen: true,
      txn_middleware: true,
    };

    option (atlas_validate.service).allow_unknown_fields = true;

    // Use this method to create a container.
    rpc Create (CreateContainerRequest) returns (CreateContainerResponse) {
        option (google.api.http) = {
            post: "/containers"
            body: "payload"
        };

        option (atlas_validate.method).allow_unknown_fields = false;
    }

    // Use this method to retrieve the particular container.
    rpc Read (ReadContainerRequest) returns (ReadContainerResponse) {
        option (google.api.http) = {
            get: "/containers/{id.resource_id}"
        };
    }

    // Use this method to update container.
    rpc Update (UpdateContainerRequest) returns (UpdateContainerResponse) {
        option (google.api.http) = {
            put: "/containers/{payload.id.resource_id}"
            body: "payload"
            additional_bindings: {
                patch: "/containers/{payload.id.resource_id}"
                body: "payload"
            }
        };

        option (atlas_validate.method).allow_unknown_fields = false;
    }

    // Use this method to delete a container.
    rpc Delete (DeleteContainerRequest) returns (DeleteContainerResponse) {
        option (google.api.http) = {
            delete: "/containers/{id.resource_id}"
        };
        option (gorm.method).object_type = "Container";
    }

    // Use this method to retrieve the list of containers.
    rpc List (ListContainerRequest) returns (ListContainersResponse) {
        option (google.api.http) = {
            get: "/containers"
        };
    }

}

// -----------------------------------------------------------------------------------
// VersionTag represents a tag on git repo
// -----------------------------------------------------------------------------------
message VersionTag {
  option (gorm.opts) = {
      ormable: true,
      multi_account: true
  };

  // The contact identifier.
  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial"  primary_key: true}];

  // The name of the container
  string name = 2;

  // The description of the container
  string description = 3;

  // The version based on SemVer (e.g. 0.0.4)
  string version = 4;

  // The git repo (e.g. https://github.com/seizadi/cmdb/releases/tag/v0.0.4)
  string repo = 5;

  // The git repo commit ID (e.g. 20ec77f5a8f8e260deb51e8d888a2597762184b6)
  string commit = 6;
}

message CreateVersionTagRequest {
    VersionTag payload = 1;
}

message CreateVersionTagResponse {
    VersionTag result = 1;
}

message ReadVersionTagRequest {
    atlas.rpc.Identifier id = 1;
    infoblox.api.FieldSelection fields = 2;
}

message ReadVersionTagResponse {
    VersionTag result = 1;
}

message UpdateVersionTagRequest {
    VersionTag payload = 1;
    google.protobuf.FieldMask fields = 2;
}

message UpdateVersionTagResponse {
    VersionTag result = 1;
}

message DeleteVersionTagRequest {
    atlas.rpc.Identifier id = 1;
}

message DeleteVersionTagResponse{}

message ListVersionTagRequest {
    infoblox.api.Filtering filter = 1;
    infoblox.api.Sorting order_by = 2;
    infoblox.api.FieldSelection fields = 3;
    infoblox.api.Pagination paging = 4;
}

message ListVersionTagsResponse {
    repeated VersionTag results = 1;
    infoblox.api.PageInfo page = 2;
}

service VersionTags {
    option (gorm.server) = {
      autogen: true,
      txn_middleware: true,
    };

    option (atlas_validate.service).allow_unknown_fields = true;

    // Use this method to create a container.
    rpc Create (CreateVersionTagRequest) returns (CreateVersionTagResponse) {
        option (google.api.http) = {
            post: "/version_tags"
            body: "payload"
        };

        option (atlas_validate.method).allow_unknown_fields = false;
    }

    // Use this method to retrieve the particular container.
    rpc Read (ReadVersionTagRequest) returns (ReadVersionTagResponse) {
        option (google.api.http) = {
            get: "/version_tags/{id.resource_id}"
        };
    }

    // Use this method to update container.
    rpc Update (UpdateVersionTagRequest) returns (UpdateVersionTagResponse) {
        option (google.api.http) = {
            put: "/version_tags/{payload.id.resource_id}"
            body: "payload"
            additional_bindings: {
                patch: "/version_tags/{payload.id.resource_id}"
                body: "payload"
            }
        };

        option (atlas_validate.method).allow_unknown_fields = false;
    }

    // Use this method to delete a container.
    rpc Delete (DeleteVersionTagRequest) returns (DeleteVersionTagResponse) {
        option (google.api.http) = {
            delete: "/version_tags/{id.resource_id}"
        };
        option (gorm.method).object_type = "VersionTag";
    }

    // Use this method to retrieve the list of containers.
    rpc List (ListVersionTagRequest) returns (ListVersionTagsResponse) {
        option (google.api.http) = {
            get: "/version_tags"
        };
    }

}

//// -----------------------------------------------------------------------------------
//// Environment represents a particular resource that can own Applications in a Region
//// -----------------------------------------------------------------------------------
//message Environment {
//  option (gorm.opts) = {
//      ormable: true,
//      multi_account: true
//  };
//
//  // The contact identifier.
//  atlas.rpc.Identifier id = 1 [(gorm.field).tag = {type: "serial"  primary_key: true}];
//
//  // The name of the region
//  string name = 2;
//
//  // The description of the region
//  string description = 3;
//}
