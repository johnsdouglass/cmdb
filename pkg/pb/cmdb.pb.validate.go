// Code generated by protoc-gen-validate
// source: github.com/seizadi/cmdb/pkg/pb/cmdb.proto
// DO NOT EDIT!!!

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on VersionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *VersionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Version

	return nil
}

// VersionResponseValidationError is the validation error returned by
// VersionResponse.Validate if the designated constraints aren't met.
type VersionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionResponseValidationError) ErrorName() string { return "VersionResponseValidationError" }

// Error satisfies the builtin error interface
func (e VersionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionResponseValidationError{}

// Validate checks the field values on Region with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Region) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return RegionValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	return nil
}

// RegionValidationError is the validation error returned by Region.Validate if
// the designated constraints aren't met.
type RegionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegionValidationError) ErrorName() string { return "RegionValidationError" }

// Error satisfies the builtin error interface
func (e RegionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegion.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegionValidationError{}

// Validate checks the field values on CreateRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRegionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CreateRegionRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateRegionRequestValidationError is the validation error returned by
// CreateRegionRequest.Validate if the designated constraints aren't met.
type CreateRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRegionRequestValidationError) ErrorName() string {
	return "CreateRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRegionRequestValidationError{}

// Validate checks the field values on CreateRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRegionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CreateRegionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateRegionResponseValidationError is the validation error returned by
// CreateRegionResponse.Validate if the designated constraints aren't met.
type CreateRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRegionResponseValidationError) ErrorName() string {
	return "CreateRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRegionResponseValidationError{}

// Validate checks the field values on ReadRegionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ReadRegionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ReadRegionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ReadRegionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadRegionRequestValidationError is the validation error returned by
// ReadRegionRequest.Validate if the designated constraints aren't met.
type ReadRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadRegionRequestValidationError) ErrorName() string {
	return "ReadRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadRegionRequestValidationError{}

// Validate checks the field values on ReadRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadRegionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ReadRegionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadRegionResponseValidationError is the validation error returned by
// ReadRegionResponse.Validate if the designated constraints aren't met.
type ReadRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadRegionResponseValidationError) ErrorName() string {
	return "ReadRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadRegionResponseValidationError{}

// Validate checks the field values on UpdateRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRegionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateRegionRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateRegionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateRegionRequestValidationError is the validation error returned by
// UpdateRegionRequest.Validate if the designated constraints aren't met.
type UpdateRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRegionRequestValidationError) ErrorName() string {
	return "UpdateRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRegionRequestValidationError{}

// Validate checks the field values on UpdateRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRegionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateRegionResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateRegionResponseValidationError is the validation error returned by
// UpdateRegionResponse.Validate if the designated constraints aren't met.
type UpdateRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRegionResponseValidationError) ErrorName() string {
	return "UpdateRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRegionResponseValidationError{}

// Validate checks the field values on DeleteRegionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRegionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return DeleteRegionRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteRegionRequestValidationError is the validation error returned by
// DeleteRegionRequest.Validate if the designated constraints aren't met.
type DeleteRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegionRequestValidationError) ErrorName() string {
	return "DeleteRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegionRequestValidationError{}

// Validate checks the field values on DeleteRegionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteRegionResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteRegionResponseValidationError is the validation error returned by
// DeleteRegionResponse.Validate if the designated constraints aren't met.
type DeleteRegionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteRegionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteRegionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteRegionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteRegionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteRegionResponseValidationError) ErrorName() string {
	return "DeleteRegionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteRegionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteRegionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteRegionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteRegionResponseValidationError{}

// Validate checks the field values on ListRegionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListRegionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListRegionRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListRegionRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListRegionRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListRegionRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListRegionRequestValidationError is the validation error returned by
// ListRegionRequest.Validate if the designated constraints aren't met.
type ListRegionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionRequestValidationError) ErrorName() string {
	return "ListRegionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionRequestValidationError{}

// Validate checks the field values on ListRegionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRegionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListRegionsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListRegionsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListRegionsResponseValidationError is the validation error returned by
// ListRegionsResponse.Validate if the designated constraints aren't met.
type ListRegionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRegionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRegionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRegionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRegionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRegionsResponseValidationError) ErrorName() string {
	return "ListRegionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRegionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRegionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRegionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRegionsResponseValidationError{}

// Validate checks the field values on Container with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Container) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ContainerValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for ContainerName

	// no validation rules for ImageRepo

	// no validation rules for ImageTag

	// no validation rules for ImagePullPolicy

	// no validation rules for Digest

	return nil
}

// ContainerValidationError is the validation error returned by
// Container.Validate if the designated constraints aren't met.
type ContainerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerValidationError) ErrorName() string { return "ContainerValidationError" }

// Error satisfies the builtin error interface
func (e ContainerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainer.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerValidationError{}

// Validate checks the field values on CreateContainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateContainerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CreateContainerRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateContainerRequestValidationError is the validation error returned by
// CreateContainerRequest.Validate if the designated constraints aren't met.
type CreateContainerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContainerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContainerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContainerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerRequestValidationError) ErrorName() string {
	return "CreateContainerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerRequestValidationError{}

// Validate checks the field values on CreateContainerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateContainerResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CreateContainerResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateContainerResponseValidationError is the validation error returned by
// CreateContainerResponse.Validate if the designated constraints aren't met.
type CreateContainerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContainerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContainerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContainerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerResponseValidationError) ErrorName() string {
	return "CreateContainerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerResponseValidationError{}

// Validate checks the field values on ReadContainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadContainerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ReadContainerRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ReadContainerRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadContainerRequestValidationError is the validation error returned by
// ReadContainerRequest.Validate if the designated constraints aren't met.
type ReadContainerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadContainerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadContainerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadContainerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadContainerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadContainerRequestValidationError) ErrorName() string {
	return "ReadContainerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadContainerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadContainerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadContainerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadContainerRequestValidationError{}

// Validate checks the field values on ReadContainerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadContainerResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ReadContainerResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadContainerResponseValidationError is the validation error returned by
// ReadContainerResponse.Validate if the designated constraints aren't met.
type ReadContainerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadContainerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadContainerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadContainerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadContainerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadContainerResponseValidationError) ErrorName() string {
	return "ReadContainerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadContainerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadContainerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadContainerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadContainerResponseValidationError{}

// Validate checks the field values on UpdateContainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateContainerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateContainerRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateContainerRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateContainerRequestValidationError is the validation error returned by
// UpdateContainerRequest.Validate if the designated constraints aren't met.
type UpdateContainerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContainerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContainerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContainerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContainerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContainerRequestValidationError) ErrorName() string {
	return "UpdateContainerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContainerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContainerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContainerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContainerRequestValidationError{}

// Validate checks the field values on UpdateContainerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateContainerResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateContainerResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateContainerResponseValidationError is the validation error returned by
// UpdateContainerResponse.Validate if the designated constraints aren't met.
type UpdateContainerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateContainerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateContainerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateContainerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateContainerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateContainerResponseValidationError) ErrorName() string {
	return "UpdateContainerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateContainerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContainerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateContainerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateContainerResponseValidationError{}

// Validate checks the field values on DeleteContainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteContainerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return DeleteContainerRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteContainerRequestValidationError is the validation error returned by
// DeleteContainerRequest.Validate if the designated constraints aren't met.
type DeleteContainerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContainerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContainerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContainerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContainerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContainerRequestValidationError) ErrorName() string {
	return "DeleteContainerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContainerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContainerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContainerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContainerRequestValidationError{}

// Validate checks the field values on DeleteContainerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteContainerResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteContainerResponseValidationError is the validation error returned by
// DeleteContainerResponse.Validate if the designated constraints aren't met.
type DeleteContainerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteContainerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteContainerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteContainerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteContainerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteContainerResponseValidationError) ErrorName() string {
	return "DeleteContainerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteContainerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContainerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteContainerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteContainerResponseValidationError{}

// Validate checks the field values on ListContainerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListContainerRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListContainerRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListContainerRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListContainerRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListContainerRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListContainerRequestValidationError is the validation error returned by
// ListContainerRequest.Validate if the designated constraints aren't met.
type ListContainerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerRequestValidationError) ErrorName() string {
	return "ListContainerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerRequestValidationError{}

// Validate checks the field values on ListContainersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListContainersResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListContainersResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListContainersResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListContainersResponseValidationError is the validation error returned by
// ListContainersResponse.Validate if the designated constraints aren't met.
type ListContainersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainersResponseValidationError) ErrorName() string {
	return "ListContainersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainersResponseValidationError{}

// Validate checks the field values on VersionTag with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *VersionTag) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return VersionTagValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Version

	// no validation rules for Repo

	// no validation rules for Commit

	return nil
}

// VersionTagValidationError is the validation error returned by
// VersionTag.Validate if the designated constraints aren't met.
type VersionTagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VersionTagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VersionTagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VersionTagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VersionTagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VersionTagValidationError) ErrorName() string { return "VersionTagValidationError" }

// Error satisfies the builtin error interface
func (e VersionTagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVersionTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VersionTagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VersionTagValidationError{}

// Validate checks the field values on CreateVersionTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVersionTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CreateVersionTagRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateVersionTagRequestValidationError is the validation error returned by
// CreateVersionTagRequest.Validate if the designated constraints aren't met.
type CreateVersionTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVersionTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVersionTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVersionTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVersionTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVersionTagRequestValidationError) ErrorName() string {
	return "CreateVersionTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVersionTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVersionTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVersionTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVersionTagRequestValidationError{}

// Validate checks the field values on CreateVersionTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateVersionTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CreateVersionTagResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateVersionTagResponseValidationError is the validation error returned by
// CreateVersionTagResponse.Validate if the designated constraints aren't met.
type CreateVersionTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateVersionTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateVersionTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateVersionTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateVersionTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateVersionTagResponseValidationError) ErrorName() string {
	return "CreateVersionTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateVersionTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateVersionTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateVersionTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateVersionTagResponseValidationError{}

// Validate checks the field values on ReadVersionTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadVersionTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ReadVersionTagRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ReadVersionTagRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadVersionTagRequestValidationError is the validation error returned by
// ReadVersionTagRequest.Validate if the designated constraints aren't met.
type ReadVersionTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadVersionTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadVersionTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadVersionTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadVersionTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadVersionTagRequestValidationError) ErrorName() string {
	return "ReadVersionTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadVersionTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadVersionTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadVersionTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadVersionTagRequestValidationError{}

// Validate checks the field values on ReadVersionTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReadVersionTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ReadVersionTagResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReadVersionTagResponseValidationError is the validation error returned by
// ReadVersionTagResponse.Validate if the designated constraints aren't met.
type ReadVersionTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadVersionTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadVersionTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadVersionTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadVersionTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadVersionTagResponseValidationError) ErrorName() string {
	return "ReadVersionTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReadVersionTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadVersionTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadVersionTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadVersionTagResponseValidationError{}

// Validate checks the field values on UpdateVersionTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVersionTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateVersionTagRequestValidationError{
				field:  "Payload",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateVersionTagRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateVersionTagRequestValidationError is the validation error returned by
// UpdateVersionTagRequest.Validate if the designated constraints aren't met.
type UpdateVersionTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVersionTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVersionTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVersionTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVersionTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVersionTagRequestValidationError) ErrorName() string {
	return "UpdateVersionTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVersionTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVersionTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVersionTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVersionTagRequestValidationError{}

// Validate checks the field values on UpdateVersionTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateVersionTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateVersionTagResponseValidationError{
				field:  "Result",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateVersionTagResponseValidationError is the validation error returned by
// UpdateVersionTagResponse.Validate if the designated constraints aren't met.
type UpdateVersionTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateVersionTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateVersionTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateVersionTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateVersionTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateVersionTagResponseValidationError) ErrorName() string {
	return "UpdateVersionTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateVersionTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateVersionTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateVersionTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateVersionTagResponseValidationError{}

// Validate checks the field values on DeleteVersionTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteVersionTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetId()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return DeleteVersionTagRequestValidationError{
				field:  "Id",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteVersionTagRequestValidationError is the validation error returned by
// DeleteVersionTagRequest.Validate if the designated constraints aren't met.
type DeleteVersionTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVersionTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVersionTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVersionTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVersionTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVersionTagRequestValidationError) ErrorName() string {
	return "DeleteVersionTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVersionTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVersionTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVersionTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVersionTagRequestValidationError{}

// Validate checks the field values on DeleteVersionTagResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteVersionTagResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteVersionTagResponseValidationError is the validation error returned by
// DeleteVersionTagResponse.Validate if the designated constraints aren't met.
type DeleteVersionTagResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteVersionTagResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteVersionTagResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteVersionTagResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteVersionTagResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteVersionTagResponseValidationError) ErrorName() string {
	return "DeleteVersionTagResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteVersionTagResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteVersionTagResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteVersionTagResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteVersionTagResponseValidationError{}

// Validate checks the field values on ListVersionTagRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListVersionTagRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFilter()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListVersionTagRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOrderBy()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListVersionTagRequestValidationError{
				field:  "OrderBy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFields()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListVersionTagRequestValidationError{
				field:  "Fields",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPaging()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListVersionTagRequestValidationError{
				field:  "Paging",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListVersionTagRequestValidationError is the validation error returned by
// ListVersionTagRequest.Validate if the designated constraints aren't met.
type ListVersionTagRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVersionTagRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVersionTagRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVersionTagRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVersionTagRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVersionTagRequestValidationError) ErrorName() string {
	return "ListVersionTagRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListVersionTagRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVersionTagRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVersionTagRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVersionTagRequestValidationError{}

// Validate checks the field values on ListVersionTagsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListVersionTagsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListVersionTagsResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetPage()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return ListVersionTagsResponseValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListVersionTagsResponseValidationError is the validation error returned by
// ListVersionTagsResponse.Validate if the designated constraints aren't met.
type ListVersionTagsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListVersionTagsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListVersionTagsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListVersionTagsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListVersionTagsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListVersionTagsResponseValidationError) ErrorName() string {
	return "ListVersionTagsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListVersionTagsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListVersionTagsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListVersionTagsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListVersionTagsResponseValidationError{}
