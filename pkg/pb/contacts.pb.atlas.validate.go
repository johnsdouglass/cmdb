// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/seizadi/cmdb/pkg/pb/contacts.proto

package pb // import "github.com/seizadi/cmdb/pkg/pb"

import fmt "fmt"
import http "net/http"
import json "encoding/json"
import ioutil "io/ioutil"
import bytes "bytes"
import context "golang.org/x/net/context"
import metadata "google.golang.org/grpc/metadata"
import runtime "github.com/grpc-ecosystem/grpc-gateway/runtime"
import validate_runtime "github.com/infobloxopen/protoc-gen-atlas-validate/runtime"
import google_protobuf1 "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"
import google_protobuf2 "github.com/infobloxopen/atlas-app-toolkit/query"
import google_protobuf3 "google.golang.org/genproto/protobuf/field_mask"
import google_protobuf4 "github.com/infobloxopen/protoc-gen-gorm/types"
import proto "github.com/gogo/protobuf/proto"
import math "math"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/infobloxopen/atlas-app-toolkit/query"
import _ "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"
import _ "github.com/infobloxopen/protoc-gen-atlas-query-validate/options"
import _ "github.com/infobloxopen/protoc-gen-atlas-validate/options"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"
import _ "github.com/infobloxopen/protoc-gen-gorm/types"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "google.golang.org/genproto/protobuf/field_mask"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// validate_Profiles_Create_0 is an entrypoint for validating "POST" HTTP request
// that match *.pb.gw.go/pattern_Profiles_Create_0.
func validate_Profiles_Create_0(r json.RawMessage) (err error) {
	return validate_Object_Profile(r, "", false)
}

// validate_Profiles_Read_0 is an entrypoint for validating "GET" HTTP request
// that match *.pb.gw.go/pattern_Profiles_Read_0.
func validate_Profiles_Read_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Profiles_Update_0 is an entrypoint for validating "PUT" HTTP request
// that match *.pb.gw.go/pattern_Profiles_Update_0.
func validate_Profiles_Update_0(r json.RawMessage) (err error) {
	return validate_Object_Profile(r, "", false)
}

// validate_Profiles_Update_1 is an entrypoint for validating "PATCH" HTTP request
// that match *.pb.gw.go/pattern_Profiles_Update_1.
func validate_Profiles_Update_1(r json.RawMessage) (err error) {
	return validate_Object_Profile(r, "", false)
}

// validate_Profiles_Delete_0 is an entrypoint for validating "DELETE" HTTP request
// that match *.pb.gw.go/pattern_Profiles_Delete_0.
func validate_Profiles_Delete_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Profiles_List_0 is an entrypoint for validating "GET" HTTP request
// that match *.pb.gw.go/pattern_Profiles_List_0.
func validate_Profiles_List_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Groups_Create_0 is an entrypoint for validating "POST" HTTP request
// that match *.pb.gw.go/pattern_Groups_Create_0.
func validate_Groups_Create_0(r json.RawMessage) (err error) {
	return validate_Object_Group(r, "", false)
}

// validate_Groups_Read_0 is an entrypoint for validating "GET" HTTP request
// that match *.pb.gw.go/pattern_Groups_Read_0.
func validate_Groups_Read_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Groups_Update_0 is an entrypoint for validating "PUT" HTTP request
// that match *.pb.gw.go/pattern_Groups_Update_0.
func validate_Groups_Update_0(r json.RawMessage) (err error) {
	return validate_Object_Group(r, "", false)
}

// validate_Groups_Update_1 is an entrypoint for validating "PATCH" HTTP request
// that match *.pb.gw.go/pattern_Groups_Update_1.
func validate_Groups_Update_1(r json.RawMessage) (err error) {
	return validate_Object_Group(r, "", false)
}

// validate_Groups_Delete_0 is an entrypoint for validating "DELETE" HTTP request
// that match *.pb.gw.go/pattern_Groups_Delete_0.
func validate_Groups_Delete_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Groups_List_0 is an entrypoint for validating "GET" HTTP request
// that match *.pb.gw.go/pattern_Groups_List_0.
func validate_Groups_List_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Groups_ListByProfile_0 is an entrypoint for validating "GET" HTTP request
// that match *.pb.gw.go/pattern_Groups_ListByProfile_0.
func validate_Groups_ListByProfile_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Contacts_Create_0 is an entrypoint for validating "POST" HTTP request
// that match *.pb.gw.go/pattern_Contacts_Create_0.
func validate_Contacts_Create_0(r json.RawMessage) (err error) {
	return validate_Object_Contact(r, "", false)
}

// validate_Contacts_Read_0 is an entrypoint for validating "GET" HTTP request
// that match *.pb.gw.go/pattern_Contacts_Read_0.
func validate_Contacts_Read_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Contacts_Update_0 is an entrypoint for validating "PUT" HTTP request
// that match *.pb.gw.go/pattern_Contacts_Update_0.
func validate_Contacts_Update_0(r json.RawMessage) (err error) {
	return validate_Object_Contact(r, "", false)
}

// validate_Contacts_Update_1 is an entrypoint for validating "PATCH" HTTP request
// that match *.pb.gw.go/pattern_Contacts_Update_1.
func validate_Contacts_Update_1(r json.RawMessage) (err error) {
	return validate_Object_Contact(r, "", false)
}

// validate_Contacts_Delete_0 is an entrypoint for validating "DELETE" HTTP request
// that match *.pb.gw.go/pattern_Contacts_Delete_0.
func validate_Contacts_Delete_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Contacts_List_0 is an entrypoint for validating "GET" HTTP request
// that match *.pb.gw.go/pattern_Contacts_List_0.
func validate_Contacts_List_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Contacts_ListByProfile_0 is an entrypoint for validating "GET" HTTP request
// that match *.pb.gw.go/pattern_Contacts_ListByProfile_0.
func validate_Contacts_ListByProfile_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Contacts_ListByGroup_0 is an entrypoint for validating "GET" HTTP request
// that match *.pb.gw.go/pattern_Contacts_ListByGroup_0.
func validate_Contacts_ListByGroup_0(r json.RawMessage) (err error) {
	if len(r) != 0 {
		return fmt.Errorf("Body is not allowed")
	}
	return nil
}

// validate_Contacts_SendSMS_0 is an entrypoint for validating "POST" HTTP request
// that match *.pb.gw.go/pattern_Contacts_SendSMS_0.
func validate_Contacts_SendSMS_0(r json.RawMessage) (err error) {
	return validate_Object_SMSRequest(r, "", false)
}

// validate_Object_Profile function validates a JSON for a given object.
func validate_Object_Profile(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &Profile{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "name":
		case "notes":
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object Profile.
func (o *Profile) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_Profile(r, path, allowUnknown)
}

// validate_Object_CreateProfileRequest function validates a JSON for a given object.
func validate_Object_CreateProfileRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &CreateProfileRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "payload":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Profile(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object CreateProfileRequest.
func (o *CreateProfileRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_CreateProfileRequest(r, path, allowUnknown)
}

// validate_Object_CreateProfileResponse function validates a JSON for a given object.
func validate_Object_CreateProfileResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &CreateProfileResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "result":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Profile(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object CreateProfileResponse.
func (o *CreateProfileResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_CreateProfileResponse(r, path, allowUnknown)
}

// validate_Object_ReadProfileRequest function validates a JSON for a given object.
func validate_Object_ReadProfileRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ReadProfileRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.FieldSelection{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ReadProfileRequest.
func (o *ReadProfileRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ReadProfileRequest(r, path, allowUnknown)
}

// validate_Object_ReadProfileResponse function validates a JSON for a given object.
func validate_Object_ReadProfileResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ReadProfileResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "result":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Profile(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ReadProfileResponse.
func (o *ReadProfileResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ReadProfileResponse(r, path, allowUnknown)
}

// validate_Object_UpdateProfileRequest function validates a JSON for a given object.
func validate_Object_UpdateProfileRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &UpdateProfileRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "payload":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Profile(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf3.FieldMask{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object UpdateProfileRequest.
func (o *UpdateProfileRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_UpdateProfileRequest(r, path, allowUnknown)
}

// validate_Object_UpdateProfileResponse function validates a JSON for a given object.
func validate_Object_UpdateProfileResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &UpdateProfileResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "result":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Profile(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object UpdateProfileResponse.
func (o *UpdateProfileResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_UpdateProfileResponse(r, path, allowUnknown)
}

// validate_Object_DeleteProfileRequest function validates a JSON for a given object.
func validate_Object_DeleteProfileRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &DeleteProfileRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object DeleteProfileRequest.
func (o *DeleteProfileRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_DeleteProfileRequest(r, path, allowUnknown)
}

// validate_Object_DeleteProfileResponse function validates a JSON for a given object.
func validate_Object_DeleteProfileResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &DeleteProfileResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object DeleteProfileResponse.
func (o *DeleteProfileResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_DeleteProfileResponse(r, path, allowUnknown)
}

// validate_Object_ListProfileRequest function validates a JSON for a given object.
func validate_Object_ListProfileRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ListProfileRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "filter":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Filtering{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "order_by":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Sorting{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.FieldSelection{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "paging":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Pagination{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ListProfileRequest.
func (o *ListProfileRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ListProfileRequest(r, path, allowUnknown)
}

// validate_Object_ListProfilesResponse function validates a JSON for a given object.
func validate_Object_ListProfilesResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ListProfilesResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "results":
			if v[k] == nil {
				continue
			}
			var vArr []json.RawMessage
			vArrPath := validate_runtime.JoinPath(path, k)
			if err = json.Unmarshal(v[k], &vArr); err != nil {
				return fmt.Errorf("Invalid value for %q: expected array.", vArrPath)
			}
			for i, vv := range vArr {
				vvPath := fmt.Sprintf("%s.[%d]", vArrPath, i)
				if err = validate_Object_Profile(vv, vvPath, allowUnknown); err != nil {
					return err
				}
			}
		case "page":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.PageInfo{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ListProfilesResponse.
func (o *ListProfilesResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ListProfilesResponse(r, path, allowUnknown)
}

// validate_Object_Group function validates a JSON for a given object.
func validate_Object_Group(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &Group{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "name":
		case "notes":
		case "profile_id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object Group.
func (o *Group) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_Group(r, path, allowUnknown)
}

// validate_Object_CreateGroupRequest function validates a JSON for a given object.
func validate_Object_CreateGroupRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &CreateGroupRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "payload":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Group(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object CreateGroupRequest.
func (o *CreateGroupRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_CreateGroupRequest(r, path, allowUnknown)
}

// validate_Object_CreateGroupResponse function validates a JSON for a given object.
func validate_Object_CreateGroupResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &CreateGroupResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "result":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Group(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object CreateGroupResponse.
func (o *CreateGroupResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_CreateGroupResponse(r, path, allowUnknown)
}

// validate_Object_ReadGroupRequest function validates a JSON for a given object.
func validate_Object_ReadGroupRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ReadGroupRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.FieldSelection{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ReadGroupRequest.
func (o *ReadGroupRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ReadGroupRequest(r, path, allowUnknown)
}

// validate_Object_ReadGroupResponse function validates a JSON for a given object.
func validate_Object_ReadGroupResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ReadGroupResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "result":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Group(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ReadGroupResponse.
func (o *ReadGroupResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ReadGroupResponse(r, path, allowUnknown)
}

// validate_Object_UpdateGroupRequest function validates a JSON for a given object.
func validate_Object_UpdateGroupRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &UpdateGroupRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "payload":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Group(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf3.FieldMask{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object UpdateGroupRequest.
func (o *UpdateGroupRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_UpdateGroupRequest(r, path, allowUnknown)
}

// validate_Object_UpdateGroupResponse function validates a JSON for a given object.
func validate_Object_UpdateGroupResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &UpdateGroupResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "result":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Group(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object UpdateGroupResponse.
func (o *UpdateGroupResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_UpdateGroupResponse(r, path, allowUnknown)
}

// validate_Object_DeleteGroupRequest function validates a JSON for a given object.
func validate_Object_DeleteGroupRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &DeleteGroupRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object DeleteGroupRequest.
func (o *DeleteGroupRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_DeleteGroupRequest(r, path, allowUnknown)
}

// validate_Object_DeleteGroupResponse function validates a JSON for a given object.
func validate_Object_DeleteGroupResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &DeleteGroupResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object DeleteGroupResponse.
func (o *DeleteGroupResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_DeleteGroupResponse(r, path, allowUnknown)
}

// validate_Object_ListGroupRequest function validates a JSON for a given object.
func validate_Object_ListGroupRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ListGroupRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "filter":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Filtering{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "order_by":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Sorting{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.FieldSelection{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "paging":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Pagination{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ListGroupRequest.
func (o *ListGroupRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ListGroupRequest(r, path, allowUnknown)
}

// validate_Object_ListGroupsByProfileRequest function validates a JSON for a given object.
func validate_Object_ListGroupsByProfileRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ListGroupsByProfileRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "filter":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Filtering{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "order_by":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Sorting{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.FieldSelection{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "paging":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Pagination{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "profile_id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ListGroupsByProfileRequest.
func (o *ListGroupsByProfileRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ListGroupsByProfileRequest(r, path, allowUnknown)
}

// validate_Object_ListGroupsResponse function validates a JSON for a given object.
func validate_Object_ListGroupsResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ListGroupsResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "results":
			if v[k] == nil {
				continue
			}
			var vArr []json.RawMessage
			vArrPath := validate_runtime.JoinPath(path, k)
			if err = json.Unmarshal(v[k], &vArr); err != nil {
				return fmt.Errorf("Invalid value for %q: expected array.", vArrPath)
			}
			for i, vv := range vArr {
				vvPath := fmt.Sprintf("%s.[%d]", vArrPath, i)
				if err = validate_Object_Group(vv, vvPath, allowUnknown); err != nil {
					return err
				}
			}
		case "page":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.PageInfo{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ListGroupsResponse.
func (o *ListGroupsResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ListGroupsResponse(r, path, allowUnknown)
}

// validate_Object_Contact function validates a JSON for a given object.
func validate_Object_Contact(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &Contact{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "first_name":
		case "middle_name":
		case "last_name":
		case "primary_email":
		case "notes":
		case "emails":
			if v[k] == nil {
				continue
			}
			var vArr []json.RawMessage
			vArrPath := validate_runtime.JoinPath(path, k)
			if err = json.Unmarshal(v[k], &vArr); err != nil {
				return fmt.Errorf("Invalid value for %q: expected array.", vArrPath)
			}
			for i, vv := range vArr {
				vvPath := fmt.Sprintf("%s.[%d]", vArrPath, i)
				if err = validate_Object_Email(vv, vvPath, allowUnknown); err != nil {
					return err
				}
			}
		case "home_address":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Address(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "work_address":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Address(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "profile_id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "nicknames":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf4.JSONValue{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "groups":
			if v[k] == nil {
				continue
			}
			var vArr []json.RawMessage
			vArrPath := validate_runtime.JoinPath(path, k)
			if err = json.Unmarshal(v[k], &vArr); err != nil {
				return fmt.Errorf("Invalid value for %q: expected array.", vArrPath)
			}
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			for i, vv := range vArr {
				vvPath := fmt.Sprintf("%s.[%d]", vArrPath, i)
				if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
					return err
				}
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object Contact.
func (o *Contact) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_Contact(r, path, allowUnknown)
}

// validate_Object_Email function validates a JSON for a given object.
func validate_Object_Email(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &Email{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "address":
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object Email.
func (o *Email) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_Email(r, path, allowUnknown)
}

// validate_Object_Address function validates a JSON for a given object.
func validate_Object_Address(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &Address{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "address":
		case "city":
		case "state":
		case "zip":
		case "country":
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object Address.
func (o *Address) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_Address(r, path, allowUnknown)
}

// validate_Object_CreateContactRequest function validates a JSON for a given object.
func validate_Object_CreateContactRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &CreateContactRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "payload":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Contact(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object CreateContactRequest.
func (o *CreateContactRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_CreateContactRequest(r, path, allowUnknown)
}

// validate_Object_CreateContactResponse function validates a JSON for a given object.
func validate_Object_CreateContactResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &CreateContactResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "result":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Contact(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object CreateContactResponse.
func (o *CreateContactResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_CreateContactResponse(r, path, allowUnknown)
}

// validate_Object_ReadContactRequest function validates a JSON for a given object.
func validate_Object_ReadContactRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ReadContactRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.FieldSelection{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ReadContactRequest.
func (o *ReadContactRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ReadContactRequest(r, path, allowUnknown)
}

// validate_Object_ReadContactResponse function validates a JSON for a given object.
func validate_Object_ReadContactResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ReadContactResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "result":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Contact(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ReadContactResponse.
func (o *ReadContactResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ReadContactResponse(r, path, allowUnknown)
}

// validate_Object_UpdateContactRequest function validates a JSON for a given object.
func validate_Object_UpdateContactRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &UpdateContactRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "payload":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Contact(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf3.FieldMask{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object UpdateContactRequest.
func (o *UpdateContactRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_UpdateContactRequest(r, path, allowUnknown)
}

// validate_Object_UpdateContactResponse function validates a JSON for a given object.
func validate_Object_UpdateContactResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &UpdateContactResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "result":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			if err = validate_Object_Contact(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object UpdateContactResponse.
func (o *UpdateContactResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_UpdateContactResponse(r, path, allowUnknown)
}

// validate_Object_DeleteContactRequest function validates a JSON for a given object.
func validate_Object_DeleteContactRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &DeleteContactRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object DeleteContactRequest.
func (o *DeleteContactRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_DeleteContactRequest(r, path, allowUnknown)
}

// validate_Object_DeleteContactResponse function validates a JSON for a given object.
func validate_Object_DeleteContactResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &DeleteContactResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object DeleteContactResponse.
func (o *DeleteContactResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_DeleteContactResponse(r, path, allowUnknown)
}

// validate_Object_ListContactsResponse function validates a JSON for a given object.
func validate_Object_ListContactsResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ListContactsResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "results":
			if v[k] == nil {
				continue
			}
			var vArr []json.RawMessage
			vArrPath := validate_runtime.JoinPath(path, k)
			if err = json.Unmarshal(v[k], &vArr); err != nil {
				return fmt.Errorf("Invalid value for %q: expected array.", vArrPath)
			}
			for i, vv := range vArr {
				vvPath := fmt.Sprintf("%s.[%d]", vArrPath, i)
				if err = validate_Object_Contact(vv, vvPath, allowUnknown); err != nil {
					return err
				}
			}
		case "page":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.PageInfo{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ListContactsResponse.
func (o *ListContactsResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ListContactsResponse(r, path, allowUnknown)
}

// validate_Object_ListContactsByProfileRequest function validates a JSON for a given object.
func validate_Object_ListContactsByProfileRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ListContactsByProfileRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "filter":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Filtering{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "order_by":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Sorting{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.FieldSelection{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "paging":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Pagination{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "profile_id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ListContactsByProfileRequest.
func (o *ListContactsByProfileRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ListContactsByProfileRequest(r, path, allowUnknown)
}

// validate_Object_ListContactsByGroupRequest function validates a JSON for a given object.
func validate_Object_ListContactsByGroupRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ListContactsByGroupRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "filter":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Filtering{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "order_by":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Sorting{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.FieldSelection{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "paging":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Pagination{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "group_id":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf1.Identifier{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ListContactsByGroupRequest.
func (o *ListContactsByGroupRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ListContactsByGroupRequest(r, path, allowUnknown)
}

// validate_Object_SMSRequest function validates a JSON for a given object.
func validate_Object_SMSRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &SMSRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "id":
		case "message":
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object SMSRequest.
func (o *SMSRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_SMSRequest(r, path, allowUnknown)
}

// validate_Object_SMSResponse function validates a JSON for a given object.
func validate_Object_SMSResponse(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &SMSResponse{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object SMSResponse.
func (o *SMSResponse) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_SMSResponse(r, path, allowUnknown)
}

// validate_Object_ListContactRequest function validates a JSON for a given object.
func validate_Object_ListContactRequest(r json.RawMessage, path string, allowUnknown bool) (err error) {
	obj := &ListContactRequest{}
	if hook, ok := interface{}(obj).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	var v map[string]json.RawMessage
	if err = json.Unmarshal(r, &v); err != nil {
		return fmt.Errorf("Invalid value for %q: expected object.", path)
	}
	for k, _ := range v {
		switch k {
		case "filter":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Filtering{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "order_by":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Sorting{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "fields":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.FieldSelection{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		case "paging":
			if v[k] == nil {
				continue
			}
			vv := v[k]
			vvPath := validate_runtime.JoinPath(path, k)
			validator, ok := interface{}(&google_protobuf2.Pagination{}).(interface {
				AtlasValidateJSON(json.RawMessage, string, bool) error
			})
			if !ok {
				continue
			}
			if err = validator.AtlasValidateJSON(vv, vvPath, allowUnknown); err != nil {
				return err
			}
		default:
			if !allowUnknown {
				return fmt.Errorf("Unknown field %q", validate_runtime.JoinPath(path, k))
			}
		}
	}
	return nil
}

// AtlasValidateJSON function validates a JSON for object ListContactRequest.
func (o *ListContactRequest) AtlasValidateJSON(r json.RawMessage, path string, allowUnknown bool) (err error) {
	if hook, ok := interface{}(o).(interface {
		AtlasJSONValidate(json.RawMessage, string, bool) (json.RawMessage, error)
	}); ok {
		if r, err = hook.AtlasJSONValidate(r, path, allowUnknown); err != nil {
			return err
		}
	}
	return validate_Object_ListContactRequest(r, path, allowUnknown)
}

var validate_Patterns = []struct {
	pattern    runtime.Pattern
	httpMethod string
	validator  func(json.RawMessage) error
	// Included for introspection purpose.
	allowUnknown bool
}{
	{
		pattern:      pattern_Profiles_Create_0,
		httpMethod:   "POST",
		validator:    validate_Profiles_Create_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Profiles_Read_0,
		httpMethod:   "GET",
		validator:    validate_Profiles_Read_0,
		allowUnknown: true,
	},
	{
		pattern:      pattern_Profiles_Update_0,
		httpMethod:   "PUT",
		validator:    validate_Profiles_Update_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Profiles_Update_1,
		httpMethod:   "PATCH",
		validator:    validate_Profiles_Update_1,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Profiles_Delete_0,
		httpMethod:   "DELETE",
		validator:    validate_Profiles_Delete_0,
		allowUnknown: true,
	},
	{
		pattern:      pattern_Profiles_List_0,
		httpMethod:   "GET",
		validator:    validate_Profiles_List_0,
		allowUnknown: true,
	},
	{
		pattern:      pattern_Groups_Create_0,
		httpMethod:   "POST",
		validator:    validate_Groups_Create_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Groups_Read_0,
		httpMethod:   "GET",
		validator:    validate_Groups_Read_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Groups_Update_0,
		httpMethod:   "PUT",
		validator:    validate_Groups_Update_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Groups_Update_1,
		httpMethod:   "PATCH",
		validator:    validate_Groups_Update_1,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Groups_Delete_0,
		httpMethod:   "DELETE",
		validator:    validate_Groups_Delete_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Groups_List_0,
		httpMethod:   "GET",
		validator:    validate_Groups_List_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Groups_ListByProfile_0,
		httpMethod:   "GET",
		validator:    validate_Groups_ListByProfile_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Contacts_Create_0,
		httpMethod:   "POST",
		validator:    validate_Contacts_Create_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Contacts_Read_0,
		httpMethod:   "GET",
		validator:    validate_Contacts_Read_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Contacts_Update_0,
		httpMethod:   "PUT",
		validator:    validate_Contacts_Update_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Contacts_Update_1,
		httpMethod:   "PATCH",
		validator:    validate_Contacts_Update_1,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Contacts_Delete_0,
		httpMethod:   "DELETE",
		validator:    validate_Contacts_Delete_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Contacts_List_0,
		httpMethod:   "GET",
		validator:    validate_Contacts_List_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Contacts_ListByProfile_0,
		httpMethod:   "GET",
		validator:    validate_Contacts_ListByProfile_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Contacts_ListByGroup_0,
		httpMethod:   "GET",
		validator:    validate_Contacts_ListByGroup_0,
		allowUnknown: false,
	},
	{
		pattern:      pattern_Contacts_SendSMS_0,
		httpMethod:   "POST",
		validator:    validate_Contacts_SendSMS_0,
		allowUnknown: false,
	},
}

// AtlasValidateAnnotator parses JSON input and validates unknown fields
// based on 'allow_unknown_fields' options specified in proto file.
func AtlasValidateAnnotator(ctx context.Context, r *http.Request) metadata.MD {
	md := make(metadata.MD)
	for _, v := range validate_Patterns {
		if r.Method == v.httpMethod && validate_runtime.PatternMatch(v.pattern, r.URL.Path) {
			var b []byte
			var err error
			if b, err = ioutil.ReadAll(r.Body); err != nil {
				md.Set("Atlas-Validation-Error", "Invalid value: unable to parse body")
				return md
			}
			r.Body = ioutil.NopCloser(bytes.NewReader(b))
			if err = v.validator(b); err != nil {
				md.Set("Atlas-Validation-Error", err.Error())
			}
			break
		}
	}
	return md
}
