// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/seizadi/cmdb/pkg/pb/cmdb.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/seizadi/cmdb/pkg/pb/cmdb.proto

It has these top-level messages:
	VersionResponse
	Region
	CreateRegionRequest
	CreateRegionResponse
	ReadRegionRequest
	ReadRegionResponse
	UpdateRegionRequest
	UpdateRegionResponse
	DeleteRegionRequest
	DeleteRegionResponse
	ListRegionRequest
	ListRegionsResponse
	Container
	CreateContainerRequest
	CreateContainerResponse
	ReadContainerRequest
	ReadContainerResponse
	UpdateContainerRequest
	UpdateContainerResponse
	DeleteContainerRequest
	DeleteContainerResponse
	ListContainerRequest
	ListContainersResponse
	VersionTag
	CreateVersionTagRequest
	CreateVersionTagResponse
	ReadVersionTagRequest
	ReadVersionTagResponse
	UpdateVersionTagRequest
	UpdateVersionTagResponse
	DeleteVersionTagRequest
	DeleteVersionTagResponse
	ListVersionTagRequest
	ListVersionTagsResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "google.golang.org/genproto/protobuf/field_mask"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"
import infoblox_api "github.com/infobloxopen/atlas-app-toolkit/query"
import atlas_rpc "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"
import _ "github.com/infobloxopen/protoc-gen-atlas-query-validate/options"
import _ "github.com/infobloxopen/protoc-gen-atlas-validate/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ---------------------------------
// CMDB Application Version
// ---------------------------------
type VersionResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// ------------------------------------------
// Region represents a particular AWS Region
// ------------------------------------------
type Region struct {
	// The contact identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the region
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the region
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Region) Reset()                    { *m = Region{} }
func (m *Region) String() string            { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()               {}
func (*Region) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Region) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Region) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Region) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateRegionRequest struct {
	Payload *Region `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateRegionRequest) Reset()                    { *m = CreateRegionRequest{} }
func (m *CreateRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRegionRequest) ProtoMessage()               {}
func (*CreateRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRegionRequest) GetPayload() *Region {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateRegionResponse struct {
	Result *Region `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateRegionResponse) Reset()                    { *m = CreateRegionResponse{} }
func (m *CreateRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRegionResponse) ProtoMessage()               {}
func (*CreateRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateRegionResponse) GetResult() *Region {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadRegionRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadRegionRequest) Reset()                    { *m = ReadRegionRequest{} }
func (m *ReadRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRegionRequest) ProtoMessage()               {}
func (*ReadRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadRegionRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadRegionRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadRegionResponse struct {
	Result *Region `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadRegionResponse) Reset()                    { *m = ReadRegionResponse{} }
func (m *ReadRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadRegionResponse) ProtoMessage()               {}
func (*ReadRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadRegionResponse) GetResult() *Region {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateRegionRequest struct {
	Payload *Region                     `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateRegionRequest) Reset()                    { *m = UpdateRegionRequest{} }
func (m *UpdateRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRegionRequest) ProtoMessage()               {}
func (*UpdateRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateRegionRequest) GetPayload() *Region {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateRegionRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateRegionResponse struct {
	Result *Region `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateRegionResponse) Reset()                    { *m = UpdateRegionResponse{} }
func (m *UpdateRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRegionResponse) ProtoMessage()               {}
func (*UpdateRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateRegionResponse) GetResult() *Region {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteRegionRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRegionRequest) Reset()                    { *m = DeleteRegionRequest{} }
func (m *DeleteRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRegionRequest) ProtoMessage()               {}
func (*DeleteRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteRegionRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteRegionResponse struct {
}

func (m *DeleteRegionResponse) Reset()                    { *m = DeleteRegionResponse{} }
func (m *DeleteRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRegionResponse) ProtoMessage()               {}
func (*DeleteRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ListRegionRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListRegionRequest) Reset()                    { *m = ListRegionRequest{} }
func (m *ListRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRegionRequest) ProtoMessage()               {}
func (*ListRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListRegionRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListRegionRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListRegionRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListRegionRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListRegionsResponse struct {
	Results []*Region              `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListRegionsResponse) Reset()                    { *m = ListRegionsResponse{} }
func (m *ListRegionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRegionsResponse) ProtoMessage()               {}
func (*ListRegionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListRegionsResponse) GetResults() []*Region {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListRegionsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// -----------------------------------------------------------------------------------
// Container represents a Docker Image that has been loaded to a Registry
// -----------------------------------------------------------------------------------
type Container struct {
	// The contact identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the container
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the container
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The unique container name referenced helm charts
	ContainerName string `protobuf:"bytes,4,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	// The docker image repository (e.g. soheileizadi)
	ImageRepo string `protobuf:"bytes,5,opt,name=image_repo,json=imageRepo" json:"image_repo,omitempty"`
	// The docker image tag (e.g. latest)
	ImageTag string `protobuf:"bytes,6,opt,name=image_tag,json=imageTag" json:"image_tag,omitempty"`
	// The image pull
	ImagePullPolicy string `protobuf:"bytes,7,opt,name=image_pull_policy,json=imagePullPolicy" json:"image_pull_policy,omitempty"`
	// The digest of the image to check integrity (e.g. digest: sha256:9bf4971079f0ddf3f4ed8681dc96c2610804007359643809165f94a95bc5c3b6)
	Digest string `protobuf:"bytes,8,opt,name=digest" json:"digest,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Container) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Container) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Container) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *Container) GetImageRepo() string {
	if m != nil {
		return m.ImageRepo
	}
	return ""
}

func (m *Container) GetImageTag() string {
	if m != nil {
		return m.ImageTag
	}
	return ""
}

func (m *Container) GetImagePullPolicy() string {
	if m != nil {
		return m.ImagePullPolicy
	}
	return ""
}

func (m *Container) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type CreateContainerRequest struct {
	Payload *Container `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateContainerRequest) Reset()                    { *m = CreateContainerRequest{} }
func (m *CreateContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerRequest) ProtoMessage()               {}
func (*CreateContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateContainerRequest) GetPayload() *Container {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateContainerResponse struct {
	Result *Container `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateContainerResponse) Reset()                    { *m = CreateContainerResponse{} }
func (m *CreateContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerResponse) ProtoMessage()               {}
func (*CreateContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateContainerResponse) GetResult() *Container {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadContainerRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadContainerRequest) Reset()                    { *m = ReadContainerRequest{} }
func (m *ReadContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadContainerRequest) ProtoMessage()               {}
func (*ReadContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReadContainerRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadContainerRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadContainerResponse struct {
	Result *Container `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadContainerResponse) Reset()                    { *m = ReadContainerResponse{} }
func (m *ReadContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadContainerResponse) ProtoMessage()               {}
func (*ReadContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReadContainerResponse) GetResult() *Container {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateContainerRequest struct {
	Payload *Container                  `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateContainerRequest) Reset()                    { *m = UpdateContainerRequest{} }
func (m *UpdateContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateContainerRequest) ProtoMessage()               {}
func (*UpdateContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateContainerRequest) GetPayload() *Container {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateContainerRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateContainerResponse struct {
	Result *Container `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateContainerResponse) Reset()                    { *m = UpdateContainerResponse{} }
func (m *UpdateContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateContainerResponse) ProtoMessage()               {}
func (*UpdateContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateContainerResponse) GetResult() *Container {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteContainerRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteContainerRequest) Reset()                    { *m = DeleteContainerRequest{} }
func (m *DeleteContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteContainerRequest) ProtoMessage()               {}
func (*DeleteContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DeleteContainerRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteContainerResponse struct {
}

func (m *DeleteContainerResponse) Reset()                    { *m = DeleteContainerResponse{} }
func (m *DeleteContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteContainerResponse) ProtoMessage()               {}
func (*DeleteContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type ListContainerRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListContainerRequest) Reset()                    { *m = ListContainerRequest{} }
func (m *ListContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContainerRequest) ProtoMessage()               {}
func (*ListContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ListContainerRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListContainerRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListContainerRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListContainerRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListContainersResponse struct {
	Results []*Container           `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListContainersResponse) Reset()                    { *m = ListContainersResponse{} }
func (m *ListContainersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListContainersResponse) ProtoMessage()               {}
func (*ListContainersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ListContainersResponse) GetResults() []*Container {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListContainersResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// -----------------------------------------------------------------------------------
// VersionTag represents a tag on git repo
// -----------------------------------------------------------------------------------
type VersionTag struct {
	// The contact identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the container
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the container
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The version based on SemVer (e.g. 0.0.4)
	Version string `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	// The git repo (e.g. https://github.com/seizadi/cmdb/releases/tag/v0.0.4)
	Repo string `protobuf:"bytes,5,opt,name=repo" json:"repo,omitempty"`
	// The git repo commit ID (e.g. 20ec77f5a8f8e260deb51e8d888a2597762184b6)
	Commit string `protobuf:"bytes,6,opt,name=commit" json:"commit,omitempty"`
}

func (m *VersionTag) Reset()                    { *m = VersionTag{} }
func (m *VersionTag) String() string            { return proto.CompactTextString(m) }
func (*VersionTag) ProtoMessage()               {}
func (*VersionTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *VersionTag) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VersionTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VersionTag) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VersionTag) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionTag) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *VersionTag) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

type CreateVersionTagRequest struct {
	Payload *VersionTag `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateVersionTagRequest) Reset()                    { *m = CreateVersionTagRequest{} }
func (m *CreateVersionTagRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVersionTagRequest) ProtoMessage()               {}
func (*CreateVersionTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CreateVersionTagRequest) GetPayload() *VersionTag {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateVersionTagResponse struct {
	Result *VersionTag `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateVersionTagResponse) Reset()                    { *m = CreateVersionTagResponse{} }
func (m *CreateVersionTagResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateVersionTagResponse) ProtoMessage()               {}
func (*CreateVersionTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CreateVersionTagResponse) GetResult() *VersionTag {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadVersionTagRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadVersionTagRequest) Reset()                    { *m = ReadVersionTagRequest{} }
func (m *ReadVersionTagRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadVersionTagRequest) ProtoMessage()               {}
func (*ReadVersionTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ReadVersionTagRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadVersionTagRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadVersionTagResponse struct {
	Result *VersionTag `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadVersionTagResponse) Reset()                    { *m = ReadVersionTagResponse{} }
func (m *ReadVersionTagResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadVersionTagResponse) ProtoMessage()               {}
func (*ReadVersionTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReadVersionTagResponse) GetResult() *VersionTag {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateVersionTagRequest struct {
	Payload *VersionTag                 `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateVersionTagRequest) Reset()                    { *m = UpdateVersionTagRequest{} }
func (m *UpdateVersionTagRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateVersionTagRequest) ProtoMessage()               {}
func (*UpdateVersionTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UpdateVersionTagRequest) GetPayload() *VersionTag {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateVersionTagRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateVersionTagResponse struct {
	Result *VersionTag `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateVersionTagResponse) Reset()                    { *m = UpdateVersionTagResponse{} }
func (m *UpdateVersionTagResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateVersionTagResponse) ProtoMessage()               {}
func (*UpdateVersionTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *UpdateVersionTagResponse) GetResult() *VersionTag {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteVersionTagRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteVersionTagRequest) Reset()                    { *m = DeleteVersionTagRequest{} }
func (m *DeleteVersionTagRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteVersionTagRequest) ProtoMessage()               {}
func (*DeleteVersionTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DeleteVersionTagRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteVersionTagResponse struct {
}

func (m *DeleteVersionTagResponse) Reset()                    { *m = DeleteVersionTagResponse{} }
func (m *DeleteVersionTagResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteVersionTagResponse) ProtoMessage()               {}
func (*DeleteVersionTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type ListVersionTagRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListVersionTagRequest) Reset()                    { *m = ListVersionTagRequest{} }
func (m *ListVersionTagRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionTagRequest) ProtoMessage()               {}
func (*ListVersionTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ListVersionTagRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListVersionTagRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListVersionTagRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListVersionTagRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListVersionTagsResponse struct {
	Results []*VersionTag          `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListVersionTagsResponse) Reset()                    { *m = ListVersionTagsResponse{} }
func (m *ListVersionTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListVersionTagsResponse) ProtoMessage()               {}
func (*ListVersionTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ListVersionTagsResponse) GetResults() []*VersionTag {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListVersionTagsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func init() {
	proto.RegisterType((*VersionResponse)(nil), "api.cmdb.VersionResponse")
	proto.RegisterType((*Region)(nil), "api.cmdb.Region")
	proto.RegisterType((*CreateRegionRequest)(nil), "api.cmdb.CreateRegionRequest")
	proto.RegisterType((*CreateRegionResponse)(nil), "api.cmdb.CreateRegionResponse")
	proto.RegisterType((*ReadRegionRequest)(nil), "api.cmdb.ReadRegionRequest")
	proto.RegisterType((*ReadRegionResponse)(nil), "api.cmdb.ReadRegionResponse")
	proto.RegisterType((*UpdateRegionRequest)(nil), "api.cmdb.UpdateRegionRequest")
	proto.RegisterType((*UpdateRegionResponse)(nil), "api.cmdb.UpdateRegionResponse")
	proto.RegisterType((*DeleteRegionRequest)(nil), "api.cmdb.DeleteRegionRequest")
	proto.RegisterType((*DeleteRegionResponse)(nil), "api.cmdb.DeleteRegionResponse")
	proto.RegisterType((*ListRegionRequest)(nil), "api.cmdb.ListRegionRequest")
	proto.RegisterType((*ListRegionsResponse)(nil), "api.cmdb.ListRegionsResponse")
	proto.RegisterType((*Container)(nil), "api.cmdb.Container")
	proto.RegisterType((*CreateContainerRequest)(nil), "api.cmdb.CreateContainerRequest")
	proto.RegisterType((*CreateContainerResponse)(nil), "api.cmdb.CreateContainerResponse")
	proto.RegisterType((*ReadContainerRequest)(nil), "api.cmdb.ReadContainerRequest")
	proto.RegisterType((*ReadContainerResponse)(nil), "api.cmdb.ReadContainerResponse")
	proto.RegisterType((*UpdateContainerRequest)(nil), "api.cmdb.UpdateContainerRequest")
	proto.RegisterType((*UpdateContainerResponse)(nil), "api.cmdb.UpdateContainerResponse")
	proto.RegisterType((*DeleteContainerRequest)(nil), "api.cmdb.DeleteContainerRequest")
	proto.RegisterType((*DeleteContainerResponse)(nil), "api.cmdb.DeleteContainerResponse")
	proto.RegisterType((*ListContainerRequest)(nil), "api.cmdb.ListContainerRequest")
	proto.RegisterType((*ListContainersResponse)(nil), "api.cmdb.ListContainersResponse")
	proto.RegisterType((*VersionTag)(nil), "api.cmdb.VersionTag")
	proto.RegisterType((*CreateVersionTagRequest)(nil), "api.cmdb.CreateVersionTagRequest")
	proto.RegisterType((*CreateVersionTagResponse)(nil), "api.cmdb.CreateVersionTagResponse")
	proto.RegisterType((*ReadVersionTagRequest)(nil), "api.cmdb.ReadVersionTagRequest")
	proto.RegisterType((*ReadVersionTagResponse)(nil), "api.cmdb.ReadVersionTagResponse")
	proto.RegisterType((*UpdateVersionTagRequest)(nil), "api.cmdb.UpdateVersionTagRequest")
	proto.RegisterType((*UpdateVersionTagResponse)(nil), "api.cmdb.UpdateVersionTagResponse")
	proto.RegisterType((*DeleteVersionTagRequest)(nil), "api.cmdb.DeleteVersionTagRequest")
	proto.RegisterType((*DeleteVersionTagResponse)(nil), "api.cmdb.DeleteVersionTagResponse")
	proto.RegisterType((*ListVersionTagRequest)(nil), "api.cmdb.ListVersionTagRequest")
	proto.RegisterType((*ListVersionTagsResponse)(nil), "api.cmdb.ListVersionTagsResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cmdb service

type CmdbClient interface {
	GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type cmdbClient struct {
	cc *grpc.ClientConn
}

func NewCmdbClient(cc *grpc.ClientConn) CmdbClient {
	return &cmdbClient{cc}
}

func (c *cmdbClient) GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Cmdb/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cmdb service

type CmdbServer interface {
	GetVersion(context.Context, *google_protobuf.Empty) (*VersionResponse, error)
}

func RegisterCmdbServer(s *grpc.Server, srv CmdbServer) {
	s.RegisterService(&_Cmdb_serviceDesc, srv)
}

func _Cmdb_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Cmdb/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).GetVersion(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cmdb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Cmdb",
	HandlerType: (*CmdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Cmdb_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Regions service

type RegionsClient interface {
	// Use this method to create a contact information.
	Create(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error)
	// Use this method to read a contact information by identifier.
	Read(ctx context.Context, in *ReadRegionRequest, opts ...grpc.CallOption) (*ReadRegionResponse, error)
	// Use this method to update a contact information.
	Update(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*UpdateRegionResponse, error)
	// Use this method to delete a particular contact.
	Delete(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*DeleteRegionResponse, error)
	// Use this method to retrieve all the contacts.
	List(ctx context.Context, in *ListRegionRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
}

type regionsClient struct {
	cc *grpc.ClientConn
}

func NewRegionsClient(cc *grpc.ClientConn) RegionsClient {
	return &regionsClient{cc}
}

func (c *regionsClient) Create(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error) {
	out := new(CreateRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) Read(ctx context.Context, in *ReadRegionRequest, opts ...grpc.CallOption) (*ReadRegionResponse, error) {
	out := new(ReadRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) Update(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*UpdateRegionResponse, error) {
	out := new(UpdateRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) Delete(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*DeleteRegionResponse, error) {
	out := new(DeleteRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) List(ctx context.Context, in *ListRegionRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	out := new(ListRegionsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Regions service

type RegionsServer interface {
	// Use this method to create a contact information.
	Create(context.Context, *CreateRegionRequest) (*CreateRegionResponse, error)
	// Use this method to read a contact information by identifier.
	Read(context.Context, *ReadRegionRequest) (*ReadRegionResponse, error)
	// Use this method to update a contact information.
	Update(context.Context, *UpdateRegionRequest) (*UpdateRegionResponse, error)
	// Use this method to delete a particular contact.
	Delete(context.Context, *DeleteRegionRequest) (*DeleteRegionResponse, error)
	// Use this method to retrieve all the contacts.
	List(context.Context, *ListRegionRequest) (*ListRegionsResponse, error)
}

func RegisterRegionsServer(s *grpc.Server, srv RegionsServer) {
	s.RegisterService(&_Regions_serviceDesc, srv)
}

func _Regions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Create(ctx, req.(*CreateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Read(ctx, req.(*ReadRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Update(ctx, req.(*UpdateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Delete(ctx, req.(*DeleteRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).List(ctx, req.(*ListRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Regions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Regions",
	HandlerType: (*RegionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Regions_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Regions_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Regions_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Regions_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Regions_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Containers service

type ContainersClient interface {
	// Use this method to create a container.
	Create(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	// Use this method to retrieve the particular container.
	Read(ctx context.Context, in *ReadContainerRequest, opts ...grpc.CallOption) (*ReadContainerResponse, error)
	// Use this method to update container.
	Update(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerResponse, error)
	// Use this method to delete a container.
	Delete(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*DeleteContainerResponse, error)
	// Use this method to retrieve the list of containers.
	List(ctx context.Context, in *ListContainerRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)
}

type containersClient struct {
	cc *grpc.ClientConn
}

func NewContainersClient(cc *grpc.ClientConn) ContainersClient {
	return &containersClient{cc}
}

func (c *containersClient) Create(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	out := new(CreateContainerResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Containers/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Read(ctx context.Context, in *ReadContainerRequest, opts ...grpc.CallOption) (*ReadContainerResponse, error) {
	out := new(ReadContainerResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Containers/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Update(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerResponse, error) {
	out := new(UpdateContainerResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Containers/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Delete(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*DeleteContainerResponse, error) {
	out := new(DeleteContainerResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Containers/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) List(ctx context.Context, in *ListContainerRequest, opts ...grpc.CallOption) (*ListContainersResponse, error) {
	out := new(ListContainersResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Containers/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Containers service

type ContainersServer interface {
	// Use this method to create a container.
	Create(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	// Use this method to retrieve the particular container.
	Read(context.Context, *ReadContainerRequest) (*ReadContainerResponse, error)
	// Use this method to update container.
	Update(context.Context, *UpdateContainerRequest) (*UpdateContainerResponse, error)
	// Use this method to delete a container.
	Delete(context.Context, *DeleteContainerRequest) (*DeleteContainerResponse, error)
	// Use this method to retrieve the list of containers.
	List(context.Context, *ListContainerRequest) (*ListContainersResponse, error)
}

func RegisterContainersServer(s *grpc.Server, srv ContainersServer) {
	s.RegisterService(&_Containers_serviceDesc, srv)
}

func _Containers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Containers/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Create(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Containers/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Read(ctx, req.(*ReadContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Containers/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Update(ctx, req.(*UpdateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Containers/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Delete(ctx, req.(*DeleteContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Containers/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).List(ctx, req.(*ListContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Containers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Containers",
	HandlerType: (*ContainersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Containers_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Containers_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Containers_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Containers_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Containers_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for VersionTags service

type VersionTagsClient interface {
	// Use this method to create a container.
	Create(ctx context.Context, in *CreateVersionTagRequest, opts ...grpc.CallOption) (*CreateVersionTagResponse, error)
	// Use this method to retrieve the particular container.
	Read(ctx context.Context, in *ReadVersionTagRequest, opts ...grpc.CallOption) (*ReadVersionTagResponse, error)
	// Use this method to update container.
	Update(ctx context.Context, in *UpdateVersionTagRequest, opts ...grpc.CallOption) (*UpdateVersionTagResponse, error)
	// Use this method to delete a container.
	Delete(ctx context.Context, in *DeleteVersionTagRequest, opts ...grpc.CallOption) (*DeleteVersionTagResponse, error)
	// Use this method to retrieve the list of containers.
	List(ctx context.Context, in *ListVersionTagRequest, opts ...grpc.CallOption) (*ListVersionTagsResponse, error)
}

type versionTagsClient struct {
	cc *grpc.ClientConn
}

func NewVersionTagsClient(cc *grpc.ClientConn) VersionTagsClient {
	return &versionTagsClient{cc}
}

func (c *versionTagsClient) Create(ctx context.Context, in *CreateVersionTagRequest, opts ...grpc.CallOption) (*CreateVersionTagResponse, error) {
	out := new(CreateVersionTagResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.VersionTags/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionTagsClient) Read(ctx context.Context, in *ReadVersionTagRequest, opts ...grpc.CallOption) (*ReadVersionTagResponse, error) {
	out := new(ReadVersionTagResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.VersionTags/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionTagsClient) Update(ctx context.Context, in *UpdateVersionTagRequest, opts ...grpc.CallOption) (*UpdateVersionTagResponse, error) {
	out := new(UpdateVersionTagResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.VersionTags/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionTagsClient) Delete(ctx context.Context, in *DeleteVersionTagRequest, opts ...grpc.CallOption) (*DeleteVersionTagResponse, error) {
	out := new(DeleteVersionTagResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.VersionTags/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionTagsClient) List(ctx context.Context, in *ListVersionTagRequest, opts ...grpc.CallOption) (*ListVersionTagsResponse, error) {
	out := new(ListVersionTagsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.VersionTags/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VersionTags service

type VersionTagsServer interface {
	// Use this method to create a container.
	Create(context.Context, *CreateVersionTagRequest) (*CreateVersionTagResponse, error)
	// Use this method to retrieve the particular container.
	Read(context.Context, *ReadVersionTagRequest) (*ReadVersionTagResponse, error)
	// Use this method to update container.
	Update(context.Context, *UpdateVersionTagRequest) (*UpdateVersionTagResponse, error)
	// Use this method to delete a container.
	Delete(context.Context, *DeleteVersionTagRequest) (*DeleteVersionTagResponse, error)
	// Use this method to retrieve the list of containers.
	List(context.Context, *ListVersionTagRequest) (*ListVersionTagsResponse, error)
}

func RegisterVersionTagsServer(s *grpc.Server, srv VersionTagsServer) {
	s.RegisterService(&_VersionTags_serviceDesc, srv)
}

func _VersionTags_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVersionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTagsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.VersionTags/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTagsServer).Create(ctx, req.(*CreateVersionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionTags_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVersionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTagsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.VersionTags/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTagsServer).Read(ctx, req.(*ReadVersionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionTags_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTagsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.VersionTags/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTagsServer).Update(ctx, req.(*UpdateVersionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionTags_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVersionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTagsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.VersionTags/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTagsServer).Delete(ctx, req.(*DeleteVersionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionTags_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTagsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.VersionTags/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTagsServer).List(ctx, req.(*ListVersionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionTags_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.VersionTags",
	HandlerType: (*VersionTagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VersionTags_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _VersionTags_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VersionTags_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VersionTags_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _VersionTags_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

func init() { proto.RegisterFile("github.com/seizadi/cmdb/pkg/pb/cmdb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1670 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x59, 0xcf, 0x6f, 0xdb, 0x46,
	0x16, 0x0e, 0x65, 0x45, 0x56, 0x9e, 0xd7, 0x89, 0x3d, 0xb2, 0x65, 0x89, 0x76, 0x1c, 0x99, 0x9b,
	0x04, 0x59, 0x25, 0x26, 0x13, 0x65, 0xb1, 0x0b, 0x38, 0x8b, 0x5d, 0xff, 0x48, 0x9c, 0x64, 0x77,
	0x13, 0x78, 0x95, 0x6c, 0x81, 0x1a, 0x28, 0x54, 0x4a, 0x1c, 0xd3, 0x53, 0x53, 0x1c, 0x9a, 0xa4,
	0xdc, 0x2a, 0x41, 0x0e, 0xcd, 0xa5, 0xf7, 0xf6, 0x1f, 0xe8, 0xbd, 0x87, 0x1e, 0x5b, 0xbb, 0x87,
	0xa2, 0xe7, 0x1e, 0x7b, 0x2b, 0xd0, 0x00, 0x2d, 0xfa, 0x87, 0x14, 0x1c, 0x0e, 0xc5, 0x5f, 0x92,
	0x6c, 0x2b, 0x48, 0x0e, 0xb9, 0x71, 0xe6, 0xbd, 0x79, 0xdf, 0x7b, 0x6f, 0xbe, 0xf9, 0x34, 0x03,
	0xc1, 0x5f, 0x74, 0xe2, 0xee, 0x76, 0x9a, 0x72, 0x8b, 0xb6, 0x15, 0x07, 0x93, 0x67, 0xaa, 0x46,
	0x94, 0x56, 0x5b, 0x6b, 0x2a, 0xd6, 0x9e, 0xae, 0x58, 0x4d, 0xf6, 0x2d, 0x5b, 0x36, 0x75, 0x29,
	0xca, 0xab, 0x16, 0x91, 0xbd, 0xb1, 0x38, 0xaf, 0x53, 0xaa, 0x1b, 0x58, 0x61, 0xf3, 0xcd, 0xce,
	0x8e, 0x82, 0xdb, 0x96, 0xdb, 0xf5, 0xdd, 0xc4, 0x4a, 0xd2, 0xb8, 0x43, 0xb0, 0xa1, 0x35, 0xda,
	0xaa, 0xb3, 0xc7, 0x3d, 0x16, 0xb8, 0x87, 0x6a, 0x11, 0x45, 0x35, 0x4d, 0xea, 0xaa, 0x2e, 0xa1,
	0xa6, 0xc3, 0xad, 0x77, 0x22, 0x19, 0x19, 0xdd, 0x1d, 0xd7, 0x0f, 0xd4, 0x5a, 0xd6, 0xb1, 0xb9,
	0x7c, 0xa0, 0x1a, 0x44, 0x53, 0x5d, 0xac, 0xa4, 0x3e, 0xf8, 0xe2, 0x1b, 0x11, 0x67, 0xe7, 0x63,
	0x55, 0xd7, 0xb1, 0xad, 0x50, 0x8b, 0x85, 0xef, 0x03, 0xb5, 0x12, 0x81, 0x22, 0xe6, 0x0e, 0x6d,
	0x1a, 0xf4, 0x13, 0x6a, 0x61, 0x33, 0x0a, 0xa9, 0x53, 0xbb, 0xdd, 0x0b, 0xe1, 0x0d, 0xf8, 0xda,
	0x7f, 0x0f, 0x5a, 0xab, 0xba, 0x86, 0xea, 0x2c, 0xab, 0x96, 0xb5, 0xec, 0x52, 0x6a, 0xec, 0x11,
	0x57, 0xd9, 0xef, 0x60, 0xbb, 0xab, 0xb4, 0xa8, 0x61, 0xe0, 0x96, 0x17, 0xa7, 0x41, 0x2d, 0x6c,
	0xab, 0x2e, 0xb5, 0x83, 0x3c, 0xee, 0x9d, 0x3c, 0x96, 0x6d, 0xb5, 0x14, 0x1b, 0x3b, 0xb4, 0x63,
	0xb7, 0x70, 0xef, 0x83, 0x87, 0x79, 0x7a, 0x82, 0x72, 0xfc, 0x88, 0x2c, 0xa3, 0xb0, 0x9b, 0x41,
	0x79, 0x6c, 0xba, 0x91, 0x68, 0xe9, 0xe3, 0x13, 0x47, 0x4d, 0xc5, 0x63, 0xd3, 0x89, 0x78, 0xd2,
	0x75, 0xb8, 0xf0, 0x1e, 0xb6, 0x1d, 0x42, 0xcd, 0x3a, 0x76, 0x2c, 0x6a, 0x3a, 0x18, 0x95, 0x60,
	0xfc, 0xc0, 0x9f, 0x2a, 0x09, 0x15, 0xe1, 0xda, 0xb9, 0x7a, 0x30, 0x94, 0x3e, 0x15, 0x20, 0x57,
	0xc7, 0x3a, 0xa1, 0x26, 0xfa, 0x3b, 0x64, 0x88, 0xc6, 0xec, 0x13, 0xb5, 0x59, 0x99, 0x85, 0x96,
	0x6d, 0xab, 0x25, 0x3f, 0xd4, 0xb0, 0xe9, 0x92, 0x1d, 0x82, 0xed, 0xf5, 0xa9, 0xa3, 0xc3, 0xf2,
	0x9f, 0x00, 0x50, 0xce, 0xc1, 0x36, 0x51, 0x8d, 0x6b, 0x42, 0x3d, 0x43, 0x34, 0x84, 0x20, 0x6b,
	0xaa, 0x6d, 0x5c, 0xca, 0xb0, 0xd0, 0xec, 0x1b, 0x55, 0x60, 0x42, 0xc3, 0x4e, 0xcb, 0x26, 0x2c,
	0xd3, 0xd2, 0x18, 0x33, 0x45, 0xa7, 0x56, 0xf2, 0x47, 0x87, 0xe5, 0x6c, 0x5e, 0xa8, 0x08, 0xd2,
	0x1a, 0x14, 0x36, 0x6c, 0xac, 0xba, 0xd8, 0x4f, 0xa4, 0x8e, 0xf7, 0x3b, 0xd8, 0x71, 0x51, 0x15,
	0xc6, 0x2d, 0xb5, 0x6b, 0x50, 0x35, 0x48, 0x6a, 0x4a, 0x0e, 0x0e, 0x88, 0xcc, 0x3d, 0x03, 0x07,
	0x69, 0x15, 0x66, 0xe2, 0x21, 0x78, 0xe1, 0xd7, 0x20, 0x67, 0x63, 0xa7, 0x63, 0xb8, 0x03, 0x43,
	0x70, 0xbb, 0x64, 0xc1, 0x74, 0x1d, 0xab, 0x5a, 0x3c, 0x85, 0x2b, 0xc7, 0xb6, 0x84, 0x35, 0xe0,
	0xaf, 0x90, 0x63, 0x67, 0xd0, 0x61, 0x2d, 0x98, 0xa8, 0x2d, 0xc8, 0xc1, 0x3e, 0x32, 0xb8, 0x4d,
	0xcf, 0xf6, 0x04, 0x73, 0x72, 0xd6, 0xb9, 0xaf, 0xf4, 0x4f, 0x40, 0x51, 0xc4, 0x53, 0x67, 0xdc,
	0x81, 0xc2, 0xff, 0x2d, 0xed, 0x75, 0xda, 0x86, 0x6a, 0x89, 0xc4, 0x45, 0xd9, 0x57, 0x0e, 0x39,
	0xd0, 0x16, 0x3f, 0xf7, 0x47, 0xaa, 0xb3, 0xd7, 0x4b, 0x7b, 0x15, 0x66, 0xe2, 0xb0, 0xa7, 0x4e,
	0xfc, 0x1f, 0x50, 0xb8, 0x8b, 0x0d, 0x9c, 0x4c, 0xfc, 0x64, 0xcd, 0x96, 0x8a, 0x30, 0x13, 0x5f,
	0xed, 0xe3, 0x4b, 0xaf, 0x04, 0x98, 0xfe, 0x2f, 0x71, 0xdc, 0x78, 0x50, 0xc5, 0xab, 0xd0, 0x70,
	0xb1, 0xcd, 0x03, 0xcf, 0x25, 0xb7, 0xc6, 0xb3, 0x11, 0x53, 0xaf, 0x73, 0x37, 0x74, 0x13, 0xf2,
	0xd4, 0xd6, 0xb0, 0xdd, 0x68, 0x76, 0x79, 0x53, 0x66, 0xe3, 0x4b, 0x9e, 0x50, 0xdb, 0xf5, 0x16,
	0x8c, 0x33, 0xb7, 0xf5, 0x6e, 0x64, 0xf7, 0xc7, 0x4e, 0xbe, 0xfb, 0xe8, 0x26, 0xe4, 0x2c, 0x55,
	0x27, 0xa6, 0x5e, 0xca, 0xb2, 0x55, 0xa5, 0xf8, 0xaa, 0x2d, 0xcf, 0xa6, 0xfa, 0x2b, 0x7c, 0x3f,
	0xa9, 0x0d, 0x85, 0xb0, 0x3e, 0xa7, 0xd7, 0xf7, 0x2a, 0x8c, 0xfb, 0x7d, 0x75, 0x4a, 0x42, 0x65,
	0xac, 0xff, 0x7e, 0x73, 0x07, 0x54, 0x85, 0xac, 0xa5, 0xea, 0x98, 0x17, 0x56, 0x4c, 0x41, 0xe2,
	0x87, 0xe6, 0x0e, 0xad, 0x33, 0x1f, 0xe9, 0xab, 0x0c, 0x9c, 0xdb, 0xa0, 0xa6, 0xab, 0x12, 0x13,
	0xdb, 0x6f, 0x59, 0x1c, 0xd0, 0x15, 0x38, 0xdf, 0x0a, 0xb0, 0x1b, 0x6c, 0x7d, 0x96, 0x39, 0x4d,
	0xf6, 0x66, 0x1f, 0x7b, 0x81, 0x2e, 0x02, 0x90, 0xb6, 0xaa, 0xe3, 0x86, 0x8d, 0x2d, 0x5a, 0x3a,
	0xcb, 0x5c, 0xce, 0xb1, 0x99, 0x3a, 0xb6, 0x28, 0x9a, 0x07, 0x7f, 0xd0, 0x70, 0x55, 0xbd, 0x94,
	0x63, 0xd6, 0x3c, 0x9b, 0x78, 0xaa, 0xea, 0xa8, 0x0a, 0xd3, 0xbe, 0xd1, 0xea, 0x18, 0x46, 0xc3,
	0xa2, 0x06, 0x69, 0x75, 0x4b, 0xe3, 0xcc, 0xe9, 0x02, 0x33, 0x6c, 0x75, 0x0c, 0x63, 0x8b, 0x4d,
	0xa3, 0x22, 0xe4, 0x34, 0xa2, 0x63, 0xc7, 0x2d, 0xe5, 0x99, 0x03, 0x1f, 0x45, 0x34, 0xec, 0x3e,
	0x14, 0x7d, 0x01, 0xea, 0xb5, 0x2c, 0x60, 0xe0, 0x72, 0xf2, 0x3c, 0x16, 0xc2, 0xfd, 0x09, 0x9d,
	0x7b, 0x4a, 0xb6, 0x09, 0x73, 0xa9, 0x40, 0x7c, 0xa7, 0xaf, 0x27, 0x4e, 0x58, 0xdf, 0x40, 0xc1,
	0x21, 0x73, 0x60, 0xc6, 0x53, 0x97, 0x54, 0x3a, 0x6f, 0x54, 0xd2, 0xee, 0xc2, 0x6c, 0x02, 0x74,
	0x94, 0xd4, 0x9f, 0x43, 0xd1, 0x57, 0x98, 0xd7, 0xec, 0xe5, 0x48, 0xf2, 0xb6, 0x09, 0x73, 0x29,
	0xf0, 0x51, 0x8a, 0xf8, 0x17, 0x14, 0x7d, 0x99, 0x1a, 0x71, 0x07, 0xa4, 0x32, 0xcc, 0xa5, 0x02,
	0x70, 0xa9, 0xfb, 0x55, 0x80, 0x19, 0x4f, 0x0a, 0x52, 0xa1, 0xdf, 0x21, 0xb5, 0x73, 0xa0, 0x18,
	0x2b, 0x31, 0x14, 0xbc, 0xe5, 0xa4, 0xe0, 0xf5, 0x27, 0xc1, 0x28, 0x9a, 0xf7, 0xa3, 0x00, 0xc0,
	0xef, 0x4e, 0x9e, 0x44, 0xbc, 0x65, 0xd1, 0x8b, 0xdc, 0xd2, 0xb2, 0xb1, 0x5b, 0x9a, 0x17, 0x2f,
	0xa2, 0x70, 0xec, 0xdb, 0xd3, 0xa4, 0x16, 0x6d, 0xb7, 0x89, 0xcb, 0x95, 0x8d, 0x8f, 0x22, 0x9a,
	0xf4, 0x30, 0x90, 0x92, 0xb0, 0xa4, 0x80, 0x28, 0x72, 0xf2, 0x20, 0xcd, 0x84, 0x3d, 0x8c, 0x78,
	0xf7, 0x54, 0xe9, 0x01, 0x94, 0xd2, 0xa1, 0xf8, 0x7e, 0xdc, 0x48, 0x1c, 0x8b, 0xfe, 0xa1, 0x82,
	0x73, 0xe1, 0xfa, 0x12, 0x91, 0x4e, 0xe9, 0x8d, 0x0a, 0xd3, 0x26, 0x14, 0x93, 0xa8, 0x23, 0x65,
	0xff, 0x22, 0x50, 0x87, 0xd7, 0x6e, 0xe9, 0x48, 0xe2, 0xf4, 0x00, 0x4a, 0x69, 0xf8, 0x91, 0x0a,
	0x59, 0x0d, 0xd4, 0x65, 0xd4, 0x8d, 0x90, 0x44, 0x28, 0xa5, 0x23, 0x70, 0x81, 0xfa, 0x4d, 0x80,
	0x59, 0xef, 0xf4, 0xa6, 0x83, 0xbf, 0x43, 0x0a, 0xd5, 0x81, 0xb9, 0x78, 0x8d, 0xa1, 0x44, 0xc9,
	0x49, 0x89, 0x1a, 0xc0, 0x85, 0x11, 0x34, 0xaa, 0xf6, 0x3e, 0x64, 0x37, 0xda, 0x5a, 0x13, 0xfd,
	0x0f, 0xe0, 0x3e, 0x0e, 0xd0, 0x51, 0x31, 0xc5, 0x9e, 0x7b, 0x6d, 0xcb, 0xed, 0x8a, 0xe5, 0x14,
	0x70, 0x6f, 0x93, 0xa6, 0x5e, 0xfe, 0xf4, 0xfb, 0x17, 0x19, 0x40, 0x79, 0x85, 0xcb, 0x4c, 0xed,
	0x97, 0x2c, 0x8c, 0xf3, 0xeb, 0x25, 0x6a, 0x42, 0xce, 0x3f, 0xf1, 0xe8, 0x62, 0x44, 0x5e, 0xd3,
	0xcf, 0x34, 0x71, 0x71, 0x90, 0x99, 0xc3, 0x94, 0x19, 0x4c, 0x41, 0xca, 0x2b, 0xb6, 0x1f, 0x7a,
	0xa5, 0x77, 0x04, 0x34, 0xc8, 0x7a, 0xa7, 0x12, 0xcd, 0x47, 0x6f, 0xac, 0x89, 0x37, 0x98, 0xb8,
	0xd0, 0xdf, 0xc8, 0xa3, 0x2f, 0xb1, 0xe8, 0xf3, 0xa8, 0x1c, 0x44, 0x57, 0x9e, 0x13, 0x4d, 0x0e,
	0xde, 0xed, 0x0d, 0xa2, 0xbd, 0x40, 0x5f, 0x0b, 0x90, 0xf3, 0x4f, 0x4d, 0xb4, 0x94, 0x3e, 0x4f,
	0xa7, 0x68, 0x29, 0xfd, 0x9e, 0x38, 0xd2, 0xce, 0xcf, 0xdf, 0x97, 0x33, 0xf9, 0x33, 0x0c, 0x72,
	0x5b, 0x5c, 0x0a, 0x21, 0x79, 0x41, 0x72, 0x02, 0xba, 0x57, 0xe9, 0xf6, 0x8d, 0xda, 0x29, 0xbc,
	0xd1, 0x01, 0xe4, 0xfc, 0xa3, 0x15, 0x4d, 0xb8, 0xcf, 0x93, 0x29, 0x9a, 0x70, 0xdf, 0x37, 0xd1,
	0xf2, 0xd1, 0x61, 0x39, 0x1f, 0x3c, 0xf0, 0xfd, 0x4e, 0x55, 0x87, 0x74, 0xea, 0x29, 0x64, 0x3d,
	0x46, 0x47, 0xf7, 0x23, 0xf5, 0xa2, 0x12, 0x2f, 0xf6, 0x33, 0x3a, 0x7d, 0x58, 0xc5, 0x61, 0x44,
	0xfe, 0x83, 0x34, 0x25, 0xd4, 0xbe, 0x3c, 0x0b, 0x10, 0xfe, 0xa0, 0xa3, 0xfd, 0x1e, 0xc5, 0x2a,
	0x49, 0x0e, 0x25, 0x6f, 0x36, 0xe2, 0xd2, 0x10, 0x0f, 0x8e, 0x2c, 0x45, 0x76, 0xa7, 0x28, 0x4d,
	0x28, 0xbd, 0xa7, 0x42, 0x84, 0x71, 0x6d, 0xce, 0xb8, 0xc5, 0x38, 0xa9, 0x52, 0x70, 0x97, 0x06,
	0xda, 0x39, 0xd8, 0x65, 0x06, 0xb3, 0x88, 0x16, 0x22, 0x30, 0xe9, 0x86, 0x7e, 0x17, 0x52, 0xaf,
	0x92, 0xe4, 0xd6, 0xb0, 0x12, 0x07, 0xdc, 0x40, 0x25, 0x23, 0x52, 0xe2, 0x87, 0xe2, 0xe5, 0x18,
	0xf6, 0xb1, 0x1c, 0x54, 0x6a, 0xa7, 0x5b, 0x80, 0x5e, 0x0a, 0x3d, 0x1e, 0x56, 0x92, 0x44, 0x1b,
	0x96, 0xfd, 0xa0, 0x6b, 0xeb, 0xed, 0xa3, 0xc3, 0xf2, 0x44, 0xe4, 0x51, 0xe9, 0xb7, 0xb0, 0x3a,
	0xbc, 0x85, 0x1f, 0x70, 0x4e, 0x2e, 0xc6, 0x69, 0x97, 0xc2, 0xaf, 0x0c, 0xb0, 0x87, 0xcc, 0x2c,
	0x30, 0xbc, 0x49, 0x14, 0x65, 0x86, 0x78, 0x3e, 0x20, 0x27, 0xeb, 0xac, 0x50, 0xfb, 0xf6, 0x2c,
	0x4c, 0x44, 0x14, 0x1d, 0x75, 0x7a, 0x1c, 0x4d, 0x31, 0x30, 0xf5, 0xe3, 0x26, 0x4a, 0xc3, 0x5c,
	0x02, 0xe2, 0x44, 0xb6, 0xb0, 0x24, 0x4d, 0x06, 0xda, 0xeb, 0x3d, 0x51, 0x23, 0x3c, 0xdd, 0xe7,
	0x3c, 0x4d, 0xf0, 0x30, 0x0d, 0x59, 0x19, 0xec, 0xc0, 0x01, 0xaf, 0x32, 0xa8, 0x0a, 0x5a, 0x8c,
	0x41, 0xa5, 0x1b, 0xfd, 0x43, 0xc8, 0xd5, 0x14, 0x13, 0x87, 0x96, 0x3a, 0xe8, 0x46, 0x22, 0x59,
	0x91, 0x52, 0x35, 0xf1, 0x6a, 0x02, 0xff, 0x58, 0xbe, 0xde, 0xaa, 0x9d, 0x76, 0x09, 0xfa, 0x2c,
	0x64, 0x6c, 0x8a, 0x8f, 0x43, 0x6b, 0x18, 0x78, 0x93, 0xf9, 0x9b, 0x7f, 0xbf, 0x0f, 0x2d, 0x7e,
	0x37, 0xab, 0xc7, 0x75, 0x53, 0xe5, 0xb4, 0xbd, 0x14, 0xa7, 0x65, 0x3a, 0x89, 0xa5, 0x41, 0x0e,
	0x21, 0x71, 0x67, 0x19, 0xe6, 0x05, 0x14, 0x27, 0x4b, 0x92, 0xba, 0xeb, 0xaf, 0x84, 0xcf, 0xd7,
	0xbe, 0x11, 0xd0, 0x16, 0x64, 0x37, 0x1e, 0xdd, 0x5d, 0x97, 0x36, 0x60, 0xf2, 0x09, 0xdd, 0xc5,
	0xc4, 0xa8, 0xdc, 0x63, 0xff, 0x3a, 0xa0, 0x4b, 0xbb, 0xae, 0x6b, 0x39, 0x2b, 0x8a, 0x32, 0xe0,
	0x1f, 0x09, 0x71, 0x9a, 0x8f, 0x56, 0xf5, 0xb6, 0x4a, 0x0c, 0xcf, 0x5e, 0x1b, 0xbb, 0x25, 0xdf,
	0x94, 0xb2, 0xca, 0xc1, 0x2d, 0xa5, 0x9a, 0x11, 0x32, 0xb5, 0x29, 0xd5, 0xb2, 0x0c, 0xd2, 0x62,
	0xf7, 0x20, 0xe5, 0x23, 0x87, 0x9a, 0x2b, 0xa9, 0x99, 0xed, 0x3f, 0xc3, 0x12, 0xc0, 0x9a, 0x45,
	0xfe, 0x83, 0xbb, 0x6b, 0x1d, 0x77, 0x17, 0x15, 0xf2, 0x19, 0x71, 0xd2, 0xfb, 0xa2, 0x36, 0x79,
	0xc6, 0xfc, 0x2a, 0x99, 0xe6, 0x14, 0x9c, 0x8f, 0x39, 0x9d, 0xd9, 0x5e, 0x1a, 0xfe, 0x3f, 0xc9,
	0x1d, 0xab, 0xd9, 0xcc, 0xb1, 0xbb, 0xcd, 0xed, 0x3f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x43, 0x20,
	0x2e, 0x0c, 0x53, 0x19, 0x00, 0x00,
}
