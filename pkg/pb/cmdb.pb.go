// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/seizadi/cmdb/pkg/pb/cmdb.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	github.com/seizadi/cmdb/pkg/pb/cmdb.proto

It has these top-level messages:
	VersionResponse
	Region
	CreateRegionRequest
	CreateRegionResponse
	ReadRegionRequest
	ReadRegionResponse
	UpdateRegionRequest
	UpdateRegionResponse
	DeleteRegionRequest
	DeleteRegionResponse
	ListRegionRequest
	ListRegionsResponse
	Vault
	CreateVaultRequest
	CreateVaultResponse
	ReadVaultRequest
	ReadVaultResponse
	UpdateVaultRequest
	UpdateVaultResponse
	DeleteVaultRequest
	DeleteVaultResponse
	ListVaultRequest
	ListVaultsResponse
	VersionTag
	CreateVersionTagRequest
	CreateVersionTagResponse
	ReadVersionTagRequest
	ReadVersionTagResponse
	UpdateVersionTagRequest
	UpdateVersionTagResponse
	DeleteVersionTagRequest
	DeleteVersionTagResponse
	ListVersionTagRequest
	ListVersionTagsResponse
	Application
	CreateApplicationRequest
	CreateApplicationResponse
	ReadApplicationRequest
	ReadApplicationResponse
	UpdateApplicationRequest
	UpdateApplicationResponse
	DeleteApplicationRequest
	DeleteApplicationResponse
	ListApplicationRequest
	ListApplicationsResponse
	AwsRdsInstance
	CreateAwsRdsInstanceRequest
	CreateAwsRdsInstanceResponse
	ReadAwsRdsInstanceRequest
	ReadAwsRdsInstanceResponse
	UpdateAwsRdsInstanceRequest
	UpdateAwsRdsInstanceResponse
	DeleteAwsRdsInstanceRequest
	DeleteAwsRdsInstanceResponse
	ListAwsRdsInstanceRequest
	ListAwsRdsInstancesResponse
	Container
	CreateContainerRequest
	CreateContainerResponse
	ReadContainerRequest
	ReadContainerResponse
	UpdateContainerRequest
	UpdateContainerResponse
	DeleteContainerRequest
	DeleteContainerResponse
	ListContainerRequest
	ListContainersResponse
	Environment
	CreateEnvironmentRequest
	CreateEnvironmentResponse
	ReadEnvironmentRequest
	ReadEnvironmentResponse
	UpdateEnvironmentRequest
	UpdateEnvironmentResponse
	DeleteEnvironmentRequest
	DeleteEnvironmentResponse
	ListEnvironmentRequest
	ListEnvironmentsResponse
	Manifest
	CreateManifestRequest
	CreateManifestResponse
	ReadManifestRequest
	ReadManifestResponse
	UpdateManifestRequest
	UpdateManifestResponse
	DeleteManifestRequest
	DeleteManifestResponse
	ListManifestRequest
	ListManifestsResponse
	Secret
	CreateSecretRequest
	CreateSecretResponse
	ReadSecretRequest
	ReadSecretResponse
	UpdateSecretRequest
	UpdateSecretResponse
	DeleteSecretRequest
	DeleteSecretResponse
	ListSecretRequest
	ListSecretsResponse
	Artifact
	CreateArtifactRequest
	CreateArtifactResponse
	ReadArtifactRequest
	ReadArtifactResponse
	UpdateArtifactRequest
	UpdateArtifactResponse
	DeleteArtifactRequest
	DeleteArtifactResponse
	ListArtifactRequest
	ListArtifactsResponse
	AwsService
	CreateAwsServiceRequest
	CreateAwsServiceResponse
	ReadAwsServiceRequest
	ReadAwsServiceResponse
	UpdateAwsServiceRequest
	UpdateAwsServiceResponse
	DeleteAwsServiceRequest
	DeleteAwsServiceResponse
	ListAwsServiceRequest
	ListAwsServicesResponse
	Deployment
	CreateDeploymentRequest
	CreateDeploymentResponse
	ReadDeploymentRequest
	ReadDeploymentResponse
	UpdateDeploymentRequest
	UpdateDeploymentResponse
	DeleteDeploymentRequest
	DeleteDeploymentResponse
	ListDeploymentRequest
	ListDeploymentsResponse
	KubeCluster
	CreateKubeClusterRequest
	CreateKubeClusterResponse
	ReadKubeClusterRequest
	ReadKubeClusterResponse
	UpdateKubeClusterRequest
	UpdateKubeClusterResponse
	DeleteKubeClusterRequest
	DeleteKubeClusterResponse
	ListKubeClusterRequest
	ListKubeClustersResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "google.golang.org/genproto/protobuf/field_mask"
import _ "google.golang.org/genproto/googleapis/api/annotations"
import _ "github.com/lyft/protoc-gen-validate/validate"
import _ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
import _ "github.com/infobloxopen/protoc-gen-gorm/options"
import infoblox_api "github.com/infobloxopen/atlas-app-toolkit/query"
import atlas_rpc "github.com/infobloxopen/atlas-app-toolkit/rpc/resource"
import _ "github.com/infobloxopen/protoc-gen-atlas-query-validate/options"
import _ "github.com/infobloxopen/protoc-gen-atlas-validate/options"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ---------------------------------
// CMDB Application Version
// ---------------------------------
type VersionResponse struct {
	Version string `protobuf:"bytes,1,opt,name=version" json:"version,omitempty"`
}

func (m *VersionResponse) Reset()                    { *m = VersionResponse{} }
func (m *VersionResponse) String() string            { return proto.CompactTextString(m) }
func (*VersionResponse) ProtoMessage()               {}
func (*VersionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *VersionResponse) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

// ------------------------------------------------------
// Region represents a particular AWS Region
// ------------------------------------------------------
type Region struct {
	// The Region identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the Region
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the Region
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Region) Reset()                    { *m = Region{} }
func (m *Region) String() string            { return proto.CompactTextString(m) }
func (*Region) ProtoMessage()               {}
func (*Region) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Region) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Region) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Region) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateRegionRequest struct {
	Payload *Region `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateRegionRequest) Reset()                    { *m = CreateRegionRequest{} }
func (m *CreateRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRegionRequest) ProtoMessage()               {}
func (*CreateRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateRegionRequest) GetPayload() *Region {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateRegionResponse struct {
	Result *Region `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateRegionResponse) Reset()                    { *m = CreateRegionResponse{} }
func (m *CreateRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateRegionResponse) ProtoMessage()               {}
func (*CreateRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateRegionResponse) GetResult() *Region {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadRegionRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadRegionRequest) Reset()                    { *m = ReadRegionRequest{} }
func (m *ReadRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadRegionRequest) ProtoMessage()               {}
func (*ReadRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ReadRegionRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadRegionRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadRegionResponse struct {
	Result *Region `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadRegionResponse) Reset()                    { *m = ReadRegionResponse{} }
func (m *ReadRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadRegionResponse) ProtoMessage()               {}
func (*ReadRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReadRegionResponse) GetResult() *Region {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateRegionRequest struct {
	Payload *Region                     `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateRegionRequest) Reset()                    { *m = UpdateRegionRequest{} }
func (m *UpdateRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRegionRequest) ProtoMessage()               {}
func (*UpdateRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *UpdateRegionRequest) GetPayload() *Region {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateRegionRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateRegionResponse struct {
	Result *Region `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateRegionResponse) Reset()                    { *m = UpdateRegionResponse{} }
func (m *UpdateRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRegionResponse) ProtoMessage()               {}
func (*UpdateRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateRegionResponse) GetResult() *Region {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteRegionRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteRegionRequest) Reset()                    { *m = DeleteRegionRequest{} }
func (m *DeleteRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRegionRequest) ProtoMessage()               {}
func (*DeleteRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *DeleteRegionRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteRegionResponse struct {
}

func (m *DeleteRegionResponse) Reset()                    { *m = DeleteRegionResponse{} }
func (m *DeleteRegionResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteRegionResponse) ProtoMessage()               {}
func (*DeleteRegionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ListRegionRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListRegionRequest) Reset()                    { *m = ListRegionRequest{} }
func (m *ListRegionRequest) String() string            { return proto.CompactTextString(m) }
func (*ListRegionRequest) ProtoMessage()               {}
func (*ListRegionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListRegionRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListRegionRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListRegionRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListRegionRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListRegionsResponse struct {
	Results []*Region              `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListRegionsResponse) Reset()                    { *m = ListRegionsResponse{} }
func (m *ListRegionsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListRegionsResponse) ProtoMessage()               {}
func (*ListRegionsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListRegionsResponse) GetResults() []*Region {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListRegionsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// ------------------------------------------------------
// Vault represents the store for keeping Secrets
// ------------------------------------------------------
type Vault struct {
	// The vault identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the vault
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the vault
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The path on vault for the Secrets (e.g. /qa0-secrets)
	Path string `protobuf:"bytes,4,opt,name=path" json:"path,omitempty"`
	// The list of Secrets stored against the path on vault
	Secrets []*Secret `protobuf:"bytes,5,rep,name=secrets" json:"secrets,omitempty"`
}

func (m *Vault) Reset()                    { *m = Vault{} }
func (m *Vault) String() string            { return proto.CompactTextString(m) }
func (*Vault) ProtoMessage()               {}
func (*Vault) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Vault) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Vault) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vault) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Vault) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Vault) GetSecrets() []*Secret {
	if m != nil {
		return m.Secrets
	}
	return nil
}

type CreateVaultRequest struct {
	Payload *Vault `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateVaultRequest) Reset()                    { *m = CreateVaultRequest{} }
func (m *CreateVaultRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVaultRequest) ProtoMessage()               {}
func (*CreateVaultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateVaultRequest) GetPayload() *Vault {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateVaultResponse struct {
	Result *Vault `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateVaultResponse) Reset()                    { *m = CreateVaultResponse{} }
func (m *CreateVaultResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateVaultResponse) ProtoMessage()               {}
func (*CreateVaultResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CreateVaultResponse) GetResult() *Vault {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadVaultRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadVaultRequest) Reset()                    { *m = ReadVaultRequest{} }
func (m *ReadVaultRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadVaultRequest) ProtoMessage()               {}
func (*ReadVaultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ReadVaultRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadVaultRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadVaultResponse struct {
	Result *Vault `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadVaultResponse) Reset()                    { *m = ReadVaultResponse{} }
func (m *ReadVaultResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadVaultResponse) ProtoMessage()               {}
func (*ReadVaultResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *ReadVaultResponse) GetResult() *Vault {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateVaultRequest struct {
	Payload *Vault                      `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateVaultRequest) Reset()                    { *m = UpdateVaultRequest{} }
func (m *UpdateVaultRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateVaultRequest) ProtoMessage()               {}
func (*UpdateVaultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateVaultRequest) GetPayload() *Vault {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateVaultRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateVaultResponse struct {
	Result *Vault `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateVaultResponse) Reset()                    { *m = UpdateVaultResponse{} }
func (m *UpdateVaultResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateVaultResponse) ProtoMessage()               {}
func (*UpdateVaultResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *UpdateVaultResponse) GetResult() *Vault {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteVaultRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteVaultRequest) Reset()                    { *m = DeleteVaultRequest{} }
func (m *DeleteVaultRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteVaultRequest) ProtoMessage()               {}
func (*DeleteVaultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DeleteVaultRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteVaultResponse struct {
}

func (m *DeleteVaultResponse) Reset()                    { *m = DeleteVaultResponse{} }
func (m *DeleteVaultResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteVaultResponse) ProtoMessage()               {}
func (*DeleteVaultResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

type ListVaultRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListVaultRequest) Reset()                    { *m = ListVaultRequest{} }
func (m *ListVaultRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVaultRequest) ProtoMessage()               {}
func (*ListVaultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *ListVaultRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListVaultRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListVaultRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListVaultRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListVaultsResponse struct {
	Results []*Vault               `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListVaultsResponse) Reset()                    { *m = ListVaultsResponse{} }
func (m *ListVaultsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListVaultsResponse) ProtoMessage()               {}
func (*ListVaultsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *ListVaultsResponse) GetResults() []*Vault {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListVaultsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// ------------------------------------------------------
// VersionTag represents a tag on git repo
// ------------------------------------------------------
type VersionTag struct {
	// The version_tag identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the container
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the container
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The version based on SemVer (e.g. 0.0.4)
	Version string `protobuf:"bytes,4,opt,name=version" json:"version,omitempty"`
	// The git repo (e.g. https://github.com/seizadi/cmdb/releases/tag/v0.0.4)
	Repo string `protobuf:"bytes,5,opt,name=repo" json:"repo,omitempty"`
	// The git repo commit ID (e.g. 20ec77f5a8f8e260deb51e8d888a2597762184b6)
	Commit string `protobuf:"bytes,6,opt,name=commit" json:"commit,omitempty"`
	// The list of Artifacts that are versioned by this tag
	Artifacts []*Artifact `protobuf:"bytes,7,rep,name=artifacts" json:"artifacts,omitempty"`
}

func (m *VersionTag) Reset()                    { *m = VersionTag{} }
func (m *VersionTag) String() string            { return proto.CompactTextString(m) }
func (*VersionTag) ProtoMessage()               {}
func (*VersionTag) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *VersionTag) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *VersionTag) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *VersionTag) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *VersionTag) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionTag) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *VersionTag) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *VersionTag) GetArtifacts() []*Artifact {
	if m != nil {
		return m.Artifacts
	}
	return nil
}

type CreateVersionTagRequest struct {
	Payload *VersionTag `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateVersionTagRequest) Reset()                    { *m = CreateVersionTagRequest{} }
func (m *CreateVersionTagRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateVersionTagRequest) ProtoMessage()               {}
func (*CreateVersionTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *CreateVersionTagRequest) GetPayload() *VersionTag {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateVersionTagResponse struct {
	Result *VersionTag `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateVersionTagResponse) Reset()                    { *m = CreateVersionTagResponse{} }
func (m *CreateVersionTagResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateVersionTagResponse) ProtoMessage()               {}
func (*CreateVersionTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *CreateVersionTagResponse) GetResult() *VersionTag {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadVersionTagRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadVersionTagRequest) Reset()                    { *m = ReadVersionTagRequest{} }
func (m *ReadVersionTagRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadVersionTagRequest) ProtoMessage()               {}
func (*ReadVersionTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *ReadVersionTagRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadVersionTagRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadVersionTagResponse struct {
	Result *VersionTag `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadVersionTagResponse) Reset()                    { *m = ReadVersionTagResponse{} }
func (m *ReadVersionTagResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadVersionTagResponse) ProtoMessage()               {}
func (*ReadVersionTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *ReadVersionTagResponse) GetResult() *VersionTag {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateVersionTagRequest struct {
	Payload *VersionTag                 `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateVersionTagRequest) Reset()                    { *m = UpdateVersionTagRequest{} }
func (m *UpdateVersionTagRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateVersionTagRequest) ProtoMessage()               {}
func (*UpdateVersionTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *UpdateVersionTagRequest) GetPayload() *VersionTag {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateVersionTagRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateVersionTagResponse struct {
	Result *VersionTag `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateVersionTagResponse) Reset()                    { *m = UpdateVersionTagResponse{} }
func (m *UpdateVersionTagResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateVersionTagResponse) ProtoMessage()               {}
func (*UpdateVersionTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *UpdateVersionTagResponse) GetResult() *VersionTag {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteVersionTagRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteVersionTagRequest) Reset()                    { *m = DeleteVersionTagRequest{} }
func (m *DeleteVersionTagRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteVersionTagRequest) ProtoMessage()               {}
func (*DeleteVersionTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *DeleteVersionTagRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteVersionTagResponse struct {
}

func (m *DeleteVersionTagResponse) Reset()                    { *m = DeleteVersionTagResponse{} }
func (m *DeleteVersionTagResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteVersionTagResponse) ProtoMessage()               {}
func (*DeleteVersionTagResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

type ListVersionTagRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListVersionTagRequest) Reset()                    { *m = ListVersionTagRequest{} }
func (m *ListVersionTagRequest) String() string            { return proto.CompactTextString(m) }
func (*ListVersionTagRequest) ProtoMessage()               {}
func (*ListVersionTagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ListVersionTagRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListVersionTagRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListVersionTagRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListVersionTagRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListVersionTagsResponse struct {
	Results []*VersionTag          `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListVersionTagsResponse) Reset()                    { *m = ListVersionTagsResponse{} }
func (m *ListVersionTagsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListVersionTagsResponse) ProtoMessage()               {}
func (*ListVersionTagsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *ListVersionTagsResponse) GetResults() []*VersionTag {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListVersionTagsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// ------------------------------------------------------
// Application represents a particular AWS Region
// ------------------------------------------------------
type Application struct {
	// The Application identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the Application
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the Application
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Application) Reset()                    { *m = Application{} }
func (m *Application) String() string            { return proto.CompactTextString(m) }
func (*Application) ProtoMessage()               {}
func (*Application) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *Application) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Application) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Application) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateApplicationRequest struct {
	Payload *Application `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateApplicationRequest) Reset()                    { *m = CreateApplicationRequest{} }
func (m *CreateApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateApplicationRequest) ProtoMessage()               {}
func (*CreateApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *CreateApplicationRequest) GetPayload() *Application {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateApplicationResponse struct {
	Result *Application `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateApplicationResponse) Reset()                    { *m = CreateApplicationResponse{} }
func (m *CreateApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateApplicationResponse) ProtoMessage()               {}
func (*CreateApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{36} }

func (m *CreateApplicationResponse) GetResult() *Application {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadApplicationRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadApplicationRequest) Reset()                    { *m = ReadApplicationRequest{} }
func (m *ReadApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadApplicationRequest) ProtoMessage()               {}
func (*ReadApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ReadApplicationRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadApplicationRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadApplicationResponse struct {
	Result *Application `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadApplicationResponse) Reset()                    { *m = ReadApplicationResponse{} }
func (m *ReadApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadApplicationResponse) ProtoMessage()               {}
func (*ReadApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ReadApplicationResponse) GetResult() *Application {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateApplicationRequest struct {
	Payload *Application                `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateApplicationRequest) Reset()                    { *m = UpdateApplicationRequest{} }
func (m *UpdateApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateApplicationRequest) ProtoMessage()               {}
func (*UpdateApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *UpdateApplicationRequest) GetPayload() *Application {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateApplicationRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateApplicationResponse struct {
	Result *Application `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateApplicationResponse) Reset()                    { *m = UpdateApplicationResponse{} }
func (m *UpdateApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateApplicationResponse) ProtoMessage()               {}
func (*UpdateApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *UpdateApplicationResponse) GetResult() *Application {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteApplicationRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteApplicationRequest) Reset()                    { *m = DeleteApplicationRequest{} }
func (m *DeleteApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteApplicationRequest) ProtoMessage()               {}
func (*DeleteApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *DeleteApplicationRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteApplicationResponse struct {
}

func (m *DeleteApplicationResponse) Reset()                    { *m = DeleteApplicationResponse{} }
func (m *DeleteApplicationResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteApplicationResponse) ProtoMessage()               {}
func (*DeleteApplicationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

type ListApplicationRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListApplicationRequest) Reset()                    { *m = ListApplicationRequest{} }
func (m *ListApplicationRequest) String() string            { return proto.CompactTextString(m) }
func (*ListApplicationRequest) ProtoMessage()               {}
func (*ListApplicationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ListApplicationRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListApplicationRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListApplicationRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListApplicationRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListApplicationsResponse struct {
	Results []*Application         `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListApplicationsResponse) Reset()                    { *m = ListApplicationsResponse{} }
func (m *ListApplicationsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListApplicationsResponse) ProtoMessage()               {}
func (*ListApplicationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ListApplicationsResponse) GetResults() []*Application {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListApplicationsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// --------------------------------------------------------
// AwsRdsInstance represents a particular AWS RDS Instance
// --------------------------------------------------------
type AwsRdsInstance struct {
	// The AwsRdsInstance identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the AwsRdsInstance
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the AwsRdsInstance
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Host URL of the AwsRdsInstance (e.g. cmdb.cf1k7otqh6nf.us-east-1.rds.amazonaws.com)
	DatabaseHost string `protobuf:"bytes,4,opt,name=database_host,json=databaseHost" json:"database_host,omitempty"`
	// Name of the database created for use by the application
	DatabaseName string `protobuf:"bytes,5,opt,name=database_name,json=databaseName" json:"database_name,omitempty"`
	// User credentials for access to the database
	DatabaseUser string `protobuf:"bytes,6,opt,name=database_user,json=databaseUser" json:"database_user,omitempty"`
	// Secret database password which must be with the user credentials to access database
	DatabasePassword *Secret `protobuf:"bytes,7,opt,name=database_password,json=databasePassword" json:"database_password,omitempty"`
}

func (m *AwsRdsInstance) Reset()                    { *m = AwsRdsInstance{} }
func (m *AwsRdsInstance) String() string            { return proto.CompactTextString(m) }
func (*AwsRdsInstance) ProtoMessage()               {}
func (*AwsRdsInstance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{45} }

func (m *AwsRdsInstance) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AwsRdsInstance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AwsRdsInstance) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *AwsRdsInstance) GetDatabaseHost() string {
	if m != nil {
		return m.DatabaseHost
	}
	return ""
}

func (m *AwsRdsInstance) GetDatabaseName() string {
	if m != nil {
		return m.DatabaseName
	}
	return ""
}

func (m *AwsRdsInstance) GetDatabaseUser() string {
	if m != nil {
		return m.DatabaseUser
	}
	return ""
}

func (m *AwsRdsInstance) GetDatabasePassword() *Secret {
	if m != nil {
		return m.DatabasePassword
	}
	return nil
}

type CreateAwsRdsInstanceRequest struct {
	Payload *AwsRdsInstance `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateAwsRdsInstanceRequest) Reset()                    { *m = CreateAwsRdsInstanceRequest{} }
func (m *CreateAwsRdsInstanceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAwsRdsInstanceRequest) ProtoMessage()               {}
func (*CreateAwsRdsInstanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{46} }

func (m *CreateAwsRdsInstanceRequest) GetPayload() *AwsRdsInstance {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateAwsRdsInstanceResponse struct {
	Result *AwsRdsInstance `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateAwsRdsInstanceResponse) Reset()                    { *m = CreateAwsRdsInstanceResponse{} }
func (m *CreateAwsRdsInstanceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAwsRdsInstanceResponse) ProtoMessage()               {}
func (*CreateAwsRdsInstanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{47} }

func (m *CreateAwsRdsInstanceResponse) GetResult() *AwsRdsInstance {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadAwsRdsInstanceRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadAwsRdsInstanceRequest) Reset()                    { *m = ReadAwsRdsInstanceRequest{} }
func (m *ReadAwsRdsInstanceRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadAwsRdsInstanceRequest) ProtoMessage()               {}
func (*ReadAwsRdsInstanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{48} }

func (m *ReadAwsRdsInstanceRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadAwsRdsInstanceRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadAwsRdsInstanceResponse struct {
	Result *AwsRdsInstance `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadAwsRdsInstanceResponse) Reset()                    { *m = ReadAwsRdsInstanceResponse{} }
func (m *ReadAwsRdsInstanceResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadAwsRdsInstanceResponse) ProtoMessage()               {}
func (*ReadAwsRdsInstanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{49} }

func (m *ReadAwsRdsInstanceResponse) GetResult() *AwsRdsInstance {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateAwsRdsInstanceRequest struct {
	Payload *AwsRdsInstance             `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateAwsRdsInstanceRequest) Reset()                    { *m = UpdateAwsRdsInstanceRequest{} }
func (m *UpdateAwsRdsInstanceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAwsRdsInstanceRequest) ProtoMessage()               {}
func (*UpdateAwsRdsInstanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{50} }

func (m *UpdateAwsRdsInstanceRequest) GetPayload() *AwsRdsInstance {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateAwsRdsInstanceRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateAwsRdsInstanceResponse struct {
	Result *AwsRdsInstance `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateAwsRdsInstanceResponse) Reset()                    { *m = UpdateAwsRdsInstanceResponse{} }
func (m *UpdateAwsRdsInstanceResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateAwsRdsInstanceResponse) ProtoMessage()               {}
func (*UpdateAwsRdsInstanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{51} }

func (m *UpdateAwsRdsInstanceResponse) GetResult() *AwsRdsInstance {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteAwsRdsInstanceRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteAwsRdsInstanceRequest) Reset()                    { *m = DeleteAwsRdsInstanceRequest{} }
func (m *DeleteAwsRdsInstanceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAwsRdsInstanceRequest) ProtoMessage()               {}
func (*DeleteAwsRdsInstanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{52} }

func (m *DeleteAwsRdsInstanceRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteAwsRdsInstanceResponse struct {
}

func (m *DeleteAwsRdsInstanceResponse) Reset()                    { *m = DeleteAwsRdsInstanceResponse{} }
func (m *DeleteAwsRdsInstanceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteAwsRdsInstanceResponse) ProtoMessage()               {}
func (*DeleteAwsRdsInstanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{53} }

type ListAwsRdsInstanceRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListAwsRdsInstanceRequest) Reset()                    { *m = ListAwsRdsInstanceRequest{} }
func (m *ListAwsRdsInstanceRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAwsRdsInstanceRequest) ProtoMessage()               {}
func (*ListAwsRdsInstanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{54} }

func (m *ListAwsRdsInstanceRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListAwsRdsInstanceRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListAwsRdsInstanceRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListAwsRdsInstanceRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListAwsRdsInstancesResponse struct {
	Results []*AwsRdsInstance      `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListAwsRdsInstancesResponse) Reset()                    { *m = ListAwsRdsInstancesResponse{} }
func (m *ListAwsRdsInstancesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListAwsRdsInstancesResponse) ProtoMessage()               {}
func (*ListAwsRdsInstancesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{55} }

func (m *ListAwsRdsInstancesResponse) GetResults() []*AwsRdsInstance {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListAwsRdsInstancesResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// ------------------------------------------------------------------------
// Container represents a Docker Image that has been loaded to a Registry
// ------------------------------------------------------------------------
type Container struct {
	// The container identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the container
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the container
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The unique container name referenced helm charts
	ContainerName string `protobuf:"bytes,4,opt,name=container_name,json=containerName" json:"container_name,omitempty"`
	// The docker image repository (e.g. soheileizadi/cmdb-server)
	ImageRepo string `protobuf:"bytes,5,opt,name=image_repo,json=imageRepo" json:"image_repo,omitempty"`
	// The docker image tag (e.g. latest)
	ImageTag string `protobuf:"bytes,6,opt,name=image_tag,json=imageTag" json:"image_tag,omitempty"`
	// The image pull
	ImagePullPolicy string `protobuf:"bytes,7,opt,name=image_pull_policy,json=imagePullPolicy" json:"image_pull_policy,omitempty"`
	// The digest of the image to check integrity (e.g. digest: sha256:9bf4971079f0ddf3f4ed8681dc96c2610804007359643809165f94a95bc5c3b6)
	Digest string `protobuf:"bytes,8,opt,name=digest" json:"digest,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{56} }

func (m *Container) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Container) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Container) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Container) GetContainerName() string {
	if m != nil {
		return m.ContainerName
	}
	return ""
}

func (m *Container) GetImageRepo() string {
	if m != nil {
		return m.ImageRepo
	}
	return ""
}

func (m *Container) GetImageTag() string {
	if m != nil {
		return m.ImageTag
	}
	return ""
}

func (m *Container) GetImagePullPolicy() string {
	if m != nil {
		return m.ImagePullPolicy
	}
	return ""
}

func (m *Container) GetDigest() string {
	if m != nil {
		return m.Digest
	}
	return ""
}

type CreateContainerRequest struct {
	Payload *Container `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateContainerRequest) Reset()                    { *m = CreateContainerRequest{} }
func (m *CreateContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerRequest) ProtoMessage()               {}
func (*CreateContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{57} }

func (m *CreateContainerRequest) GetPayload() *Container {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateContainerResponse struct {
	Result *Container `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateContainerResponse) Reset()                    { *m = CreateContainerResponse{} }
func (m *CreateContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerResponse) ProtoMessage()               {}
func (*CreateContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{58} }

func (m *CreateContainerResponse) GetResult() *Container {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadContainerRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadContainerRequest) Reset()                    { *m = ReadContainerRequest{} }
func (m *ReadContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadContainerRequest) ProtoMessage()               {}
func (*ReadContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{59} }

func (m *ReadContainerRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadContainerRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadContainerResponse struct {
	Result *Container `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadContainerResponse) Reset()                    { *m = ReadContainerResponse{} }
func (m *ReadContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadContainerResponse) ProtoMessage()               {}
func (*ReadContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{60} }

func (m *ReadContainerResponse) GetResult() *Container {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateContainerRequest struct {
	Payload *Container                  `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateContainerRequest) Reset()                    { *m = UpdateContainerRequest{} }
func (m *UpdateContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateContainerRequest) ProtoMessage()               {}
func (*UpdateContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{61} }

func (m *UpdateContainerRequest) GetPayload() *Container {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateContainerRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateContainerResponse struct {
	Result *Container `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateContainerResponse) Reset()                    { *m = UpdateContainerResponse{} }
func (m *UpdateContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateContainerResponse) ProtoMessage()               {}
func (*UpdateContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{62} }

func (m *UpdateContainerResponse) GetResult() *Container {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteContainerRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteContainerRequest) Reset()                    { *m = DeleteContainerRequest{} }
func (m *DeleteContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteContainerRequest) ProtoMessage()               {}
func (*DeleteContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{63} }

func (m *DeleteContainerRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteContainerResponse struct {
}

func (m *DeleteContainerResponse) Reset()                    { *m = DeleteContainerResponse{} }
func (m *DeleteContainerResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteContainerResponse) ProtoMessage()               {}
func (*DeleteContainerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{64} }

type ListContainerRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListContainerRequest) Reset()                    { *m = ListContainerRequest{} }
func (m *ListContainerRequest) String() string            { return proto.CompactTextString(m) }
func (*ListContainerRequest) ProtoMessage()               {}
func (*ListContainerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{65} }

func (m *ListContainerRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListContainerRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListContainerRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListContainerRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListContainersResponse struct {
	Results []*Container           `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListContainersResponse) Reset()                    { *m = ListContainersResponse{} }
func (m *ListContainersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListContainersResponse) ProtoMessage()               {}
func (*ListContainersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{66} }

func (m *ListContainersResponse) GetResults() []*Container {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListContainersResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// ------------------------------------------------------
// Environment represents a particular AWS Region
// ------------------------------------------------------
type Environment struct {
	// The Environment identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the Environment
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the Environment
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Environment) Reset()                    { *m = Environment{} }
func (m *Environment) String() string            { return proto.CompactTextString(m) }
func (*Environment) ProtoMessage()               {}
func (*Environment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{67} }

func (m *Environment) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Environment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Environment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateEnvironmentRequest struct {
	Payload *Environment `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateEnvironmentRequest) Reset()                    { *m = CreateEnvironmentRequest{} }
func (m *CreateEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEnvironmentRequest) ProtoMessage()               {}
func (*CreateEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{68} }

func (m *CreateEnvironmentRequest) GetPayload() *Environment {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateEnvironmentResponse struct {
	Result *Environment `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateEnvironmentResponse) Reset()                    { *m = CreateEnvironmentResponse{} }
func (m *CreateEnvironmentResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateEnvironmentResponse) ProtoMessage()               {}
func (*CreateEnvironmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{69} }

func (m *CreateEnvironmentResponse) GetResult() *Environment {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadEnvironmentRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadEnvironmentRequest) Reset()                    { *m = ReadEnvironmentRequest{} }
func (m *ReadEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadEnvironmentRequest) ProtoMessage()               {}
func (*ReadEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{70} }

func (m *ReadEnvironmentRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadEnvironmentRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadEnvironmentResponse struct {
	Result *Environment `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadEnvironmentResponse) Reset()                    { *m = ReadEnvironmentResponse{} }
func (m *ReadEnvironmentResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadEnvironmentResponse) ProtoMessage()               {}
func (*ReadEnvironmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{71} }

func (m *ReadEnvironmentResponse) GetResult() *Environment {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateEnvironmentRequest struct {
	Payload *Environment                `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateEnvironmentRequest) Reset()                    { *m = UpdateEnvironmentRequest{} }
func (m *UpdateEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateEnvironmentRequest) ProtoMessage()               {}
func (*UpdateEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{72} }

func (m *UpdateEnvironmentRequest) GetPayload() *Environment {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateEnvironmentRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateEnvironmentResponse struct {
	Result *Environment `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateEnvironmentResponse) Reset()                    { *m = UpdateEnvironmentResponse{} }
func (m *UpdateEnvironmentResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateEnvironmentResponse) ProtoMessage()               {}
func (*UpdateEnvironmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{73} }

func (m *UpdateEnvironmentResponse) GetResult() *Environment {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteEnvironmentRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteEnvironmentRequest) Reset()                    { *m = DeleteEnvironmentRequest{} }
func (m *DeleteEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteEnvironmentRequest) ProtoMessage()               {}
func (*DeleteEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{74} }

func (m *DeleteEnvironmentRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteEnvironmentResponse struct {
}

func (m *DeleteEnvironmentResponse) Reset()                    { *m = DeleteEnvironmentResponse{} }
func (m *DeleteEnvironmentResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteEnvironmentResponse) ProtoMessage()               {}
func (*DeleteEnvironmentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{75} }

type ListEnvironmentRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListEnvironmentRequest) Reset()                    { *m = ListEnvironmentRequest{} }
func (m *ListEnvironmentRequest) String() string            { return proto.CompactTextString(m) }
func (*ListEnvironmentRequest) ProtoMessage()               {}
func (*ListEnvironmentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{76} }

func (m *ListEnvironmentRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListEnvironmentRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListEnvironmentRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListEnvironmentRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListEnvironmentsResponse struct {
	Results []*Environment         `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListEnvironmentsResponse) Reset()                    { *m = ListEnvironmentsResponse{} }
func (m *ListEnvironmentsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListEnvironmentsResponse) ProtoMessage()               {}
func (*ListEnvironmentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{77} }

func (m *ListEnvironmentsResponse) GetResults() []*Environment {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListEnvironmentsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// ------------------------------------------------------
// Manifest represents a particular AWS Region
// ------------------------------------------------------
type Manifest struct {
	// The Manifest identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the Manifest
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the Manifest
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *Manifest) Reset()                    { *m = Manifest{} }
func (m *Manifest) String() string            { return proto.CompactTextString(m) }
func (*Manifest) ProtoMessage()               {}
func (*Manifest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{78} }

func (m *Manifest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Manifest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Manifest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateManifestRequest struct {
	Payload *Manifest `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateManifestRequest) Reset()                    { *m = CreateManifestRequest{} }
func (m *CreateManifestRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateManifestRequest) ProtoMessage()               {}
func (*CreateManifestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{79} }

func (m *CreateManifestRequest) GetPayload() *Manifest {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateManifestResponse struct {
	Result *Manifest `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateManifestResponse) Reset()                    { *m = CreateManifestResponse{} }
func (m *CreateManifestResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateManifestResponse) ProtoMessage()               {}
func (*CreateManifestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{80} }

func (m *CreateManifestResponse) GetResult() *Manifest {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadManifestRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadManifestRequest) Reset()                    { *m = ReadManifestRequest{} }
func (m *ReadManifestRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadManifestRequest) ProtoMessage()               {}
func (*ReadManifestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{81} }

func (m *ReadManifestRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadManifestRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadManifestResponse struct {
	Result *Manifest `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadManifestResponse) Reset()                    { *m = ReadManifestResponse{} }
func (m *ReadManifestResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadManifestResponse) ProtoMessage()               {}
func (*ReadManifestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{82} }

func (m *ReadManifestResponse) GetResult() *Manifest {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateManifestRequest struct {
	Payload *Manifest                   `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateManifestRequest) Reset()                    { *m = UpdateManifestRequest{} }
func (m *UpdateManifestRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateManifestRequest) ProtoMessage()               {}
func (*UpdateManifestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{83} }

func (m *UpdateManifestRequest) GetPayload() *Manifest {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateManifestRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateManifestResponse struct {
	Result *Manifest `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateManifestResponse) Reset()                    { *m = UpdateManifestResponse{} }
func (m *UpdateManifestResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateManifestResponse) ProtoMessage()               {}
func (*UpdateManifestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{84} }

func (m *UpdateManifestResponse) GetResult() *Manifest {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteManifestRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteManifestRequest) Reset()                    { *m = DeleteManifestRequest{} }
func (m *DeleteManifestRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteManifestRequest) ProtoMessage()               {}
func (*DeleteManifestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{85} }

func (m *DeleteManifestRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteManifestResponse struct {
}

func (m *DeleteManifestResponse) Reset()                    { *m = DeleteManifestResponse{} }
func (m *DeleteManifestResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteManifestResponse) ProtoMessage()               {}
func (*DeleteManifestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{86} }

type ListManifestRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListManifestRequest) Reset()                    { *m = ListManifestRequest{} }
func (m *ListManifestRequest) String() string            { return proto.CompactTextString(m) }
func (*ListManifestRequest) ProtoMessage()               {}
func (*ListManifestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{87} }

func (m *ListManifestRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListManifestRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListManifestRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListManifestRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListManifestsResponse struct {
	Results []*Manifest            `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListManifestsResponse) Reset()                    { *m = ListManifestsResponse{} }
func (m *ListManifestsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListManifestsResponse) ProtoMessage()               {}
func (*ListManifestsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{88} }

func (m *ListManifestsResponse) GetResults() []*Manifest {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListManifestsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// --------------------------------------------------------
// Secret represents confidential data stored in the Vault
// --------------------------------------------------------
type Secret struct {
	// The secret identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the container
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the container
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The type of secret (e.g. opaque, or tls)
	Type string `protobuf:"bytes,4,opt,name=type" json:"type,omitempty"`
	// The key value of secret (note: value is stored on kubernetes secret
	Key string `protobuf:"bytes,5,opt,name=key" json:"key,omitempty"`
	// The vault the secret belongs to.
	VaultId *atlas_rpc.Identifier `protobuf:"bytes,6,opt,name=vault_id,json=vaultId" json:"vault_id,omitempty"`
	// The AWS RDS Instance Id if this is a database password
	AwsRdsInstanceId *atlas_rpc.Identifier `protobuf:"bytes,7,opt,name=aws_rds_instance_id,json=awsRdsInstanceId" json:"aws_rds_instance_id,omitempty"`
}

func (m *Secret) Reset()                    { *m = Secret{} }
func (m *Secret) String() string            { return proto.CompactTextString(m) }
func (*Secret) ProtoMessage()               {}
func (*Secret) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{89} }

func (m *Secret) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Secret) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Secret) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Secret) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Secret) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Secret) GetVaultId() *atlas_rpc.Identifier {
	if m != nil {
		return m.VaultId
	}
	return nil
}

func (m *Secret) GetAwsRdsInstanceId() *atlas_rpc.Identifier {
	if m != nil {
		return m.AwsRdsInstanceId
	}
	return nil
}

type CreateSecretRequest struct {
	Payload *Secret `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateSecretRequest) Reset()                    { *m = CreateSecretRequest{} }
func (m *CreateSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateSecretRequest) ProtoMessage()               {}
func (*CreateSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{90} }

func (m *CreateSecretRequest) GetPayload() *Secret {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateSecretResponse struct {
	Result *Secret `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateSecretResponse) Reset()                    { *m = CreateSecretResponse{} }
func (m *CreateSecretResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateSecretResponse) ProtoMessage()               {}
func (*CreateSecretResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{91} }

func (m *CreateSecretResponse) GetResult() *Secret {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadSecretRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadSecretRequest) Reset()                    { *m = ReadSecretRequest{} }
func (m *ReadSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadSecretRequest) ProtoMessage()               {}
func (*ReadSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{92} }

func (m *ReadSecretRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadSecretRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadSecretResponse struct {
	Result *Secret `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadSecretResponse) Reset()                    { *m = ReadSecretResponse{} }
func (m *ReadSecretResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadSecretResponse) ProtoMessage()               {}
func (*ReadSecretResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{93} }

func (m *ReadSecretResponse) GetResult() *Secret {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateSecretRequest struct {
	Payload *Secret                     `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateSecretRequest) Reset()                    { *m = UpdateSecretRequest{} }
func (m *UpdateSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateSecretRequest) ProtoMessage()               {}
func (*UpdateSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{94} }

func (m *UpdateSecretRequest) GetPayload() *Secret {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateSecretRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateSecretResponse struct {
	Result *Secret `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateSecretResponse) Reset()                    { *m = UpdateSecretResponse{} }
func (m *UpdateSecretResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateSecretResponse) ProtoMessage()               {}
func (*UpdateSecretResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{95} }

func (m *UpdateSecretResponse) GetResult() *Secret {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteSecretRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteSecretRequest) Reset()                    { *m = DeleteSecretRequest{} }
func (m *DeleteSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteSecretRequest) ProtoMessage()               {}
func (*DeleteSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{96} }

func (m *DeleteSecretRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteSecretResponse struct {
}

func (m *DeleteSecretResponse) Reset()                    { *m = DeleteSecretResponse{} }
func (m *DeleteSecretResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteSecretResponse) ProtoMessage()               {}
func (*DeleteSecretResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{97} }

type ListSecretRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListSecretRequest) Reset()                    { *m = ListSecretRequest{} }
func (m *ListSecretRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSecretRequest) ProtoMessage()               {}
func (*ListSecretRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{98} }

func (m *ListSecretRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListSecretRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListSecretRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListSecretRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListSecretsResponse struct {
	Results []*Secret              `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListSecretsResponse) Reset()                    { *m = ListSecretsResponse{} }
func (m *ListSecretsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSecretsResponse) ProtoMessage()               {}
func (*ListSecretsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{99} }

func (m *ListSecretsResponse) GetResults() []*Secret {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListSecretsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// ---------------------------------------------------------------------
// Artifact represents an element built by CI (e.g. resolved manifest)
// ---------------------------------------------------------------------
type Artifact struct {
	// The Artifact identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the Artifact
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the Artifact
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// The repo which stores the Artifact
	Repo string `protobuf:"bytes,4,opt,name=repo" json:"repo,omitempty"`
	// The commit Id of the Artifact in repo
	Commit string `protobuf:"bytes,5,opt,name=commit" json:"commit,omitempty"`
	// The version tag the artifact belongs to.
	VersionTagId *atlas_rpc.Identifier `protobuf:"bytes,6,opt,name=version_tag_id,json=versionTagId" json:"version_tag_id,omitempty"`
}

func (m *Artifact) Reset()                    { *m = Artifact{} }
func (m *Artifact) String() string            { return proto.CompactTextString(m) }
func (*Artifact) ProtoMessage()               {}
func (*Artifact) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{100} }

func (m *Artifact) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Artifact) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Artifact) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Artifact) GetRepo() string {
	if m != nil {
		return m.Repo
	}
	return ""
}

func (m *Artifact) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *Artifact) GetVersionTagId() *atlas_rpc.Identifier {
	if m != nil {
		return m.VersionTagId
	}
	return nil
}

type CreateArtifactRequest struct {
	Payload *Artifact `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateArtifactRequest) Reset()                    { *m = CreateArtifactRequest{} }
func (m *CreateArtifactRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateArtifactRequest) ProtoMessage()               {}
func (*CreateArtifactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{101} }

func (m *CreateArtifactRequest) GetPayload() *Artifact {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateArtifactResponse struct {
	Result *Artifact `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateArtifactResponse) Reset()                    { *m = CreateArtifactResponse{} }
func (m *CreateArtifactResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateArtifactResponse) ProtoMessage()               {}
func (*CreateArtifactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{102} }

func (m *CreateArtifactResponse) GetResult() *Artifact {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadArtifactRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadArtifactRequest) Reset()                    { *m = ReadArtifactRequest{} }
func (m *ReadArtifactRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadArtifactRequest) ProtoMessage()               {}
func (*ReadArtifactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{103} }

func (m *ReadArtifactRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadArtifactRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadArtifactResponse struct {
	Result *Artifact `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadArtifactResponse) Reset()                    { *m = ReadArtifactResponse{} }
func (m *ReadArtifactResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadArtifactResponse) ProtoMessage()               {}
func (*ReadArtifactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{104} }

func (m *ReadArtifactResponse) GetResult() *Artifact {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateArtifactRequest struct {
	Payload *Artifact                   `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateArtifactRequest) Reset()                    { *m = UpdateArtifactRequest{} }
func (m *UpdateArtifactRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateArtifactRequest) ProtoMessage()               {}
func (*UpdateArtifactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{105} }

func (m *UpdateArtifactRequest) GetPayload() *Artifact {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateArtifactRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateArtifactResponse struct {
	Result *Artifact `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateArtifactResponse) Reset()                    { *m = UpdateArtifactResponse{} }
func (m *UpdateArtifactResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateArtifactResponse) ProtoMessage()               {}
func (*UpdateArtifactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{106} }

func (m *UpdateArtifactResponse) GetResult() *Artifact {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteArtifactRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteArtifactRequest) Reset()                    { *m = DeleteArtifactRequest{} }
func (m *DeleteArtifactRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteArtifactRequest) ProtoMessage()               {}
func (*DeleteArtifactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{107} }

func (m *DeleteArtifactRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteArtifactResponse struct {
}

func (m *DeleteArtifactResponse) Reset()                    { *m = DeleteArtifactResponse{} }
func (m *DeleteArtifactResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteArtifactResponse) ProtoMessage()               {}
func (*DeleteArtifactResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{108} }

type ListArtifactRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListArtifactRequest) Reset()                    { *m = ListArtifactRequest{} }
func (m *ListArtifactRequest) String() string            { return proto.CompactTextString(m) }
func (*ListArtifactRequest) ProtoMessage()               {}
func (*ListArtifactRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{109} }

func (m *ListArtifactRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListArtifactRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListArtifactRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListArtifactRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListArtifactsResponse struct {
	Results []*Artifact            `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListArtifactsResponse) Reset()                    { *m = ListArtifactsResponse{} }
func (m *ListArtifactsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListArtifactsResponse) ProtoMessage()               {}
func (*ListArtifactsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{110} }

func (m *ListArtifactsResponse) GetResults() []*Artifact {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListArtifactsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// ------------------------------------------------------
// AwsService represents a particular AWS Region
// ------------------------------------------------------
type AwsService struct {
	// The AwsService identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the AwsService
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the AwsService
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *AwsService) Reset()                    { *m = AwsService{} }
func (m *AwsService) String() string            { return proto.CompactTextString(m) }
func (*AwsService) ProtoMessage()               {}
func (*AwsService) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{111} }

func (m *AwsService) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *AwsService) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AwsService) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateAwsServiceRequest struct {
	Payload *AwsService `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateAwsServiceRequest) Reset()                    { *m = CreateAwsServiceRequest{} }
func (m *CreateAwsServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAwsServiceRequest) ProtoMessage()               {}
func (*CreateAwsServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{112} }

func (m *CreateAwsServiceRequest) GetPayload() *AwsService {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateAwsServiceResponse struct {
	Result *AwsService `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateAwsServiceResponse) Reset()                    { *m = CreateAwsServiceResponse{} }
func (m *CreateAwsServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateAwsServiceResponse) ProtoMessage()               {}
func (*CreateAwsServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{113} }

func (m *CreateAwsServiceResponse) GetResult() *AwsService {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadAwsServiceRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadAwsServiceRequest) Reset()                    { *m = ReadAwsServiceRequest{} }
func (m *ReadAwsServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadAwsServiceRequest) ProtoMessage()               {}
func (*ReadAwsServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{114} }

func (m *ReadAwsServiceRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadAwsServiceRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadAwsServiceResponse struct {
	Result *AwsService `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadAwsServiceResponse) Reset()                    { *m = ReadAwsServiceResponse{} }
func (m *ReadAwsServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadAwsServiceResponse) ProtoMessage()               {}
func (*ReadAwsServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{115} }

func (m *ReadAwsServiceResponse) GetResult() *AwsService {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateAwsServiceRequest struct {
	Payload *AwsService                 `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateAwsServiceRequest) Reset()                    { *m = UpdateAwsServiceRequest{} }
func (m *UpdateAwsServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAwsServiceRequest) ProtoMessage()               {}
func (*UpdateAwsServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{116} }

func (m *UpdateAwsServiceRequest) GetPayload() *AwsService {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateAwsServiceRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateAwsServiceResponse struct {
	Result *AwsService `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateAwsServiceResponse) Reset()                    { *m = UpdateAwsServiceResponse{} }
func (m *UpdateAwsServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateAwsServiceResponse) ProtoMessage()               {}
func (*UpdateAwsServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{117} }

func (m *UpdateAwsServiceResponse) GetResult() *AwsService {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteAwsServiceRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteAwsServiceRequest) Reset()                    { *m = DeleteAwsServiceRequest{} }
func (m *DeleteAwsServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAwsServiceRequest) ProtoMessage()               {}
func (*DeleteAwsServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{118} }

func (m *DeleteAwsServiceRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteAwsServiceResponse struct {
}

func (m *DeleteAwsServiceResponse) Reset()                    { *m = DeleteAwsServiceResponse{} }
func (m *DeleteAwsServiceResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteAwsServiceResponse) ProtoMessage()               {}
func (*DeleteAwsServiceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{119} }

type ListAwsServiceRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListAwsServiceRequest) Reset()                    { *m = ListAwsServiceRequest{} }
func (m *ListAwsServiceRequest) String() string            { return proto.CompactTextString(m) }
func (*ListAwsServiceRequest) ProtoMessage()               {}
func (*ListAwsServiceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{120} }

func (m *ListAwsServiceRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListAwsServiceRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListAwsServiceRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListAwsServiceRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListAwsServicesResponse struct {
	Results []*AwsService          `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListAwsServicesResponse) Reset()                    { *m = ListAwsServicesResponse{} }
func (m *ListAwsServicesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListAwsServicesResponse) ProtoMessage()               {}
func (*ListAwsServicesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{121} }

func (m *ListAwsServicesResponse) GetResults() []*AwsService {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListAwsServicesResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// ---------------------------------------------------------------------
// Deployment represents a particular Application running on Kubernetes
// ---------------------------------------------------------------------
type Deployment struct {
	// The Deployment identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the Deployment
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the Deployment
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	// Artifact for resolved manifest used for the Application
	Artifact *Artifact `protobuf:"bytes,4,opt,name=artifact" json:"artifact,omitempty"`
	// Reference to Artifact
	ArtifactId *atlas_rpc.Identifier `protobuf:"bytes,5,opt,name=artifact_id,json=artifactId" json:"artifact_id,omitempty"`
	// Kubernetes Cluster on which the Application is deployed
	KubeCluster *KubeCluster `protobuf:"bytes,6,opt,name=kube_cluster,json=kubeCluster" json:"kube_cluster,omitempty"`
	// Reference to Kubernetes Cluster
	KubeClusterId *atlas_rpc.Identifier `protobuf:"bytes,7,opt,name=kube_cluster_id,json=kubeClusterId" json:"kube_cluster_id,omitempty"`
}

func (m *Deployment) Reset()                    { *m = Deployment{} }
func (m *Deployment) String() string            { return proto.CompactTextString(m) }
func (*Deployment) ProtoMessage()               {}
func (*Deployment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{122} }

func (m *Deployment) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Deployment) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Deployment) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Deployment) GetArtifact() *Artifact {
	if m != nil {
		return m.Artifact
	}
	return nil
}

func (m *Deployment) GetArtifactId() *atlas_rpc.Identifier {
	if m != nil {
		return m.ArtifactId
	}
	return nil
}

func (m *Deployment) GetKubeCluster() *KubeCluster {
	if m != nil {
		return m.KubeCluster
	}
	return nil
}

func (m *Deployment) GetKubeClusterId() *atlas_rpc.Identifier {
	if m != nil {
		return m.KubeClusterId
	}
	return nil
}

type CreateDeploymentRequest struct {
	Payload *Deployment `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateDeploymentRequest) Reset()                    { *m = CreateDeploymentRequest{} }
func (m *CreateDeploymentRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDeploymentRequest) ProtoMessage()               {}
func (*CreateDeploymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{123} }

func (m *CreateDeploymentRequest) GetPayload() *Deployment {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateDeploymentResponse struct {
	Result *Deployment `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateDeploymentResponse) Reset()                    { *m = CreateDeploymentResponse{} }
func (m *CreateDeploymentResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateDeploymentResponse) ProtoMessage()               {}
func (*CreateDeploymentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{124} }

func (m *CreateDeploymentResponse) GetResult() *Deployment {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadDeploymentRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadDeploymentRequest) Reset()                    { *m = ReadDeploymentRequest{} }
func (m *ReadDeploymentRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadDeploymentRequest) ProtoMessage()               {}
func (*ReadDeploymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{125} }

func (m *ReadDeploymentRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadDeploymentRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadDeploymentResponse struct {
	Result *Deployment `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadDeploymentResponse) Reset()                    { *m = ReadDeploymentResponse{} }
func (m *ReadDeploymentResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadDeploymentResponse) ProtoMessage()               {}
func (*ReadDeploymentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{126} }

func (m *ReadDeploymentResponse) GetResult() *Deployment {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateDeploymentRequest struct {
	Payload *Deployment                 `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateDeploymentRequest) Reset()                    { *m = UpdateDeploymentRequest{} }
func (m *UpdateDeploymentRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeploymentRequest) ProtoMessage()               {}
func (*UpdateDeploymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{127} }

func (m *UpdateDeploymentRequest) GetPayload() *Deployment {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateDeploymentRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateDeploymentResponse struct {
	Result *Deployment `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateDeploymentResponse) Reset()                    { *m = UpdateDeploymentResponse{} }
func (m *UpdateDeploymentResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateDeploymentResponse) ProtoMessage()               {}
func (*UpdateDeploymentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{128} }

func (m *UpdateDeploymentResponse) GetResult() *Deployment {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteDeploymentRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteDeploymentRequest) Reset()                    { *m = DeleteDeploymentRequest{} }
func (m *DeleteDeploymentRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeploymentRequest) ProtoMessage()               {}
func (*DeleteDeploymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{129} }

func (m *DeleteDeploymentRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteDeploymentResponse struct {
}

func (m *DeleteDeploymentResponse) Reset()                    { *m = DeleteDeploymentResponse{} }
func (m *DeleteDeploymentResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteDeploymentResponse) ProtoMessage()               {}
func (*DeleteDeploymentResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{130} }

type ListDeploymentRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListDeploymentRequest) Reset()                    { *m = ListDeploymentRequest{} }
func (m *ListDeploymentRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDeploymentRequest) ProtoMessage()               {}
func (*ListDeploymentRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{131} }

func (m *ListDeploymentRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListDeploymentRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListDeploymentRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListDeploymentRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListDeploymentsResponse struct {
	Results []*Deployment          `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListDeploymentsResponse) Reset()                    { *m = ListDeploymentsResponse{} }
func (m *ListDeploymentsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListDeploymentsResponse) ProtoMessage()               {}
func (*ListDeploymentsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{132} }

func (m *ListDeploymentsResponse) GetResults() []*Deployment {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListDeploymentsResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

// ------------------------------------------------------
// KubeCluster represents a particular AWS Region
// ------------------------------------------------------
type KubeCluster struct {
	// The KubeCluster identifier.
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The name of the KubeCluster
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// The description of the KubeCluster
	Description string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
}

func (m *KubeCluster) Reset()                    { *m = KubeCluster{} }
func (m *KubeCluster) String() string            { return proto.CompactTextString(m) }
func (*KubeCluster) ProtoMessage()               {}
func (*KubeCluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{133} }

func (m *KubeCluster) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *KubeCluster) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *KubeCluster) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type CreateKubeClusterRequest struct {
	Payload *KubeCluster `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
}

func (m *CreateKubeClusterRequest) Reset()                    { *m = CreateKubeClusterRequest{} }
func (m *CreateKubeClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateKubeClusterRequest) ProtoMessage()               {}
func (*CreateKubeClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{134} }

func (m *CreateKubeClusterRequest) GetPayload() *KubeCluster {
	if m != nil {
		return m.Payload
	}
	return nil
}

type CreateKubeClusterResponse struct {
	Result *KubeCluster `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *CreateKubeClusterResponse) Reset()                    { *m = CreateKubeClusterResponse{} }
func (m *CreateKubeClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateKubeClusterResponse) ProtoMessage()               {}
func (*CreateKubeClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{135} }

func (m *CreateKubeClusterResponse) GetResult() *KubeCluster {
	if m != nil {
		return m.Result
	}
	return nil
}

type ReadKubeClusterRequest struct {
	Id     *atlas_rpc.Identifier        `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Fields *infoblox_api.FieldSelection `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *ReadKubeClusterRequest) Reset()                    { *m = ReadKubeClusterRequest{} }
func (m *ReadKubeClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadKubeClusterRequest) ProtoMessage()               {}
func (*ReadKubeClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{136} }

func (m *ReadKubeClusterRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ReadKubeClusterRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

type ReadKubeClusterResponse struct {
	Result *KubeCluster `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *ReadKubeClusterResponse) Reset()                    { *m = ReadKubeClusterResponse{} }
func (m *ReadKubeClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*ReadKubeClusterResponse) ProtoMessage()               {}
func (*ReadKubeClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{137} }

func (m *ReadKubeClusterResponse) GetResult() *KubeCluster {
	if m != nil {
		return m.Result
	}
	return nil
}

type UpdateKubeClusterRequest struct {
	Payload *KubeCluster                `protobuf:"bytes,1,opt,name=payload" json:"payload,omitempty"`
	Fields  *google_protobuf1.FieldMask `protobuf:"bytes,2,opt,name=fields" json:"fields,omitempty"`
}

func (m *UpdateKubeClusterRequest) Reset()                    { *m = UpdateKubeClusterRequest{} }
func (m *UpdateKubeClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateKubeClusterRequest) ProtoMessage()               {}
func (*UpdateKubeClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{138} }

func (m *UpdateKubeClusterRequest) GetPayload() *KubeCluster {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *UpdateKubeClusterRequest) GetFields() *google_protobuf1.FieldMask {
	if m != nil {
		return m.Fields
	}
	return nil
}

type UpdateKubeClusterResponse struct {
	Result *KubeCluster `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *UpdateKubeClusterResponse) Reset()                    { *m = UpdateKubeClusterResponse{} }
func (m *UpdateKubeClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateKubeClusterResponse) ProtoMessage()               {}
func (*UpdateKubeClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{139} }

func (m *UpdateKubeClusterResponse) GetResult() *KubeCluster {
	if m != nil {
		return m.Result
	}
	return nil
}

type DeleteKubeClusterRequest struct {
	Id *atlas_rpc.Identifier `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *DeleteKubeClusterRequest) Reset()                    { *m = DeleteKubeClusterRequest{} }
func (m *DeleteKubeClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteKubeClusterRequest) ProtoMessage()               {}
func (*DeleteKubeClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{140} }

func (m *DeleteKubeClusterRequest) GetId() *atlas_rpc.Identifier {
	if m != nil {
		return m.Id
	}
	return nil
}

type DeleteKubeClusterResponse struct {
}

func (m *DeleteKubeClusterResponse) Reset()                    { *m = DeleteKubeClusterResponse{} }
func (m *DeleteKubeClusterResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteKubeClusterResponse) ProtoMessage()               {}
func (*DeleteKubeClusterResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{141} }

type ListKubeClusterRequest struct {
	Filter  *infoblox_api.Filtering      `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	OrderBy *infoblox_api.Sorting        `protobuf:"bytes,2,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	Fields  *infoblox_api.FieldSelection `protobuf:"bytes,3,opt,name=fields" json:"fields,omitempty"`
	Paging  *infoblox_api.Pagination     `protobuf:"bytes,4,opt,name=paging" json:"paging,omitempty"`
}

func (m *ListKubeClusterRequest) Reset()                    { *m = ListKubeClusterRequest{} }
func (m *ListKubeClusterRequest) String() string            { return proto.CompactTextString(m) }
func (*ListKubeClusterRequest) ProtoMessage()               {}
func (*ListKubeClusterRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{142} }

func (m *ListKubeClusterRequest) GetFilter() *infoblox_api.Filtering {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *ListKubeClusterRequest) GetOrderBy() *infoblox_api.Sorting {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *ListKubeClusterRequest) GetFields() *infoblox_api.FieldSelection {
	if m != nil {
		return m.Fields
	}
	return nil
}

func (m *ListKubeClusterRequest) GetPaging() *infoblox_api.Pagination {
	if m != nil {
		return m.Paging
	}
	return nil
}

type ListKubeClustersResponse struct {
	Results []*KubeCluster         `protobuf:"bytes,1,rep,name=results" json:"results,omitempty"`
	Page    *infoblox_api.PageInfo `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
}

func (m *ListKubeClustersResponse) Reset()                    { *m = ListKubeClustersResponse{} }
func (m *ListKubeClustersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListKubeClustersResponse) ProtoMessage()               {}
func (*ListKubeClustersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{143} }

func (m *ListKubeClustersResponse) GetResults() []*KubeCluster {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ListKubeClustersResponse) GetPage() *infoblox_api.PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func init() {
	proto.RegisterType((*VersionResponse)(nil), "api.cmdb.VersionResponse")
	proto.RegisterType((*Region)(nil), "api.cmdb.Region")
	proto.RegisterType((*CreateRegionRequest)(nil), "api.cmdb.CreateRegionRequest")
	proto.RegisterType((*CreateRegionResponse)(nil), "api.cmdb.CreateRegionResponse")
	proto.RegisterType((*ReadRegionRequest)(nil), "api.cmdb.ReadRegionRequest")
	proto.RegisterType((*ReadRegionResponse)(nil), "api.cmdb.ReadRegionResponse")
	proto.RegisterType((*UpdateRegionRequest)(nil), "api.cmdb.UpdateRegionRequest")
	proto.RegisterType((*UpdateRegionResponse)(nil), "api.cmdb.UpdateRegionResponse")
	proto.RegisterType((*DeleteRegionRequest)(nil), "api.cmdb.DeleteRegionRequest")
	proto.RegisterType((*DeleteRegionResponse)(nil), "api.cmdb.DeleteRegionResponse")
	proto.RegisterType((*ListRegionRequest)(nil), "api.cmdb.ListRegionRequest")
	proto.RegisterType((*ListRegionsResponse)(nil), "api.cmdb.ListRegionsResponse")
	proto.RegisterType((*Vault)(nil), "api.cmdb.Vault")
	proto.RegisterType((*CreateVaultRequest)(nil), "api.cmdb.CreateVaultRequest")
	proto.RegisterType((*CreateVaultResponse)(nil), "api.cmdb.CreateVaultResponse")
	proto.RegisterType((*ReadVaultRequest)(nil), "api.cmdb.ReadVaultRequest")
	proto.RegisterType((*ReadVaultResponse)(nil), "api.cmdb.ReadVaultResponse")
	proto.RegisterType((*UpdateVaultRequest)(nil), "api.cmdb.UpdateVaultRequest")
	proto.RegisterType((*UpdateVaultResponse)(nil), "api.cmdb.UpdateVaultResponse")
	proto.RegisterType((*DeleteVaultRequest)(nil), "api.cmdb.DeleteVaultRequest")
	proto.RegisterType((*DeleteVaultResponse)(nil), "api.cmdb.DeleteVaultResponse")
	proto.RegisterType((*ListVaultRequest)(nil), "api.cmdb.ListVaultRequest")
	proto.RegisterType((*ListVaultsResponse)(nil), "api.cmdb.ListVaultsResponse")
	proto.RegisterType((*VersionTag)(nil), "api.cmdb.VersionTag")
	proto.RegisterType((*CreateVersionTagRequest)(nil), "api.cmdb.CreateVersionTagRequest")
	proto.RegisterType((*CreateVersionTagResponse)(nil), "api.cmdb.CreateVersionTagResponse")
	proto.RegisterType((*ReadVersionTagRequest)(nil), "api.cmdb.ReadVersionTagRequest")
	proto.RegisterType((*ReadVersionTagResponse)(nil), "api.cmdb.ReadVersionTagResponse")
	proto.RegisterType((*UpdateVersionTagRequest)(nil), "api.cmdb.UpdateVersionTagRequest")
	proto.RegisterType((*UpdateVersionTagResponse)(nil), "api.cmdb.UpdateVersionTagResponse")
	proto.RegisterType((*DeleteVersionTagRequest)(nil), "api.cmdb.DeleteVersionTagRequest")
	proto.RegisterType((*DeleteVersionTagResponse)(nil), "api.cmdb.DeleteVersionTagResponse")
	proto.RegisterType((*ListVersionTagRequest)(nil), "api.cmdb.ListVersionTagRequest")
	proto.RegisterType((*ListVersionTagsResponse)(nil), "api.cmdb.ListVersionTagsResponse")
	proto.RegisterType((*Application)(nil), "api.cmdb.Application")
	proto.RegisterType((*CreateApplicationRequest)(nil), "api.cmdb.CreateApplicationRequest")
	proto.RegisterType((*CreateApplicationResponse)(nil), "api.cmdb.CreateApplicationResponse")
	proto.RegisterType((*ReadApplicationRequest)(nil), "api.cmdb.ReadApplicationRequest")
	proto.RegisterType((*ReadApplicationResponse)(nil), "api.cmdb.ReadApplicationResponse")
	proto.RegisterType((*UpdateApplicationRequest)(nil), "api.cmdb.UpdateApplicationRequest")
	proto.RegisterType((*UpdateApplicationResponse)(nil), "api.cmdb.UpdateApplicationResponse")
	proto.RegisterType((*DeleteApplicationRequest)(nil), "api.cmdb.DeleteApplicationRequest")
	proto.RegisterType((*DeleteApplicationResponse)(nil), "api.cmdb.DeleteApplicationResponse")
	proto.RegisterType((*ListApplicationRequest)(nil), "api.cmdb.ListApplicationRequest")
	proto.RegisterType((*ListApplicationsResponse)(nil), "api.cmdb.ListApplicationsResponse")
	proto.RegisterType((*AwsRdsInstance)(nil), "api.cmdb.AwsRdsInstance")
	proto.RegisterType((*CreateAwsRdsInstanceRequest)(nil), "api.cmdb.CreateAwsRdsInstanceRequest")
	proto.RegisterType((*CreateAwsRdsInstanceResponse)(nil), "api.cmdb.CreateAwsRdsInstanceResponse")
	proto.RegisterType((*ReadAwsRdsInstanceRequest)(nil), "api.cmdb.ReadAwsRdsInstanceRequest")
	proto.RegisterType((*ReadAwsRdsInstanceResponse)(nil), "api.cmdb.ReadAwsRdsInstanceResponse")
	proto.RegisterType((*UpdateAwsRdsInstanceRequest)(nil), "api.cmdb.UpdateAwsRdsInstanceRequest")
	proto.RegisterType((*UpdateAwsRdsInstanceResponse)(nil), "api.cmdb.UpdateAwsRdsInstanceResponse")
	proto.RegisterType((*DeleteAwsRdsInstanceRequest)(nil), "api.cmdb.DeleteAwsRdsInstanceRequest")
	proto.RegisterType((*DeleteAwsRdsInstanceResponse)(nil), "api.cmdb.DeleteAwsRdsInstanceResponse")
	proto.RegisterType((*ListAwsRdsInstanceRequest)(nil), "api.cmdb.ListAwsRdsInstanceRequest")
	proto.RegisterType((*ListAwsRdsInstancesResponse)(nil), "api.cmdb.ListAwsRdsInstancesResponse")
	proto.RegisterType((*Container)(nil), "api.cmdb.Container")
	proto.RegisterType((*CreateContainerRequest)(nil), "api.cmdb.CreateContainerRequest")
	proto.RegisterType((*CreateContainerResponse)(nil), "api.cmdb.CreateContainerResponse")
	proto.RegisterType((*ReadContainerRequest)(nil), "api.cmdb.ReadContainerRequest")
	proto.RegisterType((*ReadContainerResponse)(nil), "api.cmdb.ReadContainerResponse")
	proto.RegisterType((*UpdateContainerRequest)(nil), "api.cmdb.UpdateContainerRequest")
	proto.RegisterType((*UpdateContainerResponse)(nil), "api.cmdb.UpdateContainerResponse")
	proto.RegisterType((*DeleteContainerRequest)(nil), "api.cmdb.DeleteContainerRequest")
	proto.RegisterType((*DeleteContainerResponse)(nil), "api.cmdb.DeleteContainerResponse")
	proto.RegisterType((*ListContainerRequest)(nil), "api.cmdb.ListContainerRequest")
	proto.RegisterType((*ListContainersResponse)(nil), "api.cmdb.ListContainersResponse")
	proto.RegisterType((*Environment)(nil), "api.cmdb.Environment")
	proto.RegisterType((*CreateEnvironmentRequest)(nil), "api.cmdb.CreateEnvironmentRequest")
	proto.RegisterType((*CreateEnvironmentResponse)(nil), "api.cmdb.CreateEnvironmentResponse")
	proto.RegisterType((*ReadEnvironmentRequest)(nil), "api.cmdb.ReadEnvironmentRequest")
	proto.RegisterType((*ReadEnvironmentResponse)(nil), "api.cmdb.ReadEnvironmentResponse")
	proto.RegisterType((*UpdateEnvironmentRequest)(nil), "api.cmdb.UpdateEnvironmentRequest")
	proto.RegisterType((*UpdateEnvironmentResponse)(nil), "api.cmdb.UpdateEnvironmentResponse")
	proto.RegisterType((*DeleteEnvironmentRequest)(nil), "api.cmdb.DeleteEnvironmentRequest")
	proto.RegisterType((*DeleteEnvironmentResponse)(nil), "api.cmdb.DeleteEnvironmentResponse")
	proto.RegisterType((*ListEnvironmentRequest)(nil), "api.cmdb.ListEnvironmentRequest")
	proto.RegisterType((*ListEnvironmentsResponse)(nil), "api.cmdb.ListEnvironmentsResponse")
	proto.RegisterType((*Manifest)(nil), "api.cmdb.Manifest")
	proto.RegisterType((*CreateManifestRequest)(nil), "api.cmdb.CreateManifestRequest")
	proto.RegisterType((*CreateManifestResponse)(nil), "api.cmdb.CreateManifestResponse")
	proto.RegisterType((*ReadManifestRequest)(nil), "api.cmdb.ReadManifestRequest")
	proto.RegisterType((*ReadManifestResponse)(nil), "api.cmdb.ReadManifestResponse")
	proto.RegisterType((*UpdateManifestRequest)(nil), "api.cmdb.UpdateManifestRequest")
	proto.RegisterType((*UpdateManifestResponse)(nil), "api.cmdb.UpdateManifestResponse")
	proto.RegisterType((*DeleteManifestRequest)(nil), "api.cmdb.DeleteManifestRequest")
	proto.RegisterType((*DeleteManifestResponse)(nil), "api.cmdb.DeleteManifestResponse")
	proto.RegisterType((*ListManifestRequest)(nil), "api.cmdb.ListManifestRequest")
	proto.RegisterType((*ListManifestsResponse)(nil), "api.cmdb.ListManifestsResponse")
	proto.RegisterType((*Secret)(nil), "api.cmdb.Secret")
	proto.RegisterType((*CreateSecretRequest)(nil), "api.cmdb.CreateSecretRequest")
	proto.RegisterType((*CreateSecretResponse)(nil), "api.cmdb.CreateSecretResponse")
	proto.RegisterType((*ReadSecretRequest)(nil), "api.cmdb.ReadSecretRequest")
	proto.RegisterType((*ReadSecretResponse)(nil), "api.cmdb.ReadSecretResponse")
	proto.RegisterType((*UpdateSecretRequest)(nil), "api.cmdb.UpdateSecretRequest")
	proto.RegisterType((*UpdateSecretResponse)(nil), "api.cmdb.UpdateSecretResponse")
	proto.RegisterType((*DeleteSecretRequest)(nil), "api.cmdb.DeleteSecretRequest")
	proto.RegisterType((*DeleteSecretResponse)(nil), "api.cmdb.DeleteSecretResponse")
	proto.RegisterType((*ListSecretRequest)(nil), "api.cmdb.ListSecretRequest")
	proto.RegisterType((*ListSecretsResponse)(nil), "api.cmdb.ListSecretsResponse")
	proto.RegisterType((*Artifact)(nil), "api.cmdb.Artifact")
	proto.RegisterType((*CreateArtifactRequest)(nil), "api.cmdb.CreateArtifactRequest")
	proto.RegisterType((*CreateArtifactResponse)(nil), "api.cmdb.CreateArtifactResponse")
	proto.RegisterType((*ReadArtifactRequest)(nil), "api.cmdb.ReadArtifactRequest")
	proto.RegisterType((*ReadArtifactResponse)(nil), "api.cmdb.ReadArtifactResponse")
	proto.RegisterType((*UpdateArtifactRequest)(nil), "api.cmdb.UpdateArtifactRequest")
	proto.RegisterType((*UpdateArtifactResponse)(nil), "api.cmdb.UpdateArtifactResponse")
	proto.RegisterType((*DeleteArtifactRequest)(nil), "api.cmdb.DeleteArtifactRequest")
	proto.RegisterType((*DeleteArtifactResponse)(nil), "api.cmdb.DeleteArtifactResponse")
	proto.RegisterType((*ListArtifactRequest)(nil), "api.cmdb.ListArtifactRequest")
	proto.RegisterType((*ListArtifactsResponse)(nil), "api.cmdb.ListArtifactsResponse")
	proto.RegisterType((*AwsService)(nil), "api.cmdb.AwsService")
	proto.RegisterType((*CreateAwsServiceRequest)(nil), "api.cmdb.CreateAwsServiceRequest")
	proto.RegisterType((*CreateAwsServiceResponse)(nil), "api.cmdb.CreateAwsServiceResponse")
	proto.RegisterType((*ReadAwsServiceRequest)(nil), "api.cmdb.ReadAwsServiceRequest")
	proto.RegisterType((*ReadAwsServiceResponse)(nil), "api.cmdb.ReadAwsServiceResponse")
	proto.RegisterType((*UpdateAwsServiceRequest)(nil), "api.cmdb.UpdateAwsServiceRequest")
	proto.RegisterType((*UpdateAwsServiceResponse)(nil), "api.cmdb.UpdateAwsServiceResponse")
	proto.RegisterType((*DeleteAwsServiceRequest)(nil), "api.cmdb.DeleteAwsServiceRequest")
	proto.RegisterType((*DeleteAwsServiceResponse)(nil), "api.cmdb.DeleteAwsServiceResponse")
	proto.RegisterType((*ListAwsServiceRequest)(nil), "api.cmdb.ListAwsServiceRequest")
	proto.RegisterType((*ListAwsServicesResponse)(nil), "api.cmdb.ListAwsServicesResponse")
	proto.RegisterType((*Deployment)(nil), "api.cmdb.Deployment")
	proto.RegisterType((*CreateDeploymentRequest)(nil), "api.cmdb.CreateDeploymentRequest")
	proto.RegisterType((*CreateDeploymentResponse)(nil), "api.cmdb.CreateDeploymentResponse")
	proto.RegisterType((*ReadDeploymentRequest)(nil), "api.cmdb.ReadDeploymentRequest")
	proto.RegisterType((*ReadDeploymentResponse)(nil), "api.cmdb.ReadDeploymentResponse")
	proto.RegisterType((*UpdateDeploymentRequest)(nil), "api.cmdb.UpdateDeploymentRequest")
	proto.RegisterType((*UpdateDeploymentResponse)(nil), "api.cmdb.UpdateDeploymentResponse")
	proto.RegisterType((*DeleteDeploymentRequest)(nil), "api.cmdb.DeleteDeploymentRequest")
	proto.RegisterType((*DeleteDeploymentResponse)(nil), "api.cmdb.DeleteDeploymentResponse")
	proto.RegisterType((*ListDeploymentRequest)(nil), "api.cmdb.ListDeploymentRequest")
	proto.RegisterType((*ListDeploymentsResponse)(nil), "api.cmdb.ListDeploymentsResponse")
	proto.RegisterType((*KubeCluster)(nil), "api.cmdb.KubeCluster")
	proto.RegisterType((*CreateKubeClusterRequest)(nil), "api.cmdb.CreateKubeClusterRequest")
	proto.RegisterType((*CreateKubeClusterResponse)(nil), "api.cmdb.CreateKubeClusterResponse")
	proto.RegisterType((*ReadKubeClusterRequest)(nil), "api.cmdb.ReadKubeClusterRequest")
	proto.RegisterType((*ReadKubeClusterResponse)(nil), "api.cmdb.ReadKubeClusterResponse")
	proto.RegisterType((*UpdateKubeClusterRequest)(nil), "api.cmdb.UpdateKubeClusterRequest")
	proto.RegisterType((*UpdateKubeClusterResponse)(nil), "api.cmdb.UpdateKubeClusterResponse")
	proto.RegisterType((*DeleteKubeClusterRequest)(nil), "api.cmdb.DeleteKubeClusterRequest")
	proto.RegisterType((*DeleteKubeClusterResponse)(nil), "api.cmdb.DeleteKubeClusterResponse")
	proto.RegisterType((*ListKubeClusterRequest)(nil), "api.cmdb.ListKubeClusterRequest")
	proto.RegisterType((*ListKubeClustersResponse)(nil), "api.cmdb.ListKubeClustersResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cmdb service

type CmdbClient interface {
	GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*VersionResponse, error)
}

type cmdbClient struct {
	cc *grpc.ClientConn
}

func NewCmdbClient(cc *grpc.ClientConn) CmdbClient {
	return &cmdbClient{cc}
}

func (c *cmdbClient) GetVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*VersionResponse, error) {
	out := new(VersionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Cmdb/GetVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cmdb service

type CmdbServer interface {
	GetVersion(context.Context, *google_protobuf.Empty) (*VersionResponse, error)
}

func RegisterCmdbServer(s *grpc.Server, srv CmdbServer) {
	s.RegisterService(&_Cmdb_serviceDesc, srv)
}

func _Cmdb_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CmdbServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Cmdb/GetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CmdbServer).GetVersion(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cmdb_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Cmdb",
	HandlerType: (*CmdbServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVersion",
			Handler:    _Cmdb_GetVersion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Regions service

type RegionsClient interface {
	// Use this method to create a Region information.
	Create(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error)
	// Use this method to read a Region information by identifier.
	Read(ctx context.Context, in *ReadRegionRequest, opts ...grpc.CallOption) (*ReadRegionResponse, error)
	// Use this method to update a Region information.
	Update(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*UpdateRegionResponse, error)
	// Use this method to delete a particular Region.
	Delete(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*DeleteRegionResponse, error)
	// Use this method to retrieve all the Regions.
	List(ctx context.Context, in *ListRegionRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error)
}

type regionsClient struct {
	cc *grpc.ClientConn
}

func NewRegionsClient(cc *grpc.ClientConn) RegionsClient {
	return &regionsClient{cc}
}

func (c *regionsClient) Create(ctx context.Context, in *CreateRegionRequest, opts ...grpc.CallOption) (*CreateRegionResponse, error) {
	out := new(CreateRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) Read(ctx context.Context, in *ReadRegionRequest, opts ...grpc.CallOption) (*ReadRegionResponse, error) {
	out := new(ReadRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) Update(ctx context.Context, in *UpdateRegionRequest, opts ...grpc.CallOption) (*UpdateRegionResponse, error) {
	out := new(UpdateRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) Delete(ctx context.Context, in *DeleteRegionRequest, opts ...grpc.CallOption) (*DeleteRegionResponse, error) {
	out := new(DeleteRegionResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *regionsClient) List(ctx context.Context, in *ListRegionRequest, opts ...grpc.CallOption) (*ListRegionsResponse, error) {
	out := new(ListRegionsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Regions/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Regions service

type RegionsServer interface {
	// Use this method to create a Region information.
	Create(context.Context, *CreateRegionRequest) (*CreateRegionResponse, error)
	// Use this method to read a Region information by identifier.
	Read(context.Context, *ReadRegionRequest) (*ReadRegionResponse, error)
	// Use this method to update a Region information.
	Update(context.Context, *UpdateRegionRequest) (*UpdateRegionResponse, error)
	// Use this method to delete a particular Region.
	Delete(context.Context, *DeleteRegionRequest) (*DeleteRegionResponse, error)
	// Use this method to retrieve all the Regions.
	List(context.Context, *ListRegionRequest) (*ListRegionsResponse, error)
}

func RegisterRegionsServer(s *grpc.Server, srv RegionsServer) {
	s.RegisterService(&_Regions_serviceDesc, srv)
}

func _Regions_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Create(ctx, req.(*CreateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Read(ctx, req.(*ReadRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Update(ctx, req.(*UpdateRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).Delete(ctx, req.(*DeleteRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Regions_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRegionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegionsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Regions/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegionsServer).List(ctx, req.(*ListRegionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Regions_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Regions",
	HandlerType: (*RegionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Regions_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Regions_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Regions_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Regions_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Regions_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Vaults service

type VaultsClient interface {
	// Use this method to create a Vault information.
	Create(ctx context.Context, in *CreateVaultRequest, opts ...grpc.CallOption) (*CreateVaultResponse, error)
	// Use this method to read a Vault information by identifier.
	Read(ctx context.Context, in *ReadVaultRequest, opts ...grpc.CallOption) (*ReadVaultResponse, error)
	// Use this method to update a Vault information.
	Update(ctx context.Context, in *UpdateVaultRequest, opts ...grpc.CallOption) (*UpdateVaultResponse, error)
	// Use this method to delete a particular Vault.
	Delete(ctx context.Context, in *DeleteVaultRequest, opts ...grpc.CallOption) (*DeleteVaultResponse, error)
	// Use this method to retrieve all the Vaults.
	List(ctx context.Context, in *ListVaultRequest, opts ...grpc.CallOption) (*ListVaultsResponse, error)
}

type vaultsClient struct {
	cc *grpc.ClientConn
}

func NewVaultsClient(cc *grpc.ClientConn) VaultsClient {
	return &vaultsClient{cc}
}

func (c *vaultsClient) Create(ctx context.Context, in *CreateVaultRequest, opts ...grpc.CallOption) (*CreateVaultResponse, error) {
	out := new(CreateVaultResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Vaults/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultsClient) Read(ctx context.Context, in *ReadVaultRequest, opts ...grpc.CallOption) (*ReadVaultResponse, error) {
	out := new(ReadVaultResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Vaults/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultsClient) Update(ctx context.Context, in *UpdateVaultRequest, opts ...grpc.CallOption) (*UpdateVaultResponse, error) {
	out := new(UpdateVaultResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Vaults/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultsClient) Delete(ctx context.Context, in *DeleteVaultRequest, opts ...grpc.CallOption) (*DeleteVaultResponse, error) {
	out := new(DeleteVaultResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Vaults/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vaultsClient) List(ctx context.Context, in *ListVaultRequest, opts ...grpc.CallOption) (*ListVaultsResponse, error) {
	out := new(ListVaultsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Vaults/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Vaults service

type VaultsServer interface {
	// Use this method to create a Vault information.
	Create(context.Context, *CreateVaultRequest) (*CreateVaultResponse, error)
	// Use this method to read a Vault information by identifier.
	Read(context.Context, *ReadVaultRequest) (*ReadVaultResponse, error)
	// Use this method to update a Vault information.
	Update(context.Context, *UpdateVaultRequest) (*UpdateVaultResponse, error)
	// Use this method to delete a particular Vault.
	Delete(context.Context, *DeleteVaultRequest) (*DeleteVaultResponse, error)
	// Use this method to retrieve all the Vaults.
	List(context.Context, *ListVaultRequest) (*ListVaultsResponse, error)
}

func RegisterVaultsServer(s *grpc.Server, srv VaultsServer) {
	s.RegisterService(&_Vaults_serviceDesc, srv)
}

func _Vaults_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Vaults/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultsServer).Create(ctx, req.(*CreateVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vaults_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Vaults/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultsServer).Read(ctx, req.(*ReadVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vaults_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Vaults/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultsServer).Update(ctx, req.(*UpdateVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vaults_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Vaults/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultsServer).Delete(ctx, req.(*DeleteVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vaults_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVaultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VaultsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Vaults/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VaultsServer).List(ctx, req.(*ListVaultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vaults_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Vaults",
	HandlerType: (*VaultsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Vaults_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Vaults_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Vaults_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Vaults_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Vaults_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for VersionTags service

type VersionTagsClient interface {
	// Use this method to create a VersionTag information.
	Create(ctx context.Context, in *CreateVersionTagRequest, opts ...grpc.CallOption) (*CreateVersionTagResponse, error)
	// Use this method to read a VersionTag information by identifier.
	Read(ctx context.Context, in *ReadVersionTagRequest, opts ...grpc.CallOption) (*ReadVersionTagResponse, error)
	// Use this method to update a VersionTag information.
	Update(ctx context.Context, in *UpdateVersionTagRequest, opts ...grpc.CallOption) (*UpdateVersionTagResponse, error)
	// Use this method to delete a particular VersionTag.
	Delete(ctx context.Context, in *DeleteVersionTagRequest, opts ...grpc.CallOption) (*DeleteVersionTagResponse, error)
	// Use this method to retrieve all the VersionTags.
	List(ctx context.Context, in *ListVersionTagRequest, opts ...grpc.CallOption) (*ListVersionTagsResponse, error)
}

type versionTagsClient struct {
	cc *grpc.ClientConn
}

func NewVersionTagsClient(cc *grpc.ClientConn) VersionTagsClient {
	return &versionTagsClient{cc}
}

func (c *versionTagsClient) Create(ctx context.Context, in *CreateVersionTagRequest, opts ...grpc.CallOption) (*CreateVersionTagResponse, error) {
	out := new(CreateVersionTagResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.VersionTags/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionTagsClient) Read(ctx context.Context, in *ReadVersionTagRequest, opts ...grpc.CallOption) (*ReadVersionTagResponse, error) {
	out := new(ReadVersionTagResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.VersionTags/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionTagsClient) Update(ctx context.Context, in *UpdateVersionTagRequest, opts ...grpc.CallOption) (*UpdateVersionTagResponse, error) {
	out := new(UpdateVersionTagResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.VersionTags/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionTagsClient) Delete(ctx context.Context, in *DeleteVersionTagRequest, opts ...grpc.CallOption) (*DeleteVersionTagResponse, error) {
	out := new(DeleteVersionTagResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.VersionTags/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versionTagsClient) List(ctx context.Context, in *ListVersionTagRequest, opts ...grpc.CallOption) (*ListVersionTagsResponse, error) {
	out := new(ListVersionTagsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.VersionTags/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VersionTags service

type VersionTagsServer interface {
	// Use this method to create a VersionTag information.
	Create(context.Context, *CreateVersionTagRequest) (*CreateVersionTagResponse, error)
	// Use this method to read a VersionTag information by identifier.
	Read(context.Context, *ReadVersionTagRequest) (*ReadVersionTagResponse, error)
	// Use this method to update a VersionTag information.
	Update(context.Context, *UpdateVersionTagRequest) (*UpdateVersionTagResponse, error)
	// Use this method to delete a particular VersionTag.
	Delete(context.Context, *DeleteVersionTagRequest) (*DeleteVersionTagResponse, error)
	// Use this method to retrieve all the VersionTags.
	List(context.Context, *ListVersionTagRequest) (*ListVersionTagsResponse, error)
}

func RegisterVersionTagsServer(s *grpc.Server, srv VersionTagsServer) {
	s.RegisterService(&_VersionTags_serviceDesc, srv)
}

func _VersionTags_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVersionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTagsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.VersionTags/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTagsServer).Create(ctx, req.(*CreateVersionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionTags_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadVersionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTagsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.VersionTags/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTagsServer).Read(ctx, req.(*ReadVersionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionTags_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVersionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTagsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.VersionTags/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTagsServer).Update(ctx, req.(*UpdateVersionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionTags_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVersionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTagsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.VersionTags/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTagsServer).Delete(ctx, req.(*DeleteVersionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VersionTags_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVersionTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersionTagsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.VersionTags/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersionTagsServer).List(ctx, req.(*ListVersionTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _VersionTags_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.VersionTags",
	HandlerType: (*VersionTagsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _VersionTags_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _VersionTags_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _VersionTags_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VersionTags_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _VersionTags_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Applications service

type ApplicationsClient interface {
	// Use this method to create a Application information.
	Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error)
	// Use this method to read a Application information by identifier.
	Read(ctx context.Context, in *ReadApplicationRequest, opts ...grpc.CallOption) (*ReadApplicationResponse, error)
	// Use this method to update a Application information.
	Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error)
	// Use this method to delete a particular Application.
	Delete(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error)
	// Use this method to retrieve all the Applications.
	List(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error)
}

type applicationsClient struct {
	cc *grpc.ClientConn
}

func NewApplicationsClient(cc *grpc.ClientConn) ApplicationsClient {
	return &applicationsClient{cc}
}

func (c *applicationsClient) Create(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*CreateApplicationResponse, error) {
	out := new(CreateApplicationResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Applications/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Read(ctx context.Context, in *ReadApplicationRequest, opts ...grpc.CallOption) (*ReadApplicationResponse, error) {
	out := new(ReadApplicationResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Applications/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Update(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*UpdateApplicationResponse, error) {
	out := new(UpdateApplicationResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Applications/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) Delete(ctx context.Context, in *DeleteApplicationRequest, opts ...grpc.CallOption) (*DeleteApplicationResponse, error) {
	out := new(DeleteApplicationResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Applications/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationsClient) List(ctx context.Context, in *ListApplicationRequest, opts ...grpc.CallOption) (*ListApplicationsResponse, error) {
	out := new(ListApplicationsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Applications/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Applications service

type ApplicationsServer interface {
	// Use this method to create a Application information.
	Create(context.Context, *CreateApplicationRequest) (*CreateApplicationResponse, error)
	// Use this method to read a Application information by identifier.
	Read(context.Context, *ReadApplicationRequest) (*ReadApplicationResponse, error)
	// Use this method to update a Application information.
	Update(context.Context, *UpdateApplicationRequest) (*UpdateApplicationResponse, error)
	// Use this method to delete a particular Application.
	Delete(context.Context, *DeleteApplicationRequest) (*DeleteApplicationResponse, error)
	// Use this method to retrieve all the Applications.
	List(context.Context, *ListApplicationRequest) (*ListApplicationsResponse, error)
}

func RegisterApplicationsServer(s *grpc.Server, srv ApplicationsServer) {
	s.RegisterService(&_Applications_serviceDesc, srv)
}

func _Applications_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Applications/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Create(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Applications/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Read(ctx, req.(*ReadApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Applications/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Update(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Applications/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).Delete(ctx, req.(*DeleteApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Applications_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Applications/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationsServer).List(ctx, req.(*ListApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Applications_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Applications",
	HandlerType: (*ApplicationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Applications_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Applications_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Applications_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Applications_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Applications_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for AwsRdsInstances service

type AwsRdsInstancesClient interface {
	// Use this method to create a AwsRdsInstance information.
	Create(ctx context.Context, in *CreateAwsRdsInstanceRequest, opts ...grpc.CallOption) (*CreateAwsRdsInstanceResponse, error)
	// Use this method to read a AwsRdsInstance information by identifier.
	Read(ctx context.Context, in *ReadAwsRdsInstanceRequest, opts ...grpc.CallOption) (*ReadAwsRdsInstanceResponse, error)
	// Use this method to update a AwsRdsInstance information.
	Update(ctx context.Context, in *UpdateAwsRdsInstanceRequest, opts ...grpc.CallOption) (*UpdateAwsRdsInstanceResponse, error)
	// Use this method to delete a particular AwsRdsInstance.
	Delete(ctx context.Context, in *DeleteAwsRdsInstanceRequest, opts ...grpc.CallOption) (*DeleteAwsRdsInstanceResponse, error)
	// Use this method to retrieve all the AwsRdsInstances.
	List(ctx context.Context, in *ListAwsRdsInstanceRequest, opts ...grpc.CallOption) (*ListAwsRdsInstancesResponse, error)
}

type awsRdsInstancesClient struct {
	cc *grpc.ClientConn
}

func NewAwsRdsInstancesClient(cc *grpc.ClientConn) AwsRdsInstancesClient {
	return &awsRdsInstancesClient{cc}
}

func (c *awsRdsInstancesClient) Create(ctx context.Context, in *CreateAwsRdsInstanceRequest, opts ...grpc.CallOption) (*CreateAwsRdsInstanceResponse, error) {
	out := new(CreateAwsRdsInstanceResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.AwsRdsInstances/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsRdsInstancesClient) Read(ctx context.Context, in *ReadAwsRdsInstanceRequest, opts ...grpc.CallOption) (*ReadAwsRdsInstanceResponse, error) {
	out := new(ReadAwsRdsInstanceResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.AwsRdsInstances/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsRdsInstancesClient) Update(ctx context.Context, in *UpdateAwsRdsInstanceRequest, opts ...grpc.CallOption) (*UpdateAwsRdsInstanceResponse, error) {
	out := new(UpdateAwsRdsInstanceResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.AwsRdsInstances/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsRdsInstancesClient) Delete(ctx context.Context, in *DeleteAwsRdsInstanceRequest, opts ...grpc.CallOption) (*DeleteAwsRdsInstanceResponse, error) {
	out := new(DeleteAwsRdsInstanceResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.AwsRdsInstances/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsRdsInstancesClient) List(ctx context.Context, in *ListAwsRdsInstanceRequest, opts ...grpc.CallOption) (*ListAwsRdsInstancesResponse, error) {
	out := new(ListAwsRdsInstancesResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.AwsRdsInstances/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AwsRdsInstances service

type AwsRdsInstancesServer interface {
	// Use this method to create a AwsRdsInstance information.
	Create(context.Context, *CreateAwsRdsInstanceRequest) (*CreateAwsRdsInstanceResponse, error)
	// Use this method to read a AwsRdsInstance information by identifier.
	Read(context.Context, *ReadAwsRdsInstanceRequest) (*ReadAwsRdsInstanceResponse, error)
	// Use this method to update a AwsRdsInstance information.
	Update(context.Context, *UpdateAwsRdsInstanceRequest) (*UpdateAwsRdsInstanceResponse, error)
	// Use this method to delete a particular AwsRdsInstance.
	Delete(context.Context, *DeleteAwsRdsInstanceRequest) (*DeleteAwsRdsInstanceResponse, error)
	// Use this method to retrieve all the AwsRdsInstances.
	List(context.Context, *ListAwsRdsInstanceRequest) (*ListAwsRdsInstancesResponse, error)
}

func RegisterAwsRdsInstancesServer(s *grpc.Server, srv AwsRdsInstancesServer) {
	s.RegisterService(&_AwsRdsInstances_serviceDesc, srv)
}

func _AwsRdsInstances_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAwsRdsInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsRdsInstancesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.AwsRdsInstances/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsRdsInstancesServer).Create(ctx, req.(*CreateAwsRdsInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsRdsInstances_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAwsRdsInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsRdsInstancesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.AwsRdsInstances/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsRdsInstancesServer).Read(ctx, req.(*ReadAwsRdsInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsRdsInstances_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAwsRdsInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsRdsInstancesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.AwsRdsInstances/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsRdsInstancesServer).Update(ctx, req.(*UpdateAwsRdsInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsRdsInstances_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAwsRdsInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsRdsInstancesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.AwsRdsInstances/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsRdsInstancesServer).Delete(ctx, req.(*DeleteAwsRdsInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsRdsInstances_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAwsRdsInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsRdsInstancesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.AwsRdsInstances/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsRdsInstancesServer).List(ctx, req.(*ListAwsRdsInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AwsRdsInstances_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.AwsRdsInstances",
	HandlerType: (*AwsRdsInstancesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AwsRdsInstances_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _AwsRdsInstances_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AwsRdsInstances_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AwsRdsInstances_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AwsRdsInstances_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Containers service

type ContainersClient interface {
	// Use this method to create a Container information.
	Create(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error)
	// Use this method to read a Container information by identifier.
	Read(ctx context.Context, in *ReadContainerRequest, opts ...grpc.CallOption) (*ReadContainerResponse, error)
	// Use this method to update a Container information.
	Update(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerResponse, error)
	// Use this method to delete a particular Container.
	Delete(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*DeleteContainerResponse, error)
	// Use this method to retrieve all the Containers.
	List(ctx context.Context, in *ListContainerRequest, opts ...grpc.CallOption) (*ListContainersResponse, error)
}

type containersClient struct {
	cc *grpc.ClientConn
}

func NewContainersClient(cc *grpc.ClientConn) ContainersClient {
	return &containersClient{cc}
}

func (c *containersClient) Create(ctx context.Context, in *CreateContainerRequest, opts ...grpc.CallOption) (*CreateContainerResponse, error) {
	out := new(CreateContainerResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Containers/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Read(ctx context.Context, in *ReadContainerRequest, opts ...grpc.CallOption) (*ReadContainerResponse, error) {
	out := new(ReadContainerResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Containers/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Update(ctx context.Context, in *UpdateContainerRequest, opts ...grpc.CallOption) (*UpdateContainerResponse, error) {
	out := new(UpdateContainerResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Containers/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) Delete(ctx context.Context, in *DeleteContainerRequest, opts ...grpc.CallOption) (*DeleteContainerResponse, error) {
	out := new(DeleteContainerResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Containers/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containersClient) List(ctx context.Context, in *ListContainerRequest, opts ...grpc.CallOption) (*ListContainersResponse, error) {
	out := new(ListContainersResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Containers/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Containers service

type ContainersServer interface {
	// Use this method to create a Container information.
	Create(context.Context, *CreateContainerRequest) (*CreateContainerResponse, error)
	// Use this method to read a Container information by identifier.
	Read(context.Context, *ReadContainerRequest) (*ReadContainerResponse, error)
	// Use this method to update a Container information.
	Update(context.Context, *UpdateContainerRequest) (*UpdateContainerResponse, error)
	// Use this method to delete a particular Container.
	Delete(context.Context, *DeleteContainerRequest) (*DeleteContainerResponse, error)
	// Use this method to retrieve all the Containers.
	List(context.Context, *ListContainerRequest) (*ListContainersResponse, error)
}

func RegisterContainersServer(s *grpc.Server, srv ContainersServer) {
	s.RegisterService(&_Containers_serviceDesc, srv)
}

func _Containers_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Containers/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Create(ctx, req.(*CreateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Containers/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Read(ctx, req.(*ReadContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Containers/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Update(ctx, req.(*UpdateContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Containers/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).Delete(ctx, req.(*DeleteContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Containers_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Containers/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainersServer).List(ctx, req.(*ListContainerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Containers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Containers",
	HandlerType: (*ContainersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Containers_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Containers_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Containers_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Containers_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Containers_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Environments service

type EnvironmentsClient interface {
	// Use this method to create a Environment information.
	Create(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error)
	// Use this method to read a Environment information by identifier.
	Read(ctx context.Context, in *ReadEnvironmentRequest, opts ...grpc.CallOption) (*ReadEnvironmentResponse, error)
	// Use this method to update a Environment information.
	Update(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*UpdateEnvironmentResponse, error)
	// Use this method to delete a particular Environment.
	Delete(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*DeleteEnvironmentResponse, error)
	// Use this method to retrieve all the Environments.
	List(ctx context.Context, in *ListEnvironmentRequest, opts ...grpc.CallOption) (*ListEnvironmentsResponse, error)
}

type environmentsClient struct {
	cc *grpc.ClientConn
}

func NewEnvironmentsClient(cc *grpc.ClientConn) EnvironmentsClient {
	return &environmentsClient{cc}
}

func (c *environmentsClient) Create(ctx context.Context, in *CreateEnvironmentRequest, opts ...grpc.CallOption) (*CreateEnvironmentResponse, error) {
	out := new(CreateEnvironmentResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Environments/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) Read(ctx context.Context, in *ReadEnvironmentRequest, opts ...grpc.CallOption) (*ReadEnvironmentResponse, error) {
	out := new(ReadEnvironmentResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Environments/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) Update(ctx context.Context, in *UpdateEnvironmentRequest, opts ...grpc.CallOption) (*UpdateEnvironmentResponse, error) {
	out := new(UpdateEnvironmentResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Environments/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) Delete(ctx context.Context, in *DeleteEnvironmentRequest, opts ...grpc.CallOption) (*DeleteEnvironmentResponse, error) {
	out := new(DeleteEnvironmentResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Environments/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentsClient) List(ctx context.Context, in *ListEnvironmentRequest, opts ...grpc.CallOption) (*ListEnvironmentsResponse, error) {
	out := new(ListEnvironmentsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Environments/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Environments service

type EnvironmentsServer interface {
	// Use this method to create a Environment information.
	Create(context.Context, *CreateEnvironmentRequest) (*CreateEnvironmentResponse, error)
	// Use this method to read a Environment information by identifier.
	Read(context.Context, *ReadEnvironmentRequest) (*ReadEnvironmentResponse, error)
	// Use this method to update a Environment information.
	Update(context.Context, *UpdateEnvironmentRequest) (*UpdateEnvironmentResponse, error)
	// Use this method to delete a particular Environment.
	Delete(context.Context, *DeleteEnvironmentRequest) (*DeleteEnvironmentResponse, error)
	// Use this method to retrieve all the Environments.
	List(context.Context, *ListEnvironmentRequest) (*ListEnvironmentsResponse, error)
}

func RegisterEnvironmentsServer(s *grpc.Server, srv EnvironmentsServer) {
	s.RegisterService(&_Environments_serviceDesc, srv)
}

func _Environments_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Environments/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).Create(ctx, req.(*CreateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Environments/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).Read(ctx, req.(*ReadEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Environments/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).Update(ctx, req.(*UpdateEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Environments/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).Delete(ctx, req.(*DeleteEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Environments_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvironmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvironmentsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Environments/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvironmentsServer).List(ctx, req.(*ListEnvironmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Environments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Environments",
	HandlerType: (*EnvironmentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Environments_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Environments_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Environments_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Environments_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Environments_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Manifests service

type ManifestsClient interface {
	// Use this method to create a Manifest information.
	Create(ctx context.Context, in *CreateManifestRequest, opts ...grpc.CallOption) (*CreateManifestResponse, error)
	// Use this method to read a Manifest information by identifier.
	Read(ctx context.Context, in *ReadManifestRequest, opts ...grpc.CallOption) (*ReadManifestResponse, error)
	// Use this method to update a Manifest information.
	Update(ctx context.Context, in *UpdateManifestRequest, opts ...grpc.CallOption) (*UpdateManifestResponse, error)
	// Use this method to delete a particular Manifest.
	Delete(ctx context.Context, in *DeleteManifestRequest, opts ...grpc.CallOption) (*DeleteManifestResponse, error)
	// Use this method to retrieve all the Manifests.
	List(ctx context.Context, in *ListManifestRequest, opts ...grpc.CallOption) (*ListManifestsResponse, error)
}

type manifestsClient struct {
	cc *grpc.ClientConn
}

func NewManifestsClient(cc *grpc.ClientConn) ManifestsClient {
	return &manifestsClient{cc}
}

func (c *manifestsClient) Create(ctx context.Context, in *CreateManifestRequest, opts ...grpc.CallOption) (*CreateManifestResponse, error) {
	out := new(CreateManifestResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Manifests/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manifestsClient) Read(ctx context.Context, in *ReadManifestRequest, opts ...grpc.CallOption) (*ReadManifestResponse, error) {
	out := new(ReadManifestResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Manifests/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manifestsClient) Update(ctx context.Context, in *UpdateManifestRequest, opts ...grpc.CallOption) (*UpdateManifestResponse, error) {
	out := new(UpdateManifestResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Manifests/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manifestsClient) Delete(ctx context.Context, in *DeleteManifestRequest, opts ...grpc.CallOption) (*DeleteManifestResponse, error) {
	out := new(DeleteManifestResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Manifests/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manifestsClient) List(ctx context.Context, in *ListManifestRequest, opts ...grpc.CallOption) (*ListManifestsResponse, error) {
	out := new(ListManifestsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Manifests/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Manifests service

type ManifestsServer interface {
	// Use this method to create a Manifest information.
	Create(context.Context, *CreateManifestRequest) (*CreateManifestResponse, error)
	// Use this method to read a Manifest information by identifier.
	Read(context.Context, *ReadManifestRequest) (*ReadManifestResponse, error)
	// Use this method to update a Manifest information.
	Update(context.Context, *UpdateManifestRequest) (*UpdateManifestResponse, error)
	// Use this method to delete a particular Manifest.
	Delete(context.Context, *DeleteManifestRequest) (*DeleteManifestResponse, error)
	// Use this method to retrieve all the Manifests.
	List(context.Context, *ListManifestRequest) (*ListManifestsResponse, error)
}

func RegisterManifestsServer(s *grpc.Server, srv ManifestsServer) {
	s.RegisterService(&_Manifests_serviceDesc, srv)
}

func _Manifests_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManifestsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Manifests/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManifestsServer).Create(ctx, req.(*CreateManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manifests_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManifestsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Manifests/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManifestsServer).Read(ctx, req.(*ReadManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manifests_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManifestsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Manifests/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManifestsServer).Update(ctx, req.(*UpdateManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manifests_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManifestsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Manifests/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManifestsServer).Delete(ctx, req.(*DeleteManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manifests_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManifestsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Manifests/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManifestsServer).List(ctx, req.(*ListManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Manifests_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Manifests",
	HandlerType: (*ManifestsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Manifests_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Manifests_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Manifests_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Manifests_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Manifests_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Secrets service

type SecretsClient interface {
	// Use this method to create a Secret information.
	Create(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error)
	// Use this method to read a Secret information by identifier.
	Read(ctx context.Context, in *ReadSecretRequest, opts ...grpc.CallOption) (*ReadSecretResponse, error)
	// Use this method to update a Secret information.
	Update(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*UpdateSecretResponse, error)
	// Use this method to delete a particular Secret.
	Delete(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
	// Use this method to retrieve all the Secrets.
	List(ctx context.Context, in *ListSecretRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error)
}

type secretsClient struct {
	cc *grpc.ClientConn
}

func NewSecretsClient(cc *grpc.ClientConn) SecretsClient {
	return &secretsClient{cc}
}

func (c *secretsClient) Create(ctx context.Context, in *CreateSecretRequest, opts ...grpc.CallOption) (*CreateSecretResponse, error) {
	out := new(CreateSecretResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Secrets/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) Read(ctx context.Context, in *ReadSecretRequest, opts ...grpc.CallOption) (*ReadSecretResponse, error) {
	out := new(ReadSecretResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Secrets/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) Update(ctx context.Context, in *UpdateSecretRequest, opts ...grpc.CallOption) (*UpdateSecretResponse, error) {
	out := new(UpdateSecretResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Secrets/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) Delete(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	out := new(DeleteSecretResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Secrets/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsClient) List(ctx context.Context, in *ListSecretRequest, opts ...grpc.CallOption) (*ListSecretsResponse, error) {
	out := new(ListSecretsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Secrets/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Secrets service

type SecretsServer interface {
	// Use this method to create a Secret information.
	Create(context.Context, *CreateSecretRequest) (*CreateSecretResponse, error)
	// Use this method to read a Secret information by identifier.
	Read(context.Context, *ReadSecretRequest) (*ReadSecretResponse, error)
	// Use this method to update a Secret information.
	Update(context.Context, *UpdateSecretRequest) (*UpdateSecretResponse, error)
	// Use this method to delete a particular Secret.
	Delete(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	// Use this method to retrieve all the Secrets.
	List(context.Context, *ListSecretRequest) (*ListSecretsResponse, error)
}

func RegisterSecretsServer(s *grpc.Server, srv SecretsServer) {
	s.RegisterService(&_Secrets_serviceDesc, srv)
}

func _Secrets_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Secrets/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).Create(ctx, req.(*CreateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Secrets/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).Read(ctx, req.(*ReadSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Secrets/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).Update(ctx, req.(*UpdateSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Secrets/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).Delete(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Secrets_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Secrets/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsServer).List(ctx, req.(*ListSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Secrets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Secrets",
	HandlerType: (*SecretsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Secrets_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Secrets_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Secrets_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Secrets_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Secrets_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Artifacts service

type ArtifactsClient interface {
	// Use this method to create a Artifact information.
	Create(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*CreateArtifactResponse, error)
	// Use this method to read a Artifact information by identifier.
	Read(ctx context.Context, in *ReadArtifactRequest, opts ...grpc.CallOption) (*ReadArtifactResponse, error)
	// Use this method to update a Artifact information.
	Update(ctx context.Context, in *UpdateArtifactRequest, opts ...grpc.CallOption) (*UpdateArtifactResponse, error)
	// Use this method to delete a particular Artifact.
	Delete(ctx context.Context, in *DeleteArtifactRequest, opts ...grpc.CallOption) (*DeleteArtifactResponse, error)
	// Use this method to retrieve all the Artifacts.
	List(ctx context.Context, in *ListArtifactRequest, opts ...grpc.CallOption) (*ListArtifactsResponse, error)
}

type artifactsClient struct {
	cc *grpc.ClientConn
}

func NewArtifactsClient(cc *grpc.ClientConn) ArtifactsClient {
	return &artifactsClient{cc}
}

func (c *artifactsClient) Create(ctx context.Context, in *CreateArtifactRequest, opts ...grpc.CallOption) (*CreateArtifactResponse, error) {
	out := new(CreateArtifactResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Artifacts/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsClient) Read(ctx context.Context, in *ReadArtifactRequest, opts ...grpc.CallOption) (*ReadArtifactResponse, error) {
	out := new(ReadArtifactResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Artifacts/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsClient) Update(ctx context.Context, in *UpdateArtifactRequest, opts ...grpc.CallOption) (*UpdateArtifactResponse, error) {
	out := new(UpdateArtifactResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Artifacts/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsClient) Delete(ctx context.Context, in *DeleteArtifactRequest, opts ...grpc.CallOption) (*DeleteArtifactResponse, error) {
	out := new(DeleteArtifactResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Artifacts/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *artifactsClient) List(ctx context.Context, in *ListArtifactRequest, opts ...grpc.CallOption) (*ListArtifactsResponse, error) {
	out := new(ListArtifactsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Artifacts/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Artifacts service

type ArtifactsServer interface {
	// Use this method to create a Artifact information.
	Create(context.Context, *CreateArtifactRequest) (*CreateArtifactResponse, error)
	// Use this method to read a Artifact information by identifier.
	Read(context.Context, *ReadArtifactRequest) (*ReadArtifactResponse, error)
	// Use this method to update a Artifact information.
	Update(context.Context, *UpdateArtifactRequest) (*UpdateArtifactResponse, error)
	// Use this method to delete a particular Artifact.
	Delete(context.Context, *DeleteArtifactRequest) (*DeleteArtifactResponse, error)
	// Use this method to retrieve all the Artifacts.
	List(context.Context, *ListArtifactRequest) (*ListArtifactsResponse, error)
}

func RegisterArtifactsServer(s *grpc.Server, srv ArtifactsServer) {
	s.RegisterService(&_Artifacts_serviceDesc, srv)
}

func _Artifacts_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Artifacts/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).Create(ctx, req.(*CreateArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artifacts_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Artifacts/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).Read(ctx, req.(*ReadArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artifacts_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Artifacts/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).Update(ctx, req.(*UpdateArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artifacts_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Artifacts/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).Delete(ctx, req.(*DeleteArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Artifacts_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArtifactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArtifactsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Artifacts/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArtifactsServer).List(ctx, req.(*ListArtifactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Artifacts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Artifacts",
	HandlerType: (*ArtifactsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Artifacts_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Artifacts_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Artifacts_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Artifacts_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Artifacts_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for AwsServices service

type AwsServicesClient interface {
	// Use this method to create a AwsService information.
	Create(ctx context.Context, in *CreateAwsServiceRequest, opts ...grpc.CallOption) (*CreateAwsServiceResponse, error)
	// Use this method to read a AwsService information by identifier.
	Read(ctx context.Context, in *ReadAwsServiceRequest, opts ...grpc.CallOption) (*ReadAwsServiceResponse, error)
	// Use this method to update a AwsService information.
	Update(ctx context.Context, in *UpdateAwsServiceRequest, opts ...grpc.CallOption) (*UpdateAwsServiceResponse, error)
	// Use this method to delete a particular AwsService.
	Delete(ctx context.Context, in *DeleteAwsServiceRequest, opts ...grpc.CallOption) (*DeleteAwsServiceResponse, error)
	// Use this method to retrieve all the AwsServices.
	List(ctx context.Context, in *ListAwsServiceRequest, opts ...grpc.CallOption) (*ListAwsServicesResponse, error)
}

type awsServicesClient struct {
	cc *grpc.ClientConn
}

func NewAwsServicesClient(cc *grpc.ClientConn) AwsServicesClient {
	return &awsServicesClient{cc}
}

func (c *awsServicesClient) Create(ctx context.Context, in *CreateAwsServiceRequest, opts ...grpc.CallOption) (*CreateAwsServiceResponse, error) {
	out := new(CreateAwsServiceResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.AwsServices/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsServicesClient) Read(ctx context.Context, in *ReadAwsServiceRequest, opts ...grpc.CallOption) (*ReadAwsServiceResponse, error) {
	out := new(ReadAwsServiceResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.AwsServices/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsServicesClient) Update(ctx context.Context, in *UpdateAwsServiceRequest, opts ...grpc.CallOption) (*UpdateAwsServiceResponse, error) {
	out := new(UpdateAwsServiceResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.AwsServices/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsServicesClient) Delete(ctx context.Context, in *DeleteAwsServiceRequest, opts ...grpc.CallOption) (*DeleteAwsServiceResponse, error) {
	out := new(DeleteAwsServiceResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.AwsServices/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *awsServicesClient) List(ctx context.Context, in *ListAwsServiceRequest, opts ...grpc.CallOption) (*ListAwsServicesResponse, error) {
	out := new(ListAwsServicesResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.AwsServices/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AwsServices service

type AwsServicesServer interface {
	// Use this method to create a AwsService information.
	Create(context.Context, *CreateAwsServiceRequest) (*CreateAwsServiceResponse, error)
	// Use this method to read a AwsService information by identifier.
	Read(context.Context, *ReadAwsServiceRequest) (*ReadAwsServiceResponse, error)
	// Use this method to update a AwsService information.
	Update(context.Context, *UpdateAwsServiceRequest) (*UpdateAwsServiceResponse, error)
	// Use this method to delete a particular AwsService.
	Delete(context.Context, *DeleteAwsServiceRequest) (*DeleteAwsServiceResponse, error)
	// Use this method to retrieve all the AwsServices.
	List(context.Context, *ListAwsServiceRequest) (*ListAwsServicesResponse, error)
}

func RegisterAwsServicesServer(s *grpc.Server, srv AwsServicesServer) {
	s.RegisterService(&_AwsServices_serviceDesc, srv)
}

func _AwsServices_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAwsServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsServicesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.AwsServices/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsServicesServer).Create(ctx, req.(*CreateAwsServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsServices_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAwsServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsServicesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.AwsServices/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsServicesServer).Read(ctx, req.(*ReadAwsServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsServices_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAwsServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsServicesServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.AwsServices/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsServicesServer).Update(ctx, req.(*UpdateAwsServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsServices_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAwsServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsServicesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.AwsServices/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsServicesServer).Delete(ctx, req.(*DeleteAwsServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AwsServices_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAwsServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AwsServicesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.AwsServices/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AwsServicesServer).List(ctx, req.(*ListAwsServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AwsServices_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.AwsServices",
	HandlerType: (*AwsServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AwsServices_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _AwsServices_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AwsServices_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AwsServices_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AwsServices_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for Deployments service

type DeploymentsClient interface {
	// Use this method to create a Deployment information.
	Create(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error)
	// Use this method to read a Deployment information by identifier.
	Read(ctx context.Context, in *ReadDeploymentRequest, opts ...grpc.CallOption) (*ReadDeploymentResponse, error)
	// Use this method to update a Deployment information.
	Update(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error)
	// Use this method to delete a particular Deployment.
	Delete(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*DeleteDeploymentResponse, error)
	// Use this method to retrieve all the Deployments.
	List(ctx context.Context, in *ListDeploymentRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error)
}

type deploymentsClient struct {
	cc *grpc.ClientConn
}

func NewDeploymentsClient(cc *grpc.ClientConn) DeploymentsClient {
	return &deploymentsClient{cc}
}

func (c *deploymentsClient) Create(ctx context.Context, in *CreateDeploymentRequest, opts ...grpc.CallOption) (*CreateDeploymentResponse, error) {
	out := new(CreateDeploymentResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Deployments/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) Read(ctx context.Context, in *ReadDeploymentRequest, opts ...grpc.CallOption) (*ReadDeploymentResponse, error) {
	out := new(ReadDeploymentResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Deployments/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) Update(ctx context.Context, in *UpdateDeploymentRequest, opts ...grpc.CallOption) (*UpdateDeploymentResponse, error) {
	out := new(UpdateDeploymentResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Deployments/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) Delete(ctx context.Context, in *DeleteDeploymentRequest, opts ...grpc.CallOption) (*DeleteDeploymentResponse, error) {
	out := new(DeleteDeploymentResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Deployments/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deploymentsClient) List(ctx context.Context, in *ListDeploymentRequest, opts ...grpc.CallOption) (*ListDeploymentsResponse, error) {
	out := new(ListDeploymentsResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.Deployments/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Deployments service

type DeploymentsServer interface {
	// Use this method to create a Deployment information.
	Create(context.Context, *CreateDeploymentRequest) (*CreateDeploymentResponse, error)
	// Use this method to read a Deployment information by identifier.
	Read(context.Context, *ReadDeploymentRequest) (*ReadDeploymentResponse, error)
	// Use this method to update a Deployment information.
	Update(context.Context, *UpdateDeploymentRequest) (*UpdateDeploymentResponse, error)
	// Use this method to delete a particular Deployment.
	Delete(context.Context, *DeleteDeploymentRequest) (*DeleteDeploymentResponse, error)
	// Use this method to retrieve all the Deployments.
	List(context.Context, *ListDeploymentRequest) (*ListDeploymentsResponse, error)
}

func RegisterDeploymentsServer(s *grpc.Server, srv DeploymentsServer) {
	s.RegisterService(&_Deployments_serviceDesc, srv)
}

func _Deployments_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Deployments/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).Create(ctx, req.(*CreateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Deployments/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).Read(ctx, req.(*ReadDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Deployments/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).Update(ctx, req.(*UpdateDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Deployments/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).Delete(ctx, req.(*DeleteDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Deployments_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeploymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeploymentsServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.Deployments/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeploymentsServer).List(ctx, req.(*ListDeploymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Deployments_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.Deployments",
	HandlerType: (*DeploymentsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Deployments_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Deployments_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Deployments_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Deployments_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Deployments_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

// Client API for KubeClusters service

type KubeClustersClient interface {
	// Use this method to create a KubeCluster information.
	Create(ctx context.Context, in *CreateKubeClusterRequest, opts ...grpc.CallOption) (*CreateKubeClusterResponse, error)
	// Use this method to read a KubeCluster information by identifier.
	Read(ctx context.Context, in *ReadKubeClusterRequest, opts ...grpc.CallOption) (*ReadKubeClusterResponse, error)
	// Use this method to update a KubeCluster information.
	Update(ctx context.Context, in *UpdateKubeClusterRequest, opts ...grpc.CallOption) (*UpdateKubeClusterResponse, error)
	// Use this method to delete a particular KubeCluster.
	Delete(ctx context.Context, in *DeleteKubeClusterRequest, opts ...grpc.CallOption) (*DeleteKubeClusterResponse, error)
	// Use this method to retrieve all the KubeClusters.
	List(ctx context.Context, in *ListKubeClusterRequest, opts ...grpc.CallOption) (*ListKubeClustersResponse, error)
}

type kubeClustersClient struct {
	cc *grpc.ClientConn
}

func NewKubeClustersClient(cc *grpc.ClientConn) KubeClustersClient {
	return &kubeClustersClient{cc}
}

func (c *kubeClustersClient) Create(ctx context.Context, in *CreateKubeClusterRequest, opts ...grpc.CallOption) (*CreateKubeClusterResponse, error) {
	out := new(CreateKubeClusterResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.KubeClusters/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClustersClient) Read(ctx context.Context, in *ReadKubeClusterRequest, opts ...grpc.CallOption) (*ReadKubeClusterResponse, error) {
	out := new(ReadKubeClusterResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.KubeClusters/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClustersClient) Update(ctx context.Context, in *UpdateKubeClusterRequest, opts ...grpc.CallOption) (*UpdateKubeClusterResponse, error) {
	out := new(UpdateKubeClusterResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.KubeClusters/Update", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClustersClient) Delete(ctx context.Context, in *DeleteKubeClusterRequest, opts ...grpc.CallOption) (*DeleteKubeClusterResponse, error) {
	out := new(DeleteKubeClusterResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.KubeClusters/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kubeClustersClient) List(ctx context.Context, in *ListKubeClusterRequest, opts ...grpc.CallOption) (*ListKubeClustersResponse, error) {
	out := new(ListKubeClustersResponse)
	err := grpc.Invoke(ctx, "/api.cmdb.KubeClusters/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KubeClusters service

type KubeClustersServer interface {
	// Use this method to create a KubeCluster information.
	Create(context.Context, *CreateKubeClusterRequest) (*CreateKubeClusterResponse, error)
	// Use this method to read a KubeCluster information by identifier.
	Read(context.Context, *ReadKubeClusterRequest) (*ReadKubeClusterResponse, error)
	// Use this method to update a KubeCluster information.
	Update(context.Context, *UpdateKubeClusterRequest) (*UpdateKubeClusterResponse, error)
	// Use this method to delete a particular KubeCluster.
	Delete(context.Context, *DeleteKubeClusterRequest) (*DeleteKubeClusterResponse, error)
	// Use this method to retrieve all the KubeClusters.
	List(context.Context, *ListKubeClusterRequest) (*ListKubeClustersResponse, error)
}

func RegisterKubeClustersServer(s *grpc.Server, srv KubeClustersServer) {
	s.RegisterService(&_KubeClusters_serviceDesc, srv)
}

func _KubeClusters_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateKubeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClustersServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.KubeClusters/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClustersServer).Create(ctx, req.(*CreateKubeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusters_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadKubeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClustersServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.KubeClusters/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClustersServer).Read(ctx, req.(*ReadKubeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusters_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateKubeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClustersServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.KubeClusters/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClustersServer).Update(ctx, req.(*UpdateKubeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusters_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteKubeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClustersServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.KubeClusters/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClustersServer).Delete(ctx, req.(*DeleteKubeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KubeClusters_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKubeClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KubeClustersServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.cmdb.KubeClusters/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KubeClustersServer).List(ctx, req.(*ListKubeClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KubeClusters_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.cmdb.KubeClusters",
	HandlerType: (*KubeClustersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _KubeClusters_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _KubeClusters_Read_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _KubeClusters_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _KubeClusters_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _KubeClusters_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/seizadi/cmdb/pkg/pb/cmdb.proto",
}

func init() { proto.RegisterFile("github.com/seizadi/cmdb/pkg/pb/cmdb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 4052 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5d, 0xdb, 0x6f, 0x1b, 0xc7,
	0x7a, 0x0f, 0x65, 0x5d, 0x3f, 0x49, 0xb6, 0x3c, 0xba, 0x91, 0xd4, 0x8d, 0x5a, 0x45, 0xb9, 0xc8,
	0x36, 0x69, 0x33, 0xad, 0x53, 0x38, 0x89, 0x63, 0xd9, 0xb2, 0x63, 0x27, 0x4d, 0xe0, 0xd0, 0x49,
	0x90, 0x1a, 0x68, 0x99, 0x15, 0xb9, 0xa2, 0x37, 0x22, 0xb9, 0xeb, 0xdd, 0xa5, 0x1c, 0x25, 0x4d,
	0x8a, 0xa4, 0x48, 0x8a, 0xb6, 0x6f, 0x6d, 0x1f, 0xfa, 0x17, 0xf4, 0x25, 0x05, 0xfa, 0x98, 0x4a,
	0x05, 0x9a, 0x73, 0x70, 0x70, 0x9e, 0xce, 0x63, 0xde, 0x0e, 0x90, 0xe0, 0xdc, 0x70, 0xfe, 0x84,
	0xf3, 0x70, 0x80, 0x03, 0x1c, 0x70, 0x76, 0x76, 0x66, 0x76, 0x66, 0x76, 0x49, 0x2e, 0x65, 0x39,
	0xd0, 0xdb, 0x72, 0xe7, 0xdb, 0xef, 0x36, 0xbf, 0xf9, 0x79, 0x2e, 0xdf, 0x58, 0xf0, 0x7c, 0xcd,
	0xf4, 0x1e, 0xb4, 0xb6, 0xf3, 0x15, 0xab, 0x51, 0x70, 0x0d, 0xf3, 0x63, 0xbd, 0x6a, 0x16, 0x2a,
	0x8d, 0xea, 0x76, 0xc1, 0xde, 0xad, 0x15, 0xec, 0x6d, 0xfc, 0x9c, 0xb7, 0x1d, 0xcb, 0xb3, 0xd0,
	0xa8, 0x6e, 0x9b, 0xf9, 0xf6, 0xef, 0xec, 0x42, 0xcd, 0xb2, 0x6a, 0x75, 0xa3, 0x80, 0xdf, 0x6f,
	0xb7, 0x76, 0x0a, 0x46, 0xc3, 0xf6, 0xf6, 0x7d, 0xb1, 0x6c, 0x4e, 0x6c, 0xdc, 0x31, 0x8d, 0x7a,
	0xb5, 0xdc, 0xd0, 0xdd, 0x5d, 0x22, 0xb1, 0x48, 0x24, 0x74, 0xdb, 0x2c, 0xe8, 0xcd, 0xa6, 0xe5,
	0xe9, 0x9e, 0x69, 0x35, 0x5d, 0xd2, 0xfa, 0x12, 0xe7, 0x51, 0x7d, 0x7f, 0xc7, 0xf3, 0x15, 0x55,
	0x2e, 0xd4, 0x8c, 0xe6, 0x85, 0x3d, 0xbd, 0x6e, 0x56, 0x75, 0xcf, 0x28, 0x48, 0x0f, 0xe4, 0xe3,
	0xf3, 0x9c, 0xb0, 0xfb, 0x48, 0xaf, 0xd5, 0x0c, 0xa7, 0x60, 0xd9, 0x58, 0xbd, 0xc2, 0xd4, 0x15,
	0xce, 0x94, 0xd9, 0xdc, 0xb1, 0xb6, 0xeb, 0xd6, 0x47, 0x96, 0x6d, 0x34, 0x79, 0x93, 0x35, 0xcb,
	0x69, 0x50, 0x15, 0xed, 0x1f, 0xe4, 0xdb, 0xd7, 0xa3, 0xbe, 0xd5, 0xbd, 0xba, 0xee, 0x5e, 0xd0,
	0x6d, 0xfb, 0x82, 0x67, 0x59, 0xf5, 0x5d, 0xd3, 0x2b, 0x3c, 0x6c, 0x19, 0xce, 0x7e, 0xa1, 0x62,
	0xd5, 0xeb, 0x46, 0xa5, 0xad, 0xa7, 0x6c, 0xd9, 0x86, 0xa3, 0x7b, 0x96, 0x13, 0xf8, 0x71, 0xb3,
	0x7b, 0x5d, 0x8e, 0x5d, 0x29, 0x38, 0x86, 0x6b, 0xb5, 0x9c, 0x8a, 0x41, 0x1f, 0x88, 0x9a, 0x77,
	0xba, 0x08, 0xc7, 0xd7, 0x88, 0x3d, 0x62, 0xd9, 0x0c, 0xc2, 0xc3, 0xaf, 0xcb, 0x42, 0x4a, 0xdf,
	0xea, 0x5a, 0xab, 0xa4, 0x0f, 0xbf, 0x16, 0xf4, 0x69, 0xe7, 0xe0, 0xcc, 0x7b, 0x86, 0xe3, 0x9a,
	0x56, 0xb3, 0x64, 0xb8, 0xb6, 0xd5, 0x74, 0x0d, 0x94, 0x86, 0x91, 0x3d, 0xff, 0x55, 0x3a, 0x95,
	0x4b, 0x3d, 0x37, 0x56, 0x0a, 0x7e, 0x6a, 0x9f, 0xa7, 0x60, 0xb8, 0x64, 0xd4, 0x4c, 0xab, 0x89,
	0x5e, 0x84, 0x01, 0xb3, 0x8a, 0xdb, 0xc7, 0x8b, 0xb3, 0x79, 0xac, 0x3a, 0xef, 0xd8, 0x95, 0xfc,
	0x9d, 0xaa, 0xd1, 0xf4, 0xcc, 0x1d, 0xd3, 0x70, 0xae, 0x4f, 0x1d, 0x1e, 0x64, 0x26, 0x00, 0xd0,
	0xb0, 0x6b, 0x38, 0xa6, 0x5e, 0x7f, 0x2e, 0x55, 0x1a, 0x30, 0xab, 0x08, 0xc1, 0x60, 0x53, 0x6f,
	0x18, 0xe9, 0x01, 0xac, 0x1a, 0x3f, 0xa3, 0x1c, 0x8c, 0x57, 0x0d, 0xb7, 0xe2, 0x98, 0xd8, 0xd3,
	0xf4, 0x29, 0xdc, 0xc4, 0xbf, 0xba, 0x32, 0x7a, 0x78, 0x90, 0x19, 0x1c, 0x4d, 0xe5, 0x52, 0xda,
	0x26, 0x4c, 0xdf, 0x70, 0x0c, 0xdd, 0x33, 0x7c, 0x47, 0x4a, 0xc6, 0xc3, 0x96, 0xe1, 0x7a, 0x68,
	0x03, 0x46, 0x6c, 0x7d, 0xbf, 0x6e, 0xe9, 0x81, 0x53, 0x53, 0xf9, 0x60, 0x80, 0xe4, 0x89, 0x64,
	0x20, 0xa0, 0x5d, 0x83, 0x99, 0xb0, 0x0a, 0x12, 0xf8, 0x73, 0x30, 0xec, 0x18, 0x6e, 0xab, 0xee,
	0x45, 0xaa, 0x20, 0xed, 0x9a, 0x0d, 0x67, 0x4b, 0x86, 0x5e, 0x0d, 0xbb, 0xb0, 0xde, 0x31, 0x25,
	0x38, 0x01, 0x7f, 0x01, 0xc3, 0x78, 0x0c, 0xba, 0x38, 0x05, 0xe3, 0xc5, 0xc5, 0x7c, 0xd0, 0x8f,
	0xd8, 0xdc, 0xad, 0x76, 0xdb, 0x3d, 0x83, 0x80, 0xb3, 0x44, 0x64, 0xb5, 0xab, 0x80, 0x78, 0x8b,
	0x3d, 0x7b, 0xdc, 0x82, 0xe9, 0x77, 0xed, 0x6a, 0x3f, 0x69, 0x43, 0x45, 0xc1, 0xf1, 0x6c, 0xde,
	0x67, 0x8e, 0x7c, 0xc0, 0x2d, 0xbe, 0xef, 0x6f, 0xea, 0xee, 0x2e, 0x75, 0xfb, 0x1a, 0xcc, 0x84,
	0xcd, 0xf6, 0xec, 0xf8, 0xcb, 0x30, 0xbd, 0x65, 0xd4, 0x0d, 0xd1, 0xf1, 0xee, 0x92, 0xad, 0xcd,
	0xc1, 0x4c, 0xf8, 0x6b, 0xdf, 0xbe, 0xf6, 0x43, 0x0a, 0xce, 0xfe, 0xb5, 0xe9, 0x7a, 0x61, 0xa5,
	0x85, 0x76, 0x84, 0x75, 0xcf, 0x70, 0x88, 0xe2, 0x79, 0xb1, 0x6b, 0xda, 0x6d, 0x66, 0xb3, 0x56,
	0x22, 0x62, 0xe8, 0x22, 0x8c, 0x5a, 0x4e, 0xd5, 0x70, 0xca, 0xdb, 0xfb, 0x24, 0x29, 0xb3, 0xe1,
	0x4f, 0xee, 0x59, 0x8e, 0xd7, 0xfe, 0x60, 0x04, 0x8b, 0x5d, 0xdf, 0xe7, 0x7a, 0xff, 0x54, 0xf7,
	0xbd, 0x8f, 0x2e, 0xc2, 0xb0, 0xad, 0xd7, 0xcc, 0x66, 0x2d, 0x3d, 0x88, 0xbf, 0x4a, 0x87, 0xbf,
	0xba, 0xdb, 0x6e, 0xd3, 0xfd, 0x2f, 0x7c, 0x39, 0xad, 0x01, 0xd3, 0x2c, 0x3e, 0x97, 0xe6, 0x7d,
	0x03, 0x46, 0xfc, 0xbc, 0xba, 0xe9, 0x54, 0xee, 0x94, 0xba, 0xbf, 0x89, 0x00, 0xda, 0x80, 0x41,
	0x5b, 0xaf, 0x19, 0x24, 0xb0, 0x39, 0xc9, 0xa4, 0x71, 0xa7, 0xb9, 0x63, 0x95, 0xb0, 0x8c, 0xf6,
	0x93, 0x14, 0x0c, 0xbd, 0xa7, 0xb7, 0xea, 0xde, 0x31, 0x13, 0x43, 0xfb, 0x2b, 0x5b, 0xf7, 0x1e,
	0xe0, 0xbc, 0x8c, 0x95, 0xf0, 0x73, 0x3b, 0x48, 0xd7, 0xa8, 0x38, 0x86, 0xe7, 0xa6, 0x87, 0xc4,
	0x20, 0xef, 0xe1, 0x86, 0x52, 0x20, 0xc0, 0x11, 0xcb, 0xab, 0x80, 0x7c, 0x56, 0xc0, 0x71, 0x04,
	0x90, 0x78, 0x5e, 0x1c, 0x20, 0x67, 0x98, 0x2e, 0x5f, 0x90, 0xd2, 0xca, 0xd5, 0x80, 0x99, 0x88,
	0x02, 0x92, 0xf2, 0x67, 0x05, 0xa8, 0x4b, 0x0a, 0x02, 0xa4, 0x5b, 0x30, 0xd5, 0x1e, 0xe2, 0x21,
	0xf3, 0x8f, 0x95, 0x53, 0x5e, 0xf6, 0x59, 0x2c, 0xa1, 0xbb, 0x2e, 0x20, 0x7f, 0x68, 0x27, 0xcc,
	0x57, 0x22, 0x3e, 0xb9, 0x1a, 0xd0, 0x58, 0x42, 0xa7, 0x5f, 0x02, 0xe4, 0xf3, 0x41, 0x82, 0x2c,
	0x6b, 0xb3, 0x01, 0x15, 0x85, 0x8c, 0x6b, 0xdf, 0xa7, 0x60, 0xaa, 0x3d, 0xd6, 0x42, 0x2a, 0x4f,
	0x10, 0x95, 0xec, 0x02, 0xa2, 0xe1, 0x31, 0x26, 0x79, 0x5e, 0x64, 0x12, 0xb9, 0xa3, 0x93, 0x10,
	0xc9, 0x9f, 0x52, 0x00, 0x64, 0x42, 0xf2, 0x8e, 0x5e, 0x3b, 0x6e, 0x36, 0xe1, 0xa6, 0x3e, 0x83,
	0xa1, 0xa9, 0x4f, 0x5b, 0x9f, 0x63, 0xd8, 0x56, 0x7a, 0xc8, 0xd7, 0xd7, 0x7e, 0x46, 0x73, 0x30,
	0x5c, 0xb1, 0x1a, 0x0d, 0xd3, 0x4b, 0x0f, 0xe3, 0xb7, 0xe4, 0x17, 0xba, 0x08, 0x63, 0xba, 0xe3,
	0x99, 0x3b, 0x7a, 0xc5, 0x73, 0xd3, 0x23, 0x38, 0x39, 0x88, 0x25, 0x67, 0x93, 0x34, 0x95, 0x98,
	0x10, 0xc7, 0x42, 0x77, 0x60, 0x9e, 0x90, 0x08, 0x4d, 0x42, 0x00, 0xa9, 0xbc, 0x38, 0xb4, 0x66,
	0xb8, 0x8c, 0x33, 0x69, 0xca, 0x47, 0xb7, 0x21, 0x2d, 0xab, 0x22, 0xbd, 0x77, 0x5e, 0x18, 0x30,
	0x6a, 0x55, 0xc1, 0xa8, 0xf1, 0x60, 0x16, 0x13, 0x85, 0xe4, 0xd2, 0x63, 0xa5, 0xa7, 0x5b, 0x30,
	0x27, 0x5a, 0x4d, 0xe4, 0xfd, 0xa7, 0x30, 0x4f, 0x38, 0xa3, 0xdf, 0x94, 0x26, 0xa2, 0xac, 0xdb,
	0x90, 0x96, 0xcd, 0x27, 0x0a, 0xe4, 0x1a, 0xcc, 0x13, 0xfe, 0x49, 0xd8, 0x11, 0x5a, 0x16, 0xd2,
	0xb2, 0x06, 0x42, 0x63, 0xbf, 0x49, 0xc1, 0x2c, 0x1e, 0xe7, 0x92, 0xf2, 0x13, 0xc4, 0x65, 0x2d,
	0x98, 0x0f, 0xc7, 0xc8, 0x08, 0x2d, 0x2f, 0x12, 0x5a, 0x04, 0x16, 0x92, 0xb0, 0xda, 0x57, 0x29,
	0x18, 0xdf, 0xb4, 0xed, 0xba, 0x59, 0xc1, 0xee, 0x3c, 0xb9, 0xd5, 0xd3, 0x1b, 0x01, 0x27, 0x70,
	0xde, 0xb0, 0x6e, 0x16, 0x06, 0xc3, 0x2c, 0x47, 0x5a, 0x9c, 0x38, 0x25, 0x98, 0xd7, 0x21, 0xa3,
	0x50, 0x46, 0xd2, 0x79, 0x41, 0x80, 0x76, 0x84, 0x32, 0xb6, 0x3e, 0xc1, 0x83, 0x5d, 0xe1, 0xd6,
	0x63, 0xe5, 0x98, 0xdb, 0x30, 0x2f, 0x99, 0x4d, 0x16, 0xc0, 0x3f, 0x04, 0xc3, 0xfc, 0x08, 0x32,
	0x9b, 0x88, 0x67, 0x5e, 0x87, 0x8c, 0xc2, 0x81, 0x64, 0xc1, 0x6c, 0x06, 0x3c, 0x91, 0xb8, 0x3f,
	0xb4, 0x05, 0xc8, 0x28, 0x54, 0x10, 0xae, 0xf9, 0x6d, 0x0a, 0xe6, 0xda, 0xe3, 0x50, 0x99, 0xab,
	0x13, 0x43, 0x36, 0x8f, 0x20, 0x2d, 0x04, 0xc9, 0xd8, 0xa6, 0x20, 0xb2, 0x4d, 0x14, 0x24, 0x92,
	0xd0, 0xcd, 0x37, 0x03, 0x70, 0x7a, 0xf3, 0x91, 0x5b, 0xaa, 0xba, 0x77, 0x9a, 0xae, 0xa7, 0x37,
	0x2b, 0xc6, 0x71, 0x4f, 0xa4, 0xd6, 0x60, 0xb2, 0xaa, 0x7b, 0xfa, 0xb6, 0xee, 0x1a, 0xe5, 0x07,
	0x96, 0xeb, 0x91, 0xe9, 0xd4, 0x44, 0xf0, 0xf2, 0xb6, 0xe5, 0x7a, 0x21, 0x21, 0x6c, 0x63, 0x28,
	0x2c, 0xf4, 0x56, 0xdb, 0x16, 0x2f, 0xd4, 0x72, 0x0d, 0x87, 0xcc, 0xb5, 0xa8, 0xd0, 0xbb, 0xae,
	0xe1, 0xa0, 0x57, 0xe0, 0x2c, 0x15, 0xb2, 0x75, 0xd7, 0x7d, 0x64, 0x39, 0xd5, 0xf4, 0x88, 0xb8,
	0xb3, 0x40, 0xd6, 0x7e, 0x53, 0x81, 0xe8, 0x5d, 0x22, 0xc9, 0xf1, 0xe3, 0xdb, 0xb0, 0x40, 0x28,
	0x2d, 0x94, 0xbe, 0x00, 0x9c, 0x45, 0x71, 0x20, 0xa7, 0xb9, 0x5e, 0x0b, 0x7f, 0x41, 0x59, 0xf2,
	0x2e, 0x2c, 0xaa, 0x55, 0x12, 0x24, 0x5c, 0x14, 0x86, 0x66, 0xb4, 0xca, 0x60, 0x74, 0x7e, 0x04,
	0x19, 0x4c, 0x5a, 0x4a, 0x17, 0x1f, 0x2b, 0x5d, 0xbe, 0x05, 0x59, 0x95, 0xe5, 0xc4, 0x91, 0x7c,
	0x99, 0x82, 0x05, 0x42, 0x5a, 0x47, 0x95, 0xef, 0x44, 0xdc, 0x79, 0x17, 0x16, 0xd5, 0x6e, 0x24,
	0x8e, 0x6c, 0x0b, 0x16, 0x08, 0xfd, 0xf5, 0xd1, 0x4b, 0xda, 0x32, 0x2c, 0xaa, 0xb5, 0x10, 0x1e,
	0xfd, 0x7d, 0x0a, 0x32, 0x98, 0x62, 0x94, 0x46, 0x4e, 0x10, 0x95, 0x7e, 0x0a, 0x0b, 0x72, 0x9c,
	0x8c, 0x4d, 0x8b, 0x22, 0x9b, 0xc6, 0xe0, 0x24, 0x09, 0xa1, 0x7e, 0x3d, 0x00, 0x63, 0x37, 0xac,
	0xa6, 0xa7, 0x9b, 0x4d, 0xc3, 0x39, 0x6e, 0x2e, 0x5d, 0x87, 0xd3, 0x95, 0xc0, 0xb6, 0xcf, 0x93,
	0x3e, 0x99, 0x4e, 0xd2, 0xb7, 0x98, 0x28, 0x97, 0x00, 0xcc, 0x86, 0x5e, 0x33, 0xca, 0xdc, 0x3a,
	0x75, 0x0c, 0xbf, 0x29, 0xb5, 0x17, 0xab, 0x0b, 0xe0, 0xff, 0x28, 0x7b, 0x7a, 0x8d, 0x70, 0xe8,
	0x28, 0x7e, 0xd1, 0x5e, 0x66, 0x6f, 0xc0, 0x59, 0xbf, 0xd1, 0x6e, 0xd5, 0xeb, 0x65, 0xdb, 0xaa,
	0x9b, 0x95, 0x7d, 0xcc, 0x9f, 0x63, 0xa5, 0x33, 0xb8, 0xe1, 0x6e, 0xab, 0x5e, 0xbf, 0x8b, 0x5f,
	0xb7, 0x57, 0xbd, 0x55, 0xb3, 0x66, 0xb8, 0x5e, 0x7a, 0xd4, 0x5f, 0xf5, 0xfa, 0xbf, 0x38, 0x12,
	0x7d, 0x0d, 0xe6, 0x7c, 0xc6, 0xa3, 0x29, 0x0b, 0x10, 0x79, 0x41, 0x1c, 0xcf, 0xd3, 0xac, 0x9f,
	0x98, 0x30, 0xa5, 0xce, 0x5b, 0xc1, 0x62, 0x98, 0x53, 0x44, 0x7a, 0xfc, 0x9c, 0x30, 0x22, 0x95,
	0x8a, 0xd8, 0x56, 0xd5, 0x4c, 0x9b, 0xb6, 0x24, 0x77, 0x1e, 0x2b, 0x57, 0x6e, 0xf9, 0x8b, 0xe6,
	0x3e, 0x5d, 0xff, 0x04, 0xe6, 0x7c, 0x66, 0xea, 0x33, 0x97, 0x89, 0x68, 0xf1, 0x56, 0xb0, 0x72,
	0xee, 0x33, 0x88, 0x57, 0x61, 0xce, 0xa7, 0xb1, 0x84, 0x3d, 0xa0, 0x65, 0x82, 0x95, 0xaf, 0xe4,
	0x88, 0xf6, 0xeb, 0x14, 0xcc, 0xb4, 0xa9, 0x41, 0x52, 0x7d, 0x82, 0xd8, 0xcf, 0xf5, 0x67, 0xcb,
	0x34, 0x44, 0x97, 0x9b, 0xd7, 0x0b, 0xc4, 0xa7, 0x06, 0x41, 0xd2, 0x35, 0xeb, 0xcd, 0xe6, 0x9e,
	0xe9, 0x58, 0xcd, 0x86, 0xd1, 0xf4, 0x7e, 0x04, 0x6b, 0x56, 0xce, 0x9b, 0x6e, 0x56, 0x56, 0xbc,
	0xb8, 0xbc, 0x66, 0x0d, 0x29, 0xeb, 0xbc, 0x4a, 0xe2, 0xc5, 0x85, 0x35, 0xab, 0xc2, 0xad, 0xe3,
	0x58, 0xb3, 0x1e, 0x41, 0x00, 0x74, 0xcd, 0x7a, 0x04, 0x99, 0xed, 0x6f, 0xcd, 0x7a, 0x04, 0xc1,
	0xd0, 0x35, 0x6b, 0xe2, 0xfe, 0x60, 0x6b, 0x56, 0x85, 0x3b, 0x74, 0xcd, 0xaa, 0xcc, 0xd5, 0x49,
	0x5b, 0xb3, 0x72, 0x41, 0x76, 0xb7, 0x66, 0x0d, 0x41, 0x22, 0x09, 0xdd, 0xfc, 0x63, 0x0a, 0x46,
	0xdf, 0xd4, 0x9b, 0xe6, 0x4e, 0x3b, 0xa1, 0x4f, 0x8c, 0x6b, 0x6e, 0xc2, 0xac, 0x4f, 0x0f, 0x81,
	0x2b, 0x41, 0x17, 0x9f, 0x17, 0x87, 0x03, 0xb7, 0xa3, 0x4f, 0x65, 0x29, 0xcb, 0x6c, 0x05, 0x33,
	0x20, 0xa6, 0x86, 0x1e, 0xc0, 0x86, 0x41, 0xad, 0x52, 0x13, 0x20, 0xda, 0x81, 0xe9, 0xf6, 0x40,
	0x17, 0x5d, 0x79, 0xac, 0xe4, 0x72, 0xdd, 0x9f, 0x2a, 0xf5, 0xe5, 0xf7, 0x3e, 0xcc, 0xfa, 0xa3,
	0xba, 0xaf, 0x24, 0x26, 0x22, 0x94, 0xad, 0x60, 0xba, 0xd4, 0x57, 0x00, 0x57, 0x61, 0xd6, 0xe7,
	0x81, 0x64, 0xa9, 0xd7, 0xd2, 0xc1, 0x7c, 0x47, 0xf4, 0x42, 0xfb, 0x55, 0xca, 0x3f, 0x97, 0x17,
	0x15, 0x9f, 0x20, 0x06, 0x79, 0xe8, 0x1f, 0x23, 0x04, 0x11, 0xba, 0xdc, 0x61, 0x87, 0x40, 0x1f,
	0xca, 0xde, 0x4f, 0xb8, 0xdf, 0x35, 0xec, 0x6f, 0xee, 0x3c, 0x81, 0xf2, 0x03, 0x6f, 0xdf, 0x0e,
	0x56, 0x64, 0xf8, 0x19, 0x4d, 0xc1, 0xa9, 0x5d, 0x63, 0x9f, 0xac, 0xc0, 0xda, 0x8f, 0xe8, 0x36,
	0x8c, 0xee, 0xe9, 0xad, 0xba, 0x57, 0x36, 0xab, 0x78, 0xe9, 0x15, 0xe9, 0xda, 0xdc, 0xe1, 0x41,
	0x06, 0xc1, 0x18, 0x1a, 0x31, 0x9b, 0x9e, 0x51, 0x33, 0x9c, 0x2b, 0x43, 0xe4, 0x28, 0x15, 0x7f,
	0x7e, 0xa7, 0x8a, 0xb6, 0x60, 0x5a, 0x7f, 0xe4, 0x96, 0x9d, 0xaa, 0x5b, 0x36, 0xc9, 0x8a, 0xb6,
	0xad, 0x74, 0x24, 0x0e, 0x91, 0x53, 0x7a, 0x68, 0x05, 0x7c, 0xa7, 0xaa, 0xaa, 0xa6, 0x22, 0x7b,
	0x63, 0x5d, 0x94, 0x05, 0x05, 0x15, 0x14, 0x52, 0x35, 0x55, 0xa0, 0xa2, 0x73, 0x89, 0x0f, 0x91,
	0x14, 0xaa, 0xa9, 0xc2, 0x2e, 0x1c, 0x47, 0x35, 0x55, 0x62, 0x8f, 0x69, 0x35, 0x55, 0xe2, 0xb4,
	0xf5, 0x57, 0x4d, 0x95, 0xd8, 0x71, 0x5a, 0x4d, 0x95, 0x24, 0xd9, 0xac, 0x9a, 0x2a, 0x6c, 0x9f,
	0x56, 0x53, 0x85, 0x95, 0x9e, 0xbc, 0x6a, 0x2a, 0x3f, 0xbe, 0xee, 0xaa, 0xa9, 0x82, 0xfe, 0x4e,
	0xc2, 0x67, 0xff, 0x3c, 0x00, 0xa3, 0x41, 0x99, 0xc0, 0x13, 0x60, 0x34, 0xbc, 0x81, 0x34, 0xa8,
	0x2c, 0x74, 0x18, 0x0a, 0x15, 0x3a, 0xbc, 0x0f, 0xa7, 0x49, 0x7d, 0x44, 0xd9, 0xd3, 0x6b, 0x1d,
	0xd9, 0x6d, 0xe1, 0xf0, 0x20, 0x33, 0xcf, 0xb3, 0x1b, 0x57, 0xe9, 0x51, 0x9a, 0xd8, 0xa3, 0xcf,
	0x21, 0x86, 0xa2, 0x33, 0x32, 0x5a, 0x37, 0xd1, 0xc5, 0x64, 0x82, 0xca, 0xca, 0x33, 0x32, 0xa6,
	0xa6, 0xf3, 0xc4, 0x80, 0xca, 0x0a, 0x33, 0x32, 0xd1, 0x95, 0xe3, 0x98, 0x91, 0xf5, 0xe5, 0x37,
	0x9d, 0x91, 0xf5, 0x95, 0xc4, 0xfe, 0x66, 0x64, 0x7d, 0x05, 0x40, 0x67, 0x64, 0xc9, 0x52, 0xcf,
	0x66, 0x64, 0xa2, 0x17, 0x74, 0x46, 0x26, 0x2a, 0x3e, 0x79, 0x33, 0xb2, 0x20, 0xc2, 0xee, 0x66,
	0x64, 0xac, 0xf7, 0x93, 0x30, 0xd8, 0x97, 0x29, 0x80, 0xcd, 0x47, 0xee, 0x3d, 0xc3, 0xd9, 0x33,
	0x8f, 0xfd, 0xf4, 0x51, 0x55, 0x4e, 0xc5, 0x9c, 0xe9, 0xa6, 0xf6, 0x87, 0x93, 0x96, 0xcb, 0xa9,
	0x78, 0x55, 0x9d, 0xeb, 0x78, 0x38, 0x69, 0xa1, 0x9c, 0x4a, 0x76, 0xe9, 0x38, 0xca, 0xa9, 0xfa,
	0xf6, 0x9e, 0x96, 0x53, 0xf5, 0x9d, 0xd2, 0xfe, 0xca, 0xa9, 0xfa, 0x0e, 0x84, 0x96, 0x53, 0x25,
	0xed, 0x08, 0x56, 0x4e, 0x25, 0xfb, 0x42, 0xcb, 0xa9, 0x64, 0xe5, 0x27, 0xaf, 0x9c, 0x8a, 0xc5,
	0xd8, 0x5d, 0x39, 0x15, 0x8f, 0x85, 0x24, 0xec, 0xf2, 0x87, 0x01, 0x80, 0x2d, 0xc3, 0xae, 0x5b,
	0xfb, 0x4f, 0x60, 0x67, 0x1a, 0x5d, 0x86, 0xd1, 0xa0, 0x72, 0x93, 0x24, 0x4a, 0x41, 0x9b, 0xd7,
	0x87, 0x0f, 0x0f, 0x32, 0x03, 0xda, 0x53, 0x25, 0x2a, 0x8b, 0x2e, 0xc3, 0x78, 0xf0, 0xdc, 0x9e,
	0x2a, 0x0d, 0xc5, 0xa1, 0x0b, 0x02, 0xc9, 0x3b, 0x55, 0x74, 0x0d, 0x26, 0x76, 0x5b, 0xdb, 0x46,
	0xb9, 0x52, 0x6f, 0xb9, 0x1e, 0x29, 0x80, 0x08, 0xed, 0xbd, 0xbd, 0xd1, 0xda, 0x36, 0x6e, 0xf8,
	0x8d, 0xd4, 0xec, 0xf8, 0x2e, 0x7b, 0x89, 0x5e, 0x81, 0x33, 0xbc, 0x86, 0x8e, 0x2b, 0xc6, 0x49,
	0xee, 0xe3, 0xd0, 0x64, 0x8c, 0xd2, 0x29, 0xcb, 0x7e, 0x37, 0x63, 0x9f, 0x93, 0x96, 0xe9, 0x94,
	0x57, 0xd5, 0x79, 0x1c, 0x73, 0xd2, 0x02, 0x9d, 0xca, 0x2e, 0x1d, 0x07, 0x9d, 0xf6, 0xed, 0x3d,
	0xa5, 0xd3, 0xbe, 0x53, 0xda, 0x1f, 0x9d, 0xf6, 0x1d, 0x08, 0xa5, 0xd3, 0xa4, 0x1d, 0xc1, 0xe8,
	0x54, 0xf6, 0x85, 0xd2, 0xa9, 0xac, 0xfc, 0xe4, 0xd1, 0x29, 0x8b, 0xb1, 0x3b, 0x3a, 0xe5, 0xb1,
	0x90, 0xf4, 0xa4, 0x8f, 0xe3, 0x90, 0x1f, 0xc1, 0x49, 0x1f, 0xe7, 0x4d, 0x37, 0xe7, 0x51, 0xbc,
	0xb8, 0x7c, 0xd2, 0x17, 0x52, 0xd6, 0xf9, 0x6c, 0x89, 0x17, 0x17, 0x4e, 0xfa, 0x14, 0x6e, 0x1d,
	0xc7, 0x49, 0xdf, 0x11, 0x04, 0x40, 0x4f, 0xfa, 0x8e, 0x20, 0xb3, 0xfd, 0x9d, 0xf4, 0x1d, 0x41,
	0x30, 0xf4, 0xa4, 0x2f, 0x71, 0x7f, 0xb0, 0x93, 0x3e, 0x85, 0x3b, 0xf4, 0xa4, 0x4f, 0x99, 0xab,
	0x93, 0x76, 0xd2, 0xc7, 0x05, 0xd9, 0xdd, 0x49, 0x5f, 0x08, 0x12, 0x09, 0xe8, 0xa6, 0xf8, 0x37,
	0x30, 0x78, 0xa3, 0x51, 0xdd, 0x46, 0x6f, 0x03, 0xbc, 0x66, 0x04, 0xa5, 0xf8, 0x68, 0x4e, 0x02,
	0xd1, 0xcd, 0x86, 0xed, 0xed, 0x67, 0x33, 0x52, 0x15, 0x3e, 0xed, 0xa7, 0xa9, 0x2f, 0xbe, 0xfb,
	0xdd, 0xbf, 0x0f, 0x00, 0x1a, 0x2d, 0x90, 0xbd, 0xa3, 0xe2, 0xf7, 0x83, 0x30, 0x42, 0xae, 0x3c,
	0xa2, 0x6d, 0x18, 0xf6, 0xc7, 0x3f, 0x5a, 0xe2, 0x6a, 0x22, 0xe4, 0xab, 0xc3, 0xd9, 0xe5, 0xa8,
	0x66, 0x62, 0x26, 0x83, 0xcd, 0x4c, 0x6b, 0xa3, 0x05, 0xc7, 0x57, 0x7d, 0x85, 0x8e, 0x84, 0x2a,
	0x0c, 0xb6, 0x07, 0x28, 0x5a, 0xe0, 0x6f, 0x51, 0x0a, 0xf7, 0x82, 0xb3, 0x8b, 0xea, 0x46, 0xa2,
	0x7d, 0x15, 0x6b, 0x5f, 0x40, 0x99, 0x40, 0x7b, 0xe1, 0x13, 0xb3, 0x9a, 0x0f, 0xee, 0x92, 0x97,
	0xcd, 0xea, 0xa7, 0xe8, 0x7f, 0x52, 0x30, 0xec, 0x0f, 0x1e, 0x3e, 0x14, 0xc5, 0x75, 0x5e, 0x3e,
	0x14, 0xd5, 0xb5, 0x5b, 0x6d, 0xe7, 0x97, 0xdf, 0x66, 0x06, 0x46, 0x9f, 0xc2, 0x26, 0xef, 0x67,
	0x57, 0x99, 0x49, 0x12, 0x50, 0x5e, 0x30, 0x4d, 0x23, 0xbd, 0x7f, 0xbe, 0xd8, 0x83, 0x34, 0xda,
	0x83, 0x61, 0x7f, 0x78, 0xf1, 0x0e, 0x2b, 0xae, 0xf1, 0xf2, 0x0e, 0x2b, 0xef, 0xe9, 0x5e, 0x38,
	0x3c, 0xc8, 0x8c, 0x06, 0x97, 0xce, 0xfd, 0x4c, 0x6d, 0xc4, 0x64, 0xea, 0x1d, 0x18, 0x6c, 0x63,
	0x9a, 0xef, 0x0f, 0xe9, 0x96, 0x6f, 0x76, 0x49, 0xd5, 0xe8, 0x2a, 0x50, 0x45, 0xcc, 0x64, 0xc9,
	0x3f, 0x50, 0x53, 0xa9, 0xe2, 0x2f, 0x06, 0x61, 0xd8, 0xbf, 0x07, 0x87, 0xca, 0x14, 0x5e, 0x8b,
	0x22, 0x7e, 0xf8, 0x8b, 0x80, 0xd9, 0xa5, 0x88, 0x56, 0x62, 0x2d, 0x8d, 0xad, 0x21, 0x6d, 0xa4,
	0x80, 0x8f, 0x78, 0x38, 0x6c, 0xe9, 0x04, 0x5b, 0xd9, 0x30, 0x7c, 0x42, 0xca, 0x17, 0x94, 0x6d,
	0x44, 0x75, 0x0e, 0xab, 0xce, 0xa2, 0x34, 0x51, 0x2d, 0xa7, 0xeb, 0x6b, 0x06, 0xac, 0x45, 0x11,
	0x39, 0x51, 0x41, 0x28, 0xae, 0x5f, 0x6a, 0x55, 0x0e, 0x56, 0xef, 0x67, 0x73, 0xd4, 0x5e, 0x47,
	0x54, 0x9d, 0x2b, 0x76, 0x2f, 0x8c, 0x1c, 0x0a, 0xaa, 0x45, 0x11, 0x35, 0x51, 0xce, 0xaa, 0xae,
	0x6b, 0x9e, 0x3b, 0x3c, 0xc8, 0x8c, 0x90, 0xdb, 0xca, 0x7e, 0x86, 0x36, 0xa2, 0x33, 0xf4, 0x36,
	0x01, 0x54, 0x36, 0x8c, 0x99, 0x90, 0xbd, 0x45, 0x45, 0x1b, 0x83, 0xd3, 0x19, 0x6c, 0x63, 0x0c,
	0x05, 0x1d, 0xcc, 0xa1, 0xe9, 0xbf, 0x87, 0x60, 0x9c, 0xbb, 0x89, 0x84, 0x2c, 0x0a, 0xa9, 0x55,
	0x09, 0x34, 0xe2, 0xa5, 0xac, 0xac, 0x16, 0x27, 0x42, 0x6c, 0x2f, 0x63, 0xdb, 0x69, 0x6d, 0xb2,
	0xc0, 0x6d, 0xd3, 0x73, 0x10, 0x7b, 0x48, 0x20, 0xb6, 0x22, 0xc0, 0x48, 0x32, 0x96, 0x8b, 0x16,
	0x20, 0xa6, 0x9e, 0xc1, 0xa6, 0x72, 0x68, 0x39, 0x64, 0x4a, 0x4e, 0xe8, 0x4f, 0x19, 0xe4, 0x56,
	0x25, 0x50, 0xc5, 0x05, 0x19, 0x75, 0x87, 0x4e, 0xb3, 0x39, 0xf0, 0x55, 0xb3, 0xcf, 0x08, 0xf6,
	0x3b, 0x42, 0xf0, 0x52, 0xb1, 0xd7, 0x4f, 0xd0, 0x3f, 0xa5, 0x28, 0x12, 0x57, 0x25, 0xac, 0xc5,
	0xc5, 0x10, 0x79, 0xf7, 0xee, 0xb2, 0x3f, 0x9d, 0x66, 0x2d, 0x7e, 0x36, 0x37, 0x3a, 0x65, 0x53,
	0x27, 0xf0, 0x5c, 0x11, 0x20, 0x28, 0x39, 0xb1, 0x1a, 0x25, 0xc0, 0x80, 0x3a, 0x8b, 0x6d, 0x9e,
	0x41, 0x61, 0xb0, 0x70, 0x70, 0xfd, 0xdf, 0x21, 0x98, 0xe0, 0xef, 0xb2, 0xa0, 0x87, 0x14, 0xaf,
	0x12, 0x18, 0xe5, 0x8b, 0x3d, 0xd9, 0xb5, 0x58, 0x19, 0x09, 0xb1, 0x3a, 0x67, 0x89, 0xa5, 0xde,
	0x25, 0x88, 0x15, 0x00, 0xa9, 0x30, 0xb7, 0x1a, 0x23, 0x21, 0x61, 0x96, 0x37, 0x26, 0x67, 0xf9,
	0x67, 0x0c, 0xb3, 0x12, 0x20, 0xe3, 0x03, 0x8d, 0xbc, 0x90, 0x25, 0xa1, 0x36, 0xec, 0x41, 0x57,
	0xa8, 0xed, 0xed, 0x13, 0xf4, 0x2f, 0x0c, 0xb5, 0x12, 0x24, 0xe3, 0xa3, 0x88, 0xbe, 0xc7, 0xf5,
	0xe2, 0xe1, 0x41, 0x66, 0x32, 0x74, 0xb5, 0x91, 0x02, 0x37, 0x3e, 0xa5, 0x15, 0x02, 0xdc, 0x5c,
	0x18, 0x97, 0x0a, 0x3f, 0xb4, 0x48, 0x09, 0x15, 0x74, 0x79, 0xab, 0x1c, 0x74, 0xff, 0x38, 0x04,
	0x67, 0x84, 0xbb, 0x03, 0xe8, 0xef, 0x29, 0x7a, 0xd7, 0x25, 0x64, 0xaa, 0xae, 0x53, 0x64, 0x9f,
	0xe9, 0x24, 0x46, 0xbc, 0x59, 0xc3, 0xde, 0x2c, 0x69, 0xa8, 0x20, 0x96, 0x6a, 0x70, 0x40, 0xfe,
	0x8c, 0x00, 0x79, 0x4d, 0x80, 0xa9, 0xd2, 0xf2, 0xd3, 0xf1, 0x42, 0xc1, 0x3f, 0x6c, 0xd8, 0xee,
	0x3a, 0x5a, 0x93, 0xed, 0xca, 0x1d, 0xf0, 0x1d, 0xc3, 0xf4, 0xba, 0x84, 0xd7, 0x4e, 0xe1, 0xc7,
	0xdd, 0x95, 0xd1, 0x3e, 0xe6, 0x90, 0xdd, 0xcc, 0x9e, 0x53, 0x39, 0xd3, 0x11, 0xde, 0x97, 0x8b,
	0x89, 0xbe, 0x43, 0xff, 0xc9, 0x30, 0xbe, 0x2e, 0xe1, 0xb7, 0x53, 0x54, 0xb1, 0x37, 0x6d, 0x5e,
	0x3d, 0x3c, 0xc8, 0x4c, 0x89, 0xb7, 0xea, 0xfc, 0x84, 0x6f, 0x74, 0x95, 0xf0, 0x26, 0x41, 0xfc,
	0x9a, 0x80, 0x67, 0xa5, 0x57, 0xeb, 0x71, 0x42, 0x0c, 0xf7, 0x59, 0xec, 0xc0, 0x0c, 0x52, 0x20,
	0x8d, 0x03, 0xff, 0x7f, 0x0c, 0x01, 0xb0, 0xd2, 0x71, 0xb4, 0x4b, 0x71, 0x9f, 0x13, 0x01, 0x2d,
	0xd6, 0xd0, 0x67, 0x57, 0x63, 0x24, 0x88, 0x0f, 0x8b, 0xd8, 0x87, 0x39, 0x6d, 0xbc, 0x40, 0xaf,
	0xa3, 0x70, 0x30, 0x6f, 0x10, 0x98, 0x2f, 0x87, 0x11, 0x2c, 0x19, 0x5a, 0x89, 0x6c, 0x27, 0x66,
	0x9e, 0xc6, 0x66, 0x96, 0xd1, 0x22, 0x67, 0x46, 0x4e, 0xf2, 0xff, 0x31, 0x54, 0xe7, 0x44, 0xb8,
	0xc6, 0x05, 0x17, 0x71, 0xcb, 0x41, 0xab, 0x73, 0x58, 0xfe, 0x20, 0xfb, 0x74, 0xc8, 0x76, 0x47,
	0x10, 0x17, 0x8a, 0xbd, 0x7d, 0x80, 0xbe, 0x60, 0xe8, 0xcd, 0x89, 0xb0, 0x8c, 0xf3, 0x3e, 0xea,
	0x6a, 0xc4, 0x0b, 0x87, 0x07, 0x99, 0x71, 0xee, 0xe2, 0x92, 0x9f, 0xc2, 0x8d, 0xf8, 0x14, 0xfe,
	0x2d, 0xc1, 0xe9, 0x72, 0x18, 0x82, 0x92, 0xfd, 0x5c, 0x44, 0x3b, 0x43, 0xe7, 0x34, 0xb6, 0x37,
	0x89, 0x78, 0x64, 0x08, 0xd3, 0x09, 0xbe, 0xcc, 0x38, 0x6e, 0x3a, 0x21, 0xd7, 0x5c, 0xcb, 0xd3,
	0x09, 0x55, 0xcd, 0x36, 0x9b, 0x4e, 0x18, 0x9c, 0xa5, 0x8e, 0xd3, 0x09, 0x85, 0xb9, 0xd5, 0x18,
	0x09, 0x69, 0x3a, 0xc1, 0x1b, 0xeb, 0x6d, 0x3a, 0x11, 0x1f, 0x68, 0x64, 0xad, 0xbc, 0x34, 0x9d,
	0x08, 0x7b, 0xd0, 0xd5, 0x74, 0xa2, 0xb7, 0x4f, 0x62, 0xa7, 0x13, 0xf1, 0x51, 0x44, 0x97, 0xd8,
	0x93, 0xe9, 0x04, 0xd7, 0x44, 0xa7, 0x13, 0xf1, 0x29, 0x8d, 0x98, 0x4e, 0x28, 0xfc, 0xd0, 0x22,
	0x25, 0x54, 0xd3, 0x09, 0xde, 0x2a, 0x07, 0xdd, 0xcf, 0x87, 0x60, 0x8c, 0xd6, 0xb7, 0xa2, 0x07,
	0x14, 0xb7, 0x2b, 0x22, 0x26, 0x85, 0x32, 0xdf, 0x6c, 0x2e, 0x5a, 0x80, 0xd8, 0x5e, 0xc0, 0xb6,
	0x67, 0x35, 0x28, 0x34, 0x02, 0x03, 0x2c, 0xe7, 0x1f, 0x12, 0xb8, 0x2e, 0x85, 0xc1, 0x28, 0x5a,
	0x59, 0x8e, 0x6a, 0x0e, 0x4f, 0x50, 0xd0, 0x02, 0xb3, 0x21, 0xa7, 0xf4, 0x1b, 0x86, 0xd2, 0x15,
	0x11, 0x81, 0x31, 0x61, 0xa9, 0xab, 0xaf, 0xb5, 0x0f, 0x39, 0x7c, 0xfe, 0x5d, 0x76, 0x8d, 0x37,
	0xdc, 0x11, 0x9c, 0xf9, 0x62, 0x4f, 0xf2, 0xe8, 0x33, 0x0a, 0xcc, 0x15, 0x11, 0x74, 0x31, 0x8e,
	0x47, 0x14, 0x6c, 0x5f, 0x3a, 0x3c, 0xc8, 0x00, 0xbb, 0x99, 0xe0, 0x67, 0x6e, 0x23, 0x36, 0x73,
	0xf7, 0x09, 0x18, 0x85, 0x7d, 0x26, 0xd1, 0xf6, 0x8a, 0xba, 0x99, 0xc1, 0x10, 0x61, 0x63, 0x13,
	0x88, 0x83, 0x02, 0x87, 0xc1, 0xef, 0x07, 0x61, 0x84, 0xd4, 0x23, 0xc6, 0x6d, 0x75, 0x86, 0x4a,
	0x32, 0xe5, 0xad, 0x4e, 0xa1, 0x90, 0x93, 0x6d, 0x75, 0x06, 0xff, 0x3f, 0x5a, 0xa7, 0xad, 0xce,
	0xb0, 0xfe, 0x45, 0x75, 0xa3, 0xb4, 0xd5, 0x49, 0xb4, 0xf7, 0xb6, 0xd5, 0x19, 0x19, 0x8a, 0xaa,
	0x26, 0x56, 0xda, 0xea, 0xa4, 0x26, 0xbb, 0xda, 0xea, 0xec, 0x5a, 0x3a, 0x6e, 0xab, 0x33, 0xd2,
	0x61, 0x65, 0x11, 0x2d, 0xd9, 0xea, 0xf4, 0xdf, 0xd2, 0xad, 0xce, 0xc8, 0x4c, 0x45, 0x6c, 0x75,
	0x86, 0x6d, 0x2e, 0xa9, 0x1a, 0x55, 0x5b, 0x9d, 0xc4, 0x8c, 0xc0, 0x71, 0xb4, 0x62, 0x2c, 0x8e,
	0xe3, 0x84, 0xc2, 0x39, 0x99, 0xe3, 0xa4, 0x92, 0x3b, 0xc6, 0x71, 0xec, 0x7f, 0xc0, 0xea, 0xc4,
	0x71, 0xa2, 0x95, 0xe5, 0xa8, 0x66, 0x89, 0xe3, 0xa8, 0x8d, 0xde, 0x38, 0x2e, 0x26, 0x2c, 0x75,
	0x3d, 0xa3, 0xc4, 0x71, 0x9c, 0xe1, 0xae, 0x38, 0xae, 0x07, 0xf9, 0x38, 0x8e, 0x8b, 0x71, 0x3c,
	0xa2, 0x04, 0x92, 0x70, 0x5c, 0xf0, 0x9e, 0x72, 0x5c, 0x4c, 0xe6, 0x22, 0x38, 0x4e, 0xb4, 0xbd,
	0xa2, 0x6e, 0x56, 0x71, 0x1c, 0x35, 0x26, 0x6c, 0x90, 0x72, 0xb5, 0x45, 0x71, 0x1b, 0xa4, 0x52,
	0x99, 0x95, 0xbc, 0x41, 0xaa, 0x28, 0xd2, 0xe2, 0xb6, 0x9b, 0x1e, 0xb9, 0x65, 0x97, 0xd8, 0xe9,
	0xb8, 0x41, 0x2a, 0x1b, 0xcb, 0x45, 0x0b, 0xc8, 0x9b, 0x4d, 0x9c, 0xa9, 0xde, 0x36, 0x48, 0x63,
	0x83, 0x8c, 0xaa, 0x8a, 0x93, 0xb7, 0x9a, 0x42, 0xf6, 0xbb, 0xdb, 0x6a, 0xea, 0xe9, 0x93, 0xd8,
	0x0d, 0xd2, 0xd8, 0x18, 0x22, 0xab, 0xe9, 0xc8, 0x06, 0x29, 0x6b, 0x61, 0xfb, 0x4c, 0xb1, 0xd9,
	0x8c, 0xd8, 0x20, 0x95, 0x9d, 0x58, 0x8d, 0x12, 0x50, 0xee, 0x32, 0x71, 0x36, 0x39, 0xb8, 0xfe,
	0xd7, 0x10, 0x8c, 0x73, 0xb5, 0x1b, 0xa8, 0x19, 0x0d, 0x57, 0xa9, 0x8c, 0x45, 0x86, 0xab, 0xa2,
	0x08, 0x66, 0x09, 0x7b, 0x30, 0xaf, 0x4d, 0x14, 0xaa, 0xcc, 0x0c, 0x4b, 0xbb, 0xad, 0x46, 0xab,
	0x6c, 0x2b, 0x17, 0x2d, 0x40, 0x2c, 0xad, 0x63, 0x4b, 0x2b, 0x68, 0x89, 0xb7, 0x24, 0xa7, 0xf7,
	0xdb, 0x18, 0xb0, 0xc6, 0x86, 0x18, 0x55, 0x73, 0xa4, 0x35, 0x39, 0xb0, 0x6e, 0x67, 0xd7, 0xc3,
	0xe6, 0x3b, 0x62, 0xf5, 0x62, 0xb1, 0xc7, 0x2f, 0xd0, 0x57, 0x31, 0x50, 0x8d, 0x8d, 0x20, 0xb2,
	0x52, 0xe9, 0x2f, 0x7d, 0xa8, 0xb2, 0x16, 0x3f, 0x95, 0x1b, 0x1d, 0x52, 0xf9, 0x81, 0x1a, 0xa9,
	0xb2, 0x0f, 0xab, 0x51, 0x02, 0x0c, 0xa9, 0x33, 0xd8, 0xe4, 0x69, 0x14, 0xc2, 0x09, 0x07, 0xd4,
	0xff, 0x1f, 0x82, 0x09, 0xfe, 0xdc, 0x1f, 0x39, 0xd1, 0x4b, 0x6f, 0xb9, 0x08, 0x42, 0x5e, 0x7a,
	0xab, 0x8a, 0x28, 0x56, 0xb0, 0x0f, 0x19, 0xed, 0x74, 0x81, 0x2f, 0x3d, 0xe4, 0xd0, 0xea, 0xa9,
	0xd7, 0xde, 0x0a, 0x7b, 0xab, 0x31, 0x12, 0xc4, 0xda, 0xb3, 0xd8, 0xda, 0x2a, 0x5a, 0x09, 0x5b,
	0x93, 0xd3, 0xfc, 0xf3, 0x98, 0xc5, 0x77, 0x7c, 0xa8, 0x91, 0xe5, 0x2b, 0x9a, 0xc3, 0x61, 0x76,
	0x27, 0xfb, 0xac, 0xe8, 0x42, 0x47, 0xd4, 0x16, 0x8b, 0x3d, 0x7f, 0x83, 0xfe, 0x35, 0x66, 0xf9,
	0x1d, 0x1f, 0x47, 0x74, 0xdd, 0xcb, 0x5f, 0xf9, 0xcb, 0x6f, 0xae, 0xc9, 0xcf, 0xea, 0x46, 0xc7,
	0xac, 0x56, 0xd5, 0xeb, 0x6f, 0x85, 0x23, 0x5a, 0xa4, 0x04, 0x83, 0xef, 0x1c, 0x36, 0x3b, 0x85,
	0x04, 0xe8, 0x30, 0x00, 0x5f, 0xff, 0x21, 0xf5, 0x6f, 0x9b, 0xdf, 0xa4, 0xd0, 0x5d, 0x18, 0xbc,
	0xf1, 0xe6, 0xd6, 0x75, 0xed, 0x06, 0x4c, 0xde, 0xb3, 0x1e, 0x18, 0x66, 0x3d, 0x77, 0x13, 0xff,
	0xcd, 0x04, 0xb4, 0xf2, 0xc0, 0xf3, 0x6c, 0xf7, 0x4a, 0xa1, 0x10, 0xf1, 0xf7, 0x14, 0xb2, 0x67,
	0xc9, 0xaf, 0x6b, 0xb5, 0x86, 0x6e, 0xd6, 0xdb, 0xed, 0xc5, 0x53, 0x97, 0xf2, 0x17, 0xb5, 0xc1,
	0xc2, 0xde, 0xa5, 0xc2, 0xc6, 0x40, 0x6a, 0xa0, 0x38, 0xc5, 0x1d, 0x25, 0x14, 0x3e, 0x74, 0xad,
	0xe6, 0x15, 0xe9, 0xcd, 0xfd, 0x35, 0x58, 0x05, 0xd8, 0xb4, 0xcd, 0x37, 0x8c, 0xfd, 0xcd, 0x96,
	0xf7, 0x00, 0x4d, 0x8f, 0x0e, 0x64, 0x27, 0xdb, 0x4f, 0x96, 0x63, 0x7e, 0x8c, 0xe5, 0x72, 0x03,
	0xdb, 0x53, 0x70, 0x3a, 0x24, 0xf4, 0xd4, 0xfd, 0xd5, 0xf8, 0xbf, 0xf2, 0xf0, 0x92, 0xbd, 0xbd,
	0x3d, 0x8c, 0xab, 0x60, 0x5e, 0xf8, 0x73, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe4, 0x1f, 0xda, 0x91,
	0x11, 0x62, 0x00, 0x00,
}
